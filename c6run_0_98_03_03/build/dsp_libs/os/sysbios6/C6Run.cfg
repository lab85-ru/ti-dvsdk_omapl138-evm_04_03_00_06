/** ============================================================================
 *  C6Run_syslink.cfg
 *  ============================================================================
 *  Copyright (C) 2002-2009, Texas Instruments Incorporated -
 *  http://www.ti.com/
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  
 *  *  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  
 *  *  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  
 *  *  Neither the name of Texas Instruments Incorporated nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  ============================================================================
 */

// SysBios Packages and Modules
var Task                    = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore               = xdc.useModule('ti.sysbios.knl.Semaphore');
var BIOS                    = xdc.useModule('ti.sysbios.BIOS');
var Clock                   = xdc.useModule('ti.sysbios.knl.Clock');
var Timer                   = xdc.useModule('ti.sysbios.hal.Timer');
var SyncSem                 = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Load                    = xdc.useModule('ti.sysbios.utils.Load');

// XDC runtime Packages and Modules
var System                  = xdc.useModule('xdc.runtime.System');
var SysStd                  = xdc.useModule('xdc.runtime.SysStd');
var Memory                  = xdc.useModule('xdc.runtime.Memory');
var TimeStamp               = xdc.useModule('xdc.runtime.Timestamp');
var Diags                   = xdc.useModule('xdc.runtime.Diags');
var LoggerBuf               = xdc.useModule('xdc.runtime.LoggerSys');
var Main                    = xdc.useModule('xdc.runtime.Main');
var Program                 = xdc.useModule('xdc.cfg.Program');

// IPC Packages and Modules
var Ipc                     = xdc.useModule('ti.sdo.ipc.Ipc');
var MultiProc               = xdc.useModule('ti.sdo.utils.MultiProc');
var MessageQ                = xdc.useModule('ti.sdo.ipc.MessageQ');
var SharedRegion            = xdc.useModule('ti.sdo.ipc.SharedRegion');

// C674x/C64x+ family Packages and Modules
var TimestampProvider       = xdc.useModule('ti.sysbios.family.c64p.TimestampProvider'); 


// Get platform-specific stuff for XDC/SysBios6 configuration
var platformDir   = java.lang.System.getenv("PLATFORM_DIR");
var platformVars  = null;
if ((new java.io.File(platformDir + "/sysbios6.xs")).exists())
{
  platformVars = xdc.loadCapsule(platformDir + "/sysbios6.xs");
}


// Get IPC-specific stuff for XDC/SysBios6 configuration
var ipcDir   = java.lang.System.getenv("IPC_DIR");
var ipcVars  = null;
if ((new java.io.File(ipcDir + "/sysbios6.xs")).exists())
{
  ipcVars = xdc.loadCapsule(ipcDir + "/sysbios6.xs");
}


// Get SharedMem-specific stuff for XDC/SysBios6 configuration
var smDir   = java.lang.System.getenv("SHAREDMEM_DIR");
var smVars  = null;
if ((new java.io.File(smDir + "/sysbios6.xs")).exists())
{
  smVars = xdc.loadCapsule(smDir + "/sysbios6.xs");
}



/*
 *  The SysStd System provider is a good one to use for debugging
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
System.SupportProxy = SysStd;


// Set the .args section to be 1KB
Program.argSize = 0x400;


// Use C674x/C64x+ core high resolution timestamp
TimeStamp.SupportProxy = TimestampProvider;


// Ipc Setup
MultiProc.setConfig
(
  platformVars.multiProcDSPDevice, 
  platformVars.multiProcDeviceArray
);

Ipc.hostProcId = MultiProc.getIdMeta("HOST");
Ipc.procSync = Ipc.ProcSync_PAIR;
for (var i = 0; i < MultiProc.numProcessors; i++)
{
  Ipc.setEntryMeta({ remoteProcId: i,});
}


// SharedRegion setup
SharedRegion.setEntryMeta
(
  0,
  {
    base:        Program.cpu.memoryMap["SR0"].base,
    len:         Program.cpu.memoryMap["SR0"].len,
    ownerProcId: Ipc.hostProcId,
    isValid:     true,
    name:        "shared_region_0",
  }
);

SharedRegion.setEntryMeta
(
  1,
  {
    base:        Program.cpu.memoryMap["SR1"].base,
    len:         Program.cpu.memoryMap["SR1"].len,
    ownerProcId: Ipc.hostProcId,
    isValid:     true,
    name:        "shared_region_1",
    createHeap:  true    
  }
);


// Default heap setup
// Since no default heap instance is specified, this will cause
// a HeapStd of specified size to be created.
Memory.defaultHeapSize = Program.cpu.memoryMap["DSPMEM"].len / 2;


// Logging setup for application code
Main.common$.diags_USER1    = Diags.ALWAYS_ON;
Main.common$.logger         = LoggerBuf.create();

