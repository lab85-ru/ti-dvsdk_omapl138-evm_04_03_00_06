include Rules.make

#DEFAULT_LINUXKERNEL_CONFIG=da850_omapl138_defconfig
DEFAULT_LINUXKERNEL_CONFIG=omapl138_lcdk_defconfig
DEFAULT_UBOOT_CONFIG=da850evm_config

DMAI_PLATFORM=ol138
KERNEL_VERSION= $(shell cat $(LINUXKERNEL_INSTALL_DIR)/include/config/kernel.release)

FIND_DSPLINKCONFIG = $(shell find $(LINK_INSTALL_DIR)/dsplink/config -name 'CURRENTCFG.MK')

.PHONY:	all clean components help cmem cmem_clean cmem_install dmai dmai_clean dmai_install linux linux_clean linux_install psp_examples psp_examples_clean psp_examples_install install codecs codecs_clean codecs_install u-boot u-boot_clean u-boot_install dsplink dsplink_clean dsplink_install audio_soc_exmaple audio_soc_example_clean audio_soc_example_install audio_soc_example_kernel audio_soc_example_kernel_install c6accel c6accel_clean c6accel_install c6run c6run_clean c6run_examples c6run_install matrix matrix_clean matrix_install dsp_benchmark dsp_benchmark_clean dsp_benchmark_install gstreamer_ti gstreamer_ti_install dm365mm dm365mm_clean dm365mm_install loadmodule_install

#==============================================================================
# Default build target
#==============================================================================
default: all

#==============================================================================
# Build target build necessary components to enable all other build targets.
#==============================================================================
components: linux dsplink cmem codecs c6accel dmai c6run dm365mm

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean: linux_clean dsplink_clean c6run_clean cmem_clean dmai_clean codecs_clean c6accel_clean u-boot_clean psp_examples_clean ceexamples_clean audio_soc_example_clean matrix_clean dsp_benchmark_clean dm365mm_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
all: components u-boot psp_examples ceexamples audio_soc_example c6run_examples matrix dsp_benchmark gstreamer_ti

#==============================================================================
# Install everything
#==============================================================================
install: linux_install dsplink_install u-boot_install psp_examples_install cmem_install dmai_install codecs_install ceexamples_install audio_soc_example_install c6accel_install c6run_install matrix_install dsp_benchmark_install gstreamer_ti_install dm365mm_install loadmodule_install

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "  components                 : Build all base components (See Note below)" 
	@echo
	@echo "  all                        : Builds all components and applications/examples"
	@echo "  clean                      : Remove files generated by the 'all' target"
	@echo
	@echo "  install                    : Install all the targets in $(EXEC_DIR)"
	@echo
	@echo "  cmem                       : Build the CMEM kernel module"
	@echo "  cmem_clean                 : Remove generated cmem files."
	@echo "  cmem_install               : Install cmemk module"
	@echo
	@echo "  dmai                       : Build DMAI"
	@echo "  dmai_clean                 : Remove generated DMAI files."
	@echo "  dmai_install               : Install dmai app"
	@echo
	@echo "  codecs                     : Build codec package"
	@echo "  codecs_clean               : Remove generated codec files."
	@echo "  codecs_install             : Install codec executable"
	@echo
	@echo "  dsplink                    : Configure and build DSP Link for ARM and DSP"
	@echo "                               and sample examples"
	@echo "  dsplink_clean              : Remove generated DSP Link files"
	@echo "  dsplink_install            : Install ARM and DSP link files"
	@echo
	@echo "  dsplink_arm                : Configure and build DSP Link for ARM"
	@echo "  dsplink_arm_clean          : Clean DSP Link for ARM"
	@echo 
	@echo "  dsplink_dsp                : Configure and build DSP Link for DSP"
	@echo "  dsplink_dsp_clean          : Clean DSP Link for DSP"
	@echo 
	@echo "  dsplink_samples            : Build DSP Link ARM and DSP sample applications"
	@echo "  dsplink_samples_clean      : Build DSP Link ARM and DSP sample applications"
	@echo
	@echo "  ceexamples                 : Build CE codecs, extensions, servers and apps"
	@echo "  ceexamples_clean           : Remove generated CE example files."
	@echo
	@echo "  linux                      : Build Linux kernel uImage and module"
	@echo "  linux_config               : Launch Linux kernel menuconfig"
	@echo "  linux_clean                : Remove generated Linux kernel files"
	@echo "  linux_install              : Install kernel binary and modules"
	@echo
	@echo "  u-boot                     : Build the u-boot boot loader"
	@echo "  u-boot_clean               : Remove generated u-boot files"
	@echo "  u-boot_install             : Install the u-boot image"
	@echo
	@echo "  psp_examples               : Build Linux examples"
	@echo "  psp_examples_clean         : Remove all generated PSP examples"
	@echo "  psp_examples_install       : Install psp examples"
	@echo
	@echo "  audio_soc_example          : Build Audio Soc example app"
	@echo "  audio_soc_example_clean    : Remove generated Audio Soc example files"
	@echo "  audio_soc_example_install  : Install Audio Soc example files"
	@echo "  audio_soc_example_kernel   : Build linux kernel for Audio Soc example files"
	@echo "  audio_soc_example_kernel_install : Install linux kernel for Audio Soc example"
	@echo
	@echo "  dm365mm                    : Build the dm365mm kernel module"
	@echo "  dm365mm_clean              : Remove generated dm365mm files"
	@echo "  dm365mm_install            : Install dm365mm module"
	@echo
	@echo "  c6accel                    : Build c6accel package"
	@echo "  c6accel_clean              : Remove generated c6accel files"
	@echo "  c6accel_install            : Install the c6accel image"
	@echo
	@echo "  c6run                      : Build c6run backend libraries"
	@echo "  c6run_clean                : Remove c6run backend libraries"
	@echo "  c6run_examples             : Build c6run examples & tests"
	@echo "  c6run_install              : Install c6run examples & tests"
	@echo
	@echo "  dsp_benchmark              : Build DSP Benchmark application launcher"
	@echo "  dsp_benchmark_clean        : Remove all DSP Benchmark files"
	@echo "  dsp_benchmark_install      : Install DSP Benchmark application"
	@echo
	@echo "  matrix                     : Build matrix application launcher"
	@echo "  matrix_clean               : Remove all matrix files"
	@echo "  matrix_install             : Install matrix"
	@echo
	@echo "  gstreamer_ti               : Build gstreamer-ti plugins"
	@echo "  gstreamer_ti_install       : Install gstreamer-ti plugins"
	@echo
	@echo "==============================================================================="
	@echo "NOTE: The 'make components' target must be issued once upon installation for"
	@echo "      all other targets to build properly.  A 'make clean' target should be"
	@echo "      issued before this target"

	@echo

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:	
	@if ! test -e $(LINUXKERNEL_INSTALL_DIR)/.config; then $(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG) ; fi
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) modules

linux_config:
	@if ! test -e $(LINUXKERNEL_INSTALL_DIR)/.config; then $(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG) ; fi
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) menuconfig
	@echo
	@echo "NOTE: **** Kernel configuration is saved and will be used during 'make linux' execution."
	@echo
	
linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX)

u-boot_clean: 
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.map $(EXEC_DIR)/boot

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
psp_examples:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/vpif KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(CSTOOL_PREFIX)

psp_examples_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/vpif KERNEL_PATH=$(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(CSTOOL_PREFIX) clean

psp_examples_install:
	install -d  $(EXEC_DIR)/usr/share/ti/linux-driver-examples
	cp $(PSP_INSTALL_DIR)/linux-driver-examples-*/vpif/vpif_test_display $(EXEC_DIR)/usr/share/ti/linux-driver-examples
	cp $(PSP_INSTALL_DIR)/linux-driver-examples-*/vpif/vpif_test_mmap_loopback $(EXEC_DIR)/usr/share/ti/linux-driver-examples/
	cp $(PSP_INSTALL_DIR)/linux-driver-examples-*/vpif/vpif_test_userptr_loopback $(EXEC_DIR)/usr/share/ti/linux-driver-examples/
	
#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean

cmem_install:
	install -d $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp
	install $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp

#==============================================================================
# Build the dm355mm kernel module (if the configured platform is dm355). Also,
# an explicit cleanup target is defined.
#==============================================================================
dm365mm:
	$(MAKE) -C $(DM365MM_MODULE_INSTALL_DIR)/module LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR)  MVTOOL_PREFIX=$(CSTOOL_PREFIX)
	$(MAKE) -C $(DM365MM_MODULE_INSTALL_DIR)/interface LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR)  MVTOOL_PREFIX=$(CSTOOL_PREFIX)

dm365mm_clean:
	$(MAKE) -C $(DM365MM_MODULE_INSTALL_DIR)/module LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR)  MVTOOL_PREFIX=$(CSTOOL_PREFIX) clean
	$(MAKE) -C $(DM365MM_MODULE_INSTALL_DIR)/interface LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR)  MVTOOL_PREFIX=$(CSTOOL_PREFIX) clean

dm365mm_install:
	install -d $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp
	install $(DM365MM_MODULE_INSTALL_DIR)/module/dm365mmap.ko  $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp

#==============================================================================
# Build codec package for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
codecs:
	$(MAKE) -C $(CODEC_INSTALL_DIR) \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	C6ACCEL_INSTALL_DIR=$(C6ACCEL_INSTALL_DIR) \
	XDCARGS="eval" \
	all

codecs_clean:
	$(MAKE) -C $(CODEC_INSTALL_DIR) \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	C6ACCEL_INSTALL_DIR=$(C6ACCEL_INSTALL_DIR) \
	XDCARGS="eval" \
	clean

codecs_install:
	install -d $(EXEC_DIR)/usr/share/ti/ti-codecs-server
	for file in $(shell find $(CODEC_INSTALL_DIR) -name *.x674); do \
	cp $$file $(EXEC_DIR)/usr/share/ti/ti-codecs-server ; \
	done
		
#==============================================================================
# Build the Davinci Multimedia Application Interface for the configured
# platform. Also, an explicit cleanup target is defined.
#==============================================================================
dmai:
	$(MAKE) -C $(DMAI_INSTALL_DIR)  \
	DMAI_INSTALL_DIR=$(DMAI_INSTALL_DIR) \
	PLATFORM=$(DMAI_PLATFORM)_al \
	CE_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CE_INSTALL_DIR) \
	CODEC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CODEC_INSTALL_DIR) \
	CMEM_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CMEM_INSTALL_DIR) \
	FC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(FC_INSTALL_DIR) \
	XDAIS_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDAIS_INSTALL_DIR) \
	LINUXLIBS_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINUXLIBS_INSTALL_DIR) \
	LINUXKERNEL_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINUXKERNEL_INSTALL_DIR) \
	CROSS_COMPILE_$(DMAI_PLATFORM)_al=$(CSTOOL_PREFIX) \
	XDC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDC_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(CODEGEN_INSTALL_DIR) \
	LINK_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(LINK_INSTALL_DIR) \
	C6ACCEL_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(C6ACCEL_INSTALL_DIR) \
	VERBOSE=false \
	all
	
dmai_clean:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(DMAI_PLATFORM)_al \
	XDC_INSTALL_DIR_$(DMAI_PLATFORM)_al=$(XDC_INSTALL_DIR) \
	clean

dmai_install:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=$(DMAI_PLATFORM)_al \
	EXEC_DIR_$(DMAI_PLATFORM)_al=$(EXEC_DIR)/usr/share/ti/ti-dmai-apps \
	install
	cd $(EXEC_DIR)/usr/share/ti/ti-dmai-apps && rm -rf cs.x674 && ln -s ../ti-codecs-server/cs.x674 cs.x674

###############################################################################
# Build codec engine examples
###############################################################################
ceexamples_apps:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_apps_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_apps_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps to target filesystem. "
	@echo 

ceexamples_extensions:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_extensions_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_extensions_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions to target filesystem. "
	@echo 


ceexamples_servers:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers  \
	DEVICES="OMAPL138" \
	GPPOS="LINUX_GCC" \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_servers_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_servers_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers to target filesystem. "
	@echo 


ceexamples_codecs:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	all 

ceexamples_codecs_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="OMAPL138" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	LPM_INSTALL_DIR=$(LPM_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	clean 

ceexamples_codecs_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs to target filesystem. "
	@echo 

ceexamples: ceexamples_codecs ceexamples_extensions ceexamples_servers ceexamples_apps
 
ceexamples_clean: ceexamples_codecs_clean ceexamples_extensions_clean ceexamples_servers_clean ceexamples_apps_clean

ceexamples_install: ceexamples_codecs_install ceexamples_extensions_install ceexamples_servers_install ceexamples_apps_install


dsplink_cfg:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	perl $(LINK_INSTALL_DIR)/dsplink/config/bin/dsplinkcfg.pl \
	--platform=OMAPL138  --nodsp=1 --dspcfg_0=OMAPL138GEMSHMEM \
	--dspos_0=DSPBIOS5XX --gppos=ARM --comps=ponslrmc

dsplink_arm_clean:
ifeq ($(FIND_DSPLINKCONFIG), $(LINK_INSTALL_DIR)/dsplink/config/BUILD/CURRENTCFG.MK)
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/gpp/src \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) \
	clean 
endif

dsplink_arm: dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/gpp/src \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) \
	all

dsplink_dsp_clean:
ifeq ($(FIND_DSPLINKCONFIG), $(LINK_INSTALL_DIR)/dsplink/config/BUILD/CURRENTCFG.MK)
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/dsp/src \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	clean 
endif

dsplink_dsp: dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/dsp/src \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	all

dsplink_samples_clean:
ifeq ($(FIND_DSPLINKCONFIG), $(LINK_INSTALL_DIR)/dsplink/config/BUILD/CURRENTCFG.MK)
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE)	-C $(LINK_INSTALL_DIR)/dsplink/gpp/src/samples \
	BASE_TOOLCHAIN=$(CSTOOL_DIR) \
	BASE_CGTOOLS=$(CSTOOL_DIR)/bin \
	OSINC_PLATFORM=$(CSTOOL_PREFIX)/lib/gcc/arm-arago-linux-gnueabi/$($(CSTOOL_PREFIX) --dumversion)/include \
	OSINC_TARGET=$(CSTOOL_DIR)/target/usr/include \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	clean

	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE)	-C $(LINK_INSTALL_DIR)/dsplink/dsp/src/samples \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	XDCTOOLS_DIR=$(XDC_INSTALL_DIR) \
	clean
endif
	
dsplink_samples:
	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE)	-C $(LINK_INSTALL_DIR)/dsplink/gpp/src/samples \
	BASE_TOOLCHAIN=$(CSTOOL_DIR) \
	BASE_CGTOOLS=$(CSTOOL_DIR)/bin \
	OSINC_PLATFORM=$(CSTOOL_PREFIX)/lib/gcc/arm-arago-linux-gnueabi/$($(CSTOOL_PREFIX) --dumversion)/include \
	OSINC_TARGET=$(CSTOOL_DIR)/target/usr/include \
	CROSS_COMPILE=$(CSTOOL_PREFIX) \
	CC=$(CSTOOL_PREFIX)gcc \
	COMPILER=$(CSTOOL_PREFIX)gcc \
	ARCHIVER=$(CSTOOL_PREFIX)ar \
	AR=$(CSTOOL_PREFIX)ar \
	LD=$(CSTOOL_PREFIX)ld \
	KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
	all

	DSPLINK=$(LINK_INSTALL_DIR)/dsplink \
	$(MAKE) -C $(LINK_INSTALL_DIR)/dsplink/dsp/src/samples \
	BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) \
	BASE_SABIOS=$(BIOS_INSTALL_DIR) \
	XDCTOOLS_DIR=$(XDC_INSTALL_DIR) \
	all

dsplink_dsp_genpackage:
	$(XDC_INSTALL_DIR)/xdc -C $(LINK_INSTALL_DIR)/dsplink/dsp clean
	$(XDC_INSTALL_DIR)/xdc -C $(LINK_INSTALL_DIR)/dsplink/dsp .interfaces

dsplink_gpp_genpackage:
	$(XDC_INSTALL_DIR)/xdc -C $(LINK_INSTALL_DIR)/dsplink/gpp clean
	$(XDC_INSTALL_DIR)/xdc -C $(LINK_INSTALL_DIR)/dsplink/gpp .interfaces

dsplink: dsplink_arm dsplink_dsp dsplink_samples dsplink_dsp_genpackage dsplink_gpp_genpackage 

dsplink_clean: dsplink_arm_clean dsplink_dsp_clean dsplink_samples_clean
    XDCPATH=${DSPLINK} ${XDC_INSTALL_DIR}/xdc .make -PR .
    XDCPATH=${DSPLINK} ${XDC_INSTALL_DIR}/xdc clean -PR .
    XDCPATH=${DSPLINK} ${XDC_INSTALL_DIR}/xdc .interfaces -PR .

dsplink_install:
	install -d $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp
	install $(LINK_INSTALL_DIR)/dsplink/gpp/export/BIN/Linux/OMAPL138/RELEASE/dsplinkk.ko $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp

	install -d $(EXEC_DIR)/usr/share/ti/ti-dsplink-examples
	cp $(LINK_INSTALL_DIR)/dsplink/gpp/export/BIN/Linux/OMAPL138/RELEASE/*gpp $(EXEC_DIR)/usr/share/ti/ti-dsplink-examples
	@for file in $(shell find $(LINK_INSTALL_DIR)/dsplink/dsp/export -name *.out); do \
	cp $$file $(EXEC_DIR)/usr/share/ti/ti-dsplink-examples ; \
	done

##############################################################################
#  Build audio soc examples
##############################################################################
audio_soc_example:
	$(MAKE) -C ./audio-soc-example_* \
	PLATFORM="$(PLATFORM)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	BIOSPSP_INSTALL_DIR="$(BIOSPSP_INSTALL_DIR)" \
	EDMA3LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	all

audio_soc_example_clean:
	$(MAKE) -C ./audio-soc-example_* \
	PLATFORM="$(PLATFORM)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	BIOSPSP_INSTALL_DIR="$(BIOSPSP_INSTALL_DIR)" \
	EDMA3LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	clean

audio_soc_example_kernel:
	PATH="$(PATH):$(PSP_INSTALL_DIR)/u-boot-*/tools" \
	$(MAKE) -C ./audio-soc-example_* \
	PLATFORM="$(PLATFORM)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" \
	LINUXKERNEL_CONFIG="$(DEFAULT_LINUXKERNEL_CONFIG)" \
	audio_soc_linux

audio_soc_example_kernel_install:
	@echo "Copying audio SOC example kernel to $(EXEC_DIR)/boot "
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage_audioSoc $(EXEC_DIR)/boot

audio_soc_example_install:
	install -d $(EXEC_DIR)/usr/share/ti/audio_soc_example/Release
	install -d $(EXEC_DIR)/usr/share/ti/audio_soc_example/Debug
	install $(LINK_INSTALL_DIR)/dsplink/gpp/export/BIN/Linux/OMAPL138/RELEASE/dsplinkk.ko $(EXEC_DIR)/usr/share/ti/audio_soc_example/Release
	install $(LINK_INSTALL_DIR)/dsplink/gpp/export/BIN/Linux/OMAPL138/DEBUG/dsplinkk.ko $(EXEC_DIR)/usr/share/ti/audio_soc_example/Debug
	cp audio-soc-example_*/gpp/evmOMAPL138/Release/* $(EXEC_DIR)/usr/share/ti/audio_soc_example/Release/.
	cp audio-soc-example_*/gpp/evmOMAPL138/Debug/* $(EXEC_DIR)/usr/share/ti/audio_soc_example/Debug/.
	cp audio-soc-example_*/dsp/evmOMAPL138/Debug/*.out $(EXEC_DIR)/usr/share/ti/audio_soc_example/Release/.
	cp audio-soc-example_*/dsp/evmOMAPL138/Debug/*.out $(EXEC_DIR)/usr/share/ti/audio_soc_example/Debug/.
	cp audio-soc-example_*/data/davincieffect_clip.pcm $(EXEC_DIR)/usr/share/ti/audio_soc_example/.

##############################################################################
#  Build c6accel
##############################################################################
c6accel:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	BIOSUTILS_INSTALL_DIR="$(BIOSUTILS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	all

c6accel_clean:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	BIOSUTILS_INSTALL_DIR="$(BIOSUTILS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	clean

c6accel_install:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	EXEC_DIR_C6ACCEL="$(EXEC_DIR)/usr/share/ti/c6accel-apps" \
	install

################################################################################
# Build C6run
################################################################################
c6run:
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	DSP_REGION_BASE_ADDR=0xC2000000 \
	DSP_REGION_CMEM_SIZE=0x01000000 \
	DSP_REGION_CODE_SIZE=0x01000000 \
	omapl138_config

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	clean

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	all

c6run_clean:
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	distclean

c6run_examples:
	source $(C6RUN_INSTALL_DIR)/c6run-environment.sh; \
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	C6RUN_TOOLCHAIN_PATH="$(C6RUN_INSTALL_DIR)" \
	examples

	source $(C6RUN_INSTALL_DIR)/c6run-environment.sh; \
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	C6RUN_TOOLCHAIN_PATH="$(C6RUN_INSTALL_DIR)" \
	tests

c6run_install:
	install -d $(EXEC_DIR)/usr/share/ti/c6run-apps

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	INSTALL_DIR="$(EXEC_DIR)/usr/share/ti/c6run-apps" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-arago-linux-gnueabi-" \
	install_programs

################################################################################
# Build DSP Benchmark application
################################################################################
dsp_benchmark:
	$(MAKE) -C $(DSP_BENCHMARK_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	DEMO_INSTALL_DIR="$(DSP_BENCHMARK_INSTALL_DIR)" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	BIOSUTILS_INSTALL_DIR="$(BIOSUTILS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	all

dsp_benchmark_clean:
	$(MAKE) -C $(DSP_BENCHMARK_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	DEMO_INSTALL_DIR="$(DSP_BENCHMARK_INSTALL_DIR)" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	BIOSUTILS_INSTALL_DIR="$(BIOSUTILS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	clean

dsp_benchmark_install:
	$(MAKE) -C $(DSP_BENCHMARK_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	EXEC_DIR_DEMO="$(EXEC_DIR)/usr/share/ti/dsp-benchmark-apps" \
	DEMO_INSTALL_DIR="$(DSP_BENCHMARK_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	install

################################################################################
# Build Martix GUI Appication Launcher
################################################################################
matrix:
	. $(SDK_INSTALL_DIR)/linux-devkit/environment-setup ; cd $(SDK_INSTALL_DIR)/example-applications/matrix-gui-* ; qmake ; $(MAKE) PLATFORM=$(PLATFORM)
	chmod 755 $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/$(PLATFORM)/bin/*

matrix_clean:
	. $(SDK_INSTALL_DIR)/linux-devkit/environment-setup;  cd $(SDK_INSTALL_DIR)/example-applications/matrix-gui-* ; qmake ; $(MAKE)  distclean

matrix_install:
	install -d $(EXEC_DIR)/etc/init.d
	install -m 0755 $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/$(PLATFORM)/etc/init $(EXEC_DIR)/etc/init.d/matrix-gui-e

	install -d $(EXEC_DIR)/usr/bin
	install -m 0755 $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/matrix_gui $(EXEC_DIR)/usr/bin/matrix_guiE
	cp -ar $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/$(PLATFORM)/bin/* \
	$(EXEC_DIR)/usr/bin/

	install -d $(EXEC_DIR)/usr/share/matrix
	cp -ar $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/$(PLATFORM)/html \
	$(EXEC_DIR)/usr/share/matrix/

	install -d $(EXEC_DIR)/usr/share/matrix
	cp -ar $(SDK_INSTALL_DIR)/example-applications/matrix-gui-*/images/ \
	$(EXEC_DIR)/usr/share/matrix/

################################################################################
# Build Gstreamer plugins
################################################################################
gstreamer_ti:
	. $(SDK_INSTALL_DIR)/linux-devkit/environment-setup ; cd $(SDK_INSTALL_DIR)/gstreamer-ti_svn* ; export CODEC_SERVER=/usr/share/ti/ti-codecs-server/cs.x674 && $(MAKE) -f Makefile.external DVSDK_PATH=$(SDK_INSTALL_DIR) omapl138

gstreamer_ti_install:
	install -d $(EXEC_DIR)/usr/lib/gstreamer-0.10
	cp $(SDK_INSTALL_DIR)/gstreamer-ti_svn*/src/.libs/*.so $(EXEC_DIR)/usr/lib/gstreamer-0.10

loadmodule_install:
	install -d $(EXEC_DIR)/etc/init.d/
	install -d $(EXEC_DIR)/etc/rc3.d/
	install -m 0755 $(SDK_INSTALL_DIR)/etc/init.d/loadmodule-rc $(EXEC_DIR)/etc/init.d/
	cd $(EXEC_DIR)/etc && rm -rf rc3.d/S99loadmodule-rc && ln -s ../init.d/loadmodule-rc rc3.d/S99loadmodule-rc
	
