/*
 *  Copyright (c) 2010 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/*
 *  ======== CTCI6488.tci ========
 *
 */

/*
 *  Load C64P.tci arch file
 */
utils.loadArch("64P", "ti.catalog.c6000");

/*
 *  ======== CTCI6488 ========
 */
function CTCI6488(name, parent)
{
    /*
     * The 'this' refers to the cpu object created in the platform file.
     * The apply function is a way to execute a function with a specific
     * 'this' pointer. Its used to initialize CTCI6488 base on a C64P.
     */
    C64P.apply(this, [name, parent]);

    /*
     * This field is used to include bios settings for this device.
     */
    this.deviceName = "TCI6488";

    /* cpu registers */
    this.registers = [];

    /*
     * This associative array defines the on-chip physical memory segments
     * indexed by the segment name.  
     */
    this.memBlock = [];
    
    this.memBlock["ASYMGEM0L2RAM"] = {
        comment: "1536K L2 RAM/CACHE",
        name: "L2RAM",
        base: 0x00800000,
        len:  0x00180000,
        space: "code/data"
    };

    this.memBlock["ASYMGEM1L2RAM"] = {
        comment: "1024K L2 RAM/CACHE",
        name: "L2RAM",
        base: 0x00800000,
        len:  0x00100000,
        space: "code/data"
    };
    
    this.memBlock["ASYMGEM2L2RAM"] = {
        comment: "512K L2 RAM/CACHE",
        name: "L2RAM",
        base: 0x00800000,
        len:  0x00080000,
        space: "code/data"
    };

    this.memBlock["SYMGEML2RAM"] = {
        comment: "1024K L2 RAM/CACHE",
        name: "L2RAM",
        base: 0x00800000,
        len:  0x00100000,
        space: "code/data"
    };
    
    this.memBlock["L1PSRAM"] = {
        comment: "32K RAM/CACHE L1 Program Memory",
        name: "L1PSRAM",
        base: 0x00E00000,
        len:  0x00008000,
        space: "code"
    };

    this.memBlock["L1DSRAM"] = {
        comment: "32K RAM/CACHE L1 Data Memory",
        name: "L1DSRAM",
        base: 0x00F00000,
        len:  0x00008000,
        space: "data"
    };

    this.memBlock["L3ROM"] = {
        comment: "64K R0M",
        name: "L3ROM",
        base: 0x3C000000,
        len:  0x00010000,
        space: "code/data"
    };

    /* Define On-chip Memory Map */
    this.mem = [];

    this.mem[0] = [
        this.memBlock["ASYMGEM0L2RAM"],
        this.memBlock["L1PSRAM"],
        this.memBlock["L1DSRAM"],
    ];

    this.mem[1] = [
        this.memBlock["ASYMGEM1L2RAM"],
        this.memBlock["L1PSRAM"],
        this.memBlock["L1DSRAM"],
    ];

    this.mem[2] = [
        this.memBlock["ASYMGEM2L2RAM"],
        this.memBlock["L1PSRAM"],
        this.memBlock["L1DSRAM"],
    ];

    this.mem[3] = [
        this.memBlock["SYMGEML2RAM"],
        this.memBlock["L1PSRAM"],
        this.memBlock["L1DSRAM"],
    ];

/*
 * ======== getMemoryMap ========
 * This method returns the on-chip memory map.
 */
this.getMemoryMap = function ()
{
    if (this.registers.symmetric == null || this.registers.symmetric == true) {
        return (this.mem[3]);
    }
    else {
        if (this.registers.dnum == null) {
            throw new Error("dnum (DSP core number) not specified");
        }
        else {
            return (this.mem[this.registers.dnum]);
        }
    }

    throw new Error("Invalid dnum: " + this.registers.dnum + " or symmetric: "
        + this.registers.symmetric + " setting.");

    return (null);
};

}
/*
 *  @(#) ti.catalog.c6000; 1, 0, 0, 0,226; 2-23-2010 16:50:37; /db/ztree/library/trees/platform/platform-k32x/src/
 */

