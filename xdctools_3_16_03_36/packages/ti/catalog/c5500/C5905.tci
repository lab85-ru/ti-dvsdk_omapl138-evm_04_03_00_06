/*
 *  Copyright (c) 2010 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/*
 *  ======== C5905.tci ========
 *  The chip configuration settings are based on document SPRS197B.
 *
 */

/*
 *  Load C55.tci arch file
 */
utils.loadArch("55", "ti.catalog.c5500");

/*
 *  ======== C5905 ========
 */
function C5905(name, parent) {
    /*
     * The 'this' refers to the cpu object created in the platform file.
     * The apply method is a way to execute a function with a specific
     * 'this' pointer. It is used to initialize C5905 based on a C55.
     */
    C55.apply(this, [name, parent]);

    this.deviceName = "5905";

    this.registers = [];

    /* 
     * Define on-chip memory blocks for 5905. 
     * All length information are in bytes. 
     */
    this.memBlock = [];

    /*
     * This memory segment is here only to show that the low addresses of
     * DARAM is reserved for the memory map registers.
     * This segment will not be included as part of the memory map returned
     * in the getMemoryMap() method.
     */
    this.memBlock["MMR"] = {
        comment: "Memory Map Registers",
        name: "MMR",
        base: 0x0,
        len:  0xc0,
        space: "code/data"
    };

    this.memBlock["DARAM"] = {
        comment: "8 Blocks of 8 KB On-Chip Dual-Access RAM",
        name: "DARAM",
        base: 0x000000c0,
        len:  0x0000ff40,
        space: "code/data"
    };

    this.memBlock["SARAM"] = {
        comment: "12 blocks of 8 KB On-Chip Single-Access RAM",
        name: "SARAM",
        base: 0x00010000,
        len:  0x00018000,
        space: "code/data"
    };

    this.memBlock["PDROM"] = {
        comment: "32KB On-Chip ROM",
        name: "PDROM",
        base: 0x00ff8000,
        len:  0x00008000,
        space: "code/data"
    };

    /* 
     * This array contains on-chip memory maps.
     * Each entry is indexed by the MPNMC bit of ST3_55 register.
     */
    this.mem = [];

    /* MPNMC = 0 */
    this.mem[0x00] = [
        this.memBlock["DARAM"],
        this.memBlock["SARAM"],
        this.memBlock["PDROM"]
    ];

    /* MPNMC = 1 */
    this.mem[0x40] = [
        this.memBlock["DARAM"],
        this.memBlock["SARAM"]
    ];

/*
 * ======== getMemoryMap ========
 * This method returns the memory map
 */
this.getMemoryMap = function ()
{
    /* If st3_55 register is null return memory map with MPNMC = 1 */
    if (this.registers.st3_55 == null) {
        return(this.mem[0x40]);
    }

    var st3_55BitMask = 0x0040;   // We only care about the MPNMC bit
    var mpnmc = this.registers.st3_55 & st3_55BitMask;

    if (this.mem[mpnmc] != null) {
        return(this.mem[mpnmc]);
    }

    throw new Error("Invalid ST3_55 value: " + this.registers.st3_55);

    return (null);
};

}
/*
 *  @(#) ti.catalog.c5500; 1, 0, 0, 0,226; 2-23-2010 16:53:05; /db/ztree/library/trees/platform/platform-k32x/src/
 */

