/*
 *  Copyright (c) 2010 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/*
 *  ======== CTNETV1050.tci ========
 *  The chip configuration settings are based on document SPRS238C.
 *
 */

/*
 *  Load C55.tci arch file
 */
utils.loadArch("55", "ti.catalog.c5500");

/*
 *  ======== CTNETV1050 ========
 */
function CTNETV1050(name, parent)
{
    /*
     * The 'this' refers to the cpu object created in the platform file.
     * The apply function is a way to execute a function with a specific
     * 'this' pointer. It's used to initialize CTNETV1050 base on a C55.
     */
    C55.apply(this, [name, parent]);

    /*
     * This field is used to include bios settings for this device.
     * If csl is available for this device, it will also be used to specify
     * the csl name in the bios config file (*.cdb).
     * The csl name will be "csl" + this.deviceName + ".lib"
     */
    this.deviceName = "TNETV1050";

    this.registers = [];

    /*
     * This associative array defines the on-chip physical memory segments
     * indexed by the segment name.
     * Note:  All memory addresses here are defined in bytes.
     */
    this.memBlock = [];

    /*
     * This memory segment is here only to show that the low addresses of
     * DARAM is reserved for the memory map registers (MMR).
     * This segment will not be included as part of the memory map returned
     * in the getMemoryMap() method.
     */
    this.memBlock["MMR"] = {
        comment: "Memory Map Registers",
        name: "MMR",
        base: 0x000,
        len:  0x100,
        space: "code/data"
    };

    this.memBlock["DARAM01"] = {
        comment: "2 blocks of 16K bytes on-chip Dual-Access RAM",
        name: "DARAM01", 
        base: 0x0100,
        len:  0x7f00,
        space: "code/data"
    };

    this.memBlock["DARAM23"] = {
        comment: "2 blocks of 16K bytes on-chip Dual-Access RAM",
        name: "DARAM23",
        base: 0x8000,
        len:  0x8000,
        space: "data"
    };

    this.memBlock["SARAM"] = {
        comment: "64K bytes on-chip Single-Access RAM",
        name: "SARAM",
        base: 0x10000, 
        len:  0x10000,
        space: "code/data"
    };

    this.memBlock["VECT"] = {
        comment: "On-Chip Interrupt Vector Table",
        name: "VECT",
        base: 0xfff800,
        len:  0x000100,
        space: "code"
    };

    /*
     * This array contains the on-chip memory map(s).
     * Each entry is indexed by the MPNMC bit of ST3_55 register.
     */
    this.mem = [];

    /* MPNMC = 0 */
    this.mem[0x0] = [
        this.memBlock["DARAM01"],
        this.memBlock["DARAM23"],
        this.memBlock["SARAM"],
        this.memBlock["VECT"]
    ];

    /*
     * ======== getMemoryMap ========
     * This method returns the memory map
     */
    this.getMemoryMap = function ()
    {
        return(this.mem[0x0]);
    };

}
/*
 *  @(#) ti.catalog.c5500; 1, 0, 0, 0,226; 2-23-2010 16:53:06; /db/ztree/library/trees/platform/platform-k32x/src/
 */

