/*
 *  Copyright (c) 2010 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/*
 *  ======== C5420.tci ========
 *  The chip configuration settings are based on document SPRS080E.
 *
 */
  
/*
 *  Load C54.tci arch file
 */
utils.loadArch("54", "ti.catalog.c5400");

/*
 *  ======== C5420 ========
 */
function C5420(name, parent) 
{
    /*
     * The 'this' refers to the cpu object created in the platform file.
     * The apply function is a way to execute a function with a specific
     * 'this' pointer.
     */
    C54.apply(this, [name, parent]);

    /*
     * This field is used to include bios settings for this device.
     * If csl is available for this device, it will also be used to specify
     * the csl name in the bios config file (*.cdb).
     * The csl name will be "csl" + this.deviceName + ".lib"
     */
    this.deviceName = "5420";

    this.registers = [];

    /* This table defines the on-chip physical memory blocks */
    this.memBlock = [];

    this.memBlock["P_DARAM0"] = {
        comment: "On-Chip DARAM0",
        name:    "P_DARAM0",
        base:    0x00000000,
        len:     0x00003F80,
        space:   "code"
    };

    this.memBlock["P_SARAM1"] = {
        comment: "On-Chip SARAM1",
        name:    "P_SARAM1",
        base:    0x00004000,
        len:     0x00004000,
        space:   "code"
    };

    this.memBlock["P_SARAM2"] = {
        comment: "On-Chip SARAM2",
        name:    "P_SARAM2",
        base:    0x00008000,
        len:     0x00007F80,
        space:   "code"
    };

    this.memBlock["VECT"] = {
        comment: "On-Chip Interrupt Vector Table",
        name:    "VECT",
        base:    0x0000FF80,
        len:     0x00000080,
        space:   "code"
    };

    this.memBlock["P_SARAM3"] = {
        comment: "On-Chip SARAM3",
        name:    "P_SARAM3",
        base:    0x00018000,
        len:     0x00008000,
        space:   "code"
    };

    this.memBlock["D_SPRAM"] = {
        comment: "On-Chip Scratch-Pad RAM",
        name:    "D_SPRAM",
        base:    0x00000060,
        len:     0x00000020,
        space:   "data"
    };

    this.memBlock["D_DARAM0"] = {
        comment: "On-Chip DARAM0",
        name:    "D_DARAM0",
        base:    0x00000080,
        len:     0x00003F80,
        space:   "data"
    };

    this.memBlock["D_SARAM1"] = {
        comment: "On-Chip SARAM1",
        name:    "D_SARAM1",
        base:    0x00004000,
        len:     0x00004000,
        space:   "data"
    };

    this.memBlock["D_SARAM2"] = {
        comment: "On-Chip SARAM2",
        name:    "D_SARAM2",
        base:    0x00008000,
        len:     0x00008000,
        space:   "data"
    };

    /*
     *  Contains the On-Chip memory maps.
     *  Each entry is indexed by a PMST value.
     */
    this.mem = [];

    /* MP/MC = 0, OVLY = 0, DROM = 0 */
    this.mem[0x0] = [
        this.memBlock["P_SARAM2"],
        this.memBlock["P_SARAM3"],
        this.memBlock["VECT"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"]
    ];
    
    /* MP/MC = 0, OVLY = 0, DROM = 1 */
    this.mem[0x8] = [
        this.memBlock["P_SARAM2"],
        this.memBlock["P_SARAM3"],
        this.memBlock["VECT"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"],
        this.memBlock["D_SARAM2"]
    ];
    
    /* MP/MC = 0, OVLY = 1, DROM = 0 */
    this.mem[0x20] = [
        this.memBlock["P_DARAM0"],
        this.memBlock["P_SARAM1"],
        this.memBlock["P_SARAM2"],
        this.memBlock["P_SARAM3"],
        this.memBlock["VECT"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"]
    ];
    
    /* MP/MC = 0, OVLY = 1, DROM = 1 */
    this.mem[0x28] = [
        this.memBlock["P_DARAM0"],
        this.memBlock["P_SARAM1"],
        this.memBlock["P_SARAM2"],
        this.memBlock["P_SARAM3"],
        this.memBlock["VECT"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"],
        this.memBlock["D_SARAM2"]
    ];
    
    /* MP/MC = 1, OVLY = 0, DROM = 0 */
    this.mem[0x40] = [
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"]
    ];

    /* MP/MC = 1, OVLY = 0, DROM = 1 */
    this.mem[0x48] = [
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"],
        this.memBlock["D_SARAM2"]
    ];
    
    /* MP/MC = 1, OVLY = 1, DROM = 0 */
    this.mem[0x60] = [
        this.memBlock["P_DARAM0"],
        this.memBlock["P_SARAM1"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"]
    ];
    
    /* MP/MC = 1, OVLY = 1, DROM = 1 */
    this.mem[0x68] = [
        this.memBlock["P_DARAM0"],
        this.memBlock["P_SARAM1"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM0"],
        this.memBlock["D_SARAM1"],
        this.memBlock["D_SARAM2"]
    ];


/*
 * ======== getMemoryMap ========
 * This method returns the memory map.
 */
this.getMemoryMap = function ()
{
    /* if pmst is null return memory map with lower pmst = 0x0 */
    if (this.registers.pmst == null) {
        return (this.mem[0x0]);
    }

    var lowerPmstMask = 0x68;   // care about MP/MC, OVLY, DROM bits only.
    var pmst = this.registers.pmst & lowerPmstMask; 

    /* return the memory map index by the lower pmst register value */
    if (this.mem[pmst] != null) {
        return (this.mem[pmst]);
    }

    throw new Error("Invalid PMST value: " + this.registers.pmst);

    return (null);
};

}
/*
 *  @(#) ti.catalog.c5400; 1, 0, 0, 0,226; 2-23-2010 16:53:04; /db/ztree/library/trees/platform/platform-k32x/src/
 */

