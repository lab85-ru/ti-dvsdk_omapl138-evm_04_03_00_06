/*
 *  Copyright (c) 2010 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/*
 *  ======== C5416.tci ========
 *  The information here is use to populate the tconf model for the 5416 chip
 *  and was taken from SPRS095K.
 *
 */

/*
 *  Load C54.tci arch file
 */
utils.loadArch("54", "ti.catalog.c5400");

/*
 *  ======== C5416 ========
 */
function C5416(name, parent)
{
    /*
     * The 'this' refers to the cpu object created in the platform file.
     * The apply function is a way to execute a function with a specific
     * 'this' pointer. Its used to initialize C5416 base on a C54.
     */
    C54.apply(this, [name, parent]);

    /*
     * This field is used to include bios settings for this device.
     * If csl is available for this device, it will also be used to specify
     * the csl name in the bios config file (*.cdb).
     * The csl name will be "csl" + this.deviceName + ".lib"
     */
    this.deviceName = "5416";

    this.registers = [];

    /* This defines the physical on-chip memory segments */
    this.memBlock = [];

    this.memBlock["P_DARAM03"] = {
        comment: "On-Chip DARAM 0-3",
        name: "P_DARAM03",
        base: 0x80, 
        len:  0x7f80,
        space: "code"
    };

    this.memBlock["P_ROM"] = {
        comment: "On-Chip ROM",
        name: "P_ROM",
        base: 0xc000,
        len:  0x3f00,
        space: "code"
    };

    this.memBlock["VECT"] = {
        comment: "On-Chip Interrupts",
        name: "VECT",
        base: 0xff80,
        len:  0x80,
        space: "code"
    };

    this.memBlock["P_DARAM47"] = {
        comment: "On-Chip DARAM 4-7",
        name: "P_DARAM47",
        base: 0x18000,
        len:  0x8000,
        space: "code"
    };

    this.memBlock["P_SARAM03"] = {
        comment: "On-Chip SARAM 0-3",
        name: "P_SARAM03",
        base: 0x28000,
        len:  0x8000,
        space:  "code"
    };

    this.memBlock["P_SARAM47"] = {
        comment: "On-Chip SARAM 4-7",
        name: "P_SARAM47",
        base: 0x38000,
        len:  0x8000,
        space:  "code"
    };

    this.memBlock["D_SPRAM"] = {
        comment: "On-Chip Scratch-Pad RAM",
        name: "D_SPRAM",
        base: 0x60,
        len:  0x20, 
        space: "data"
    };

    this.memBlock["D_DARAM03"] = {
        comment: "On-Chip DARAM 0-3",
        name: "D_DARAM03",
        base: 0x80,
        len:  0x7f80,
        space: "data"
    };

    this.memBlock["D_DARAM47"] = {
        comment: "On-Chip DARAM 4-7",
        name: "D_DARAM47",
        base: 0x8000,
        len:  0x8000,
        space: "data"
    };

    /*
     *  Contains the On-Chip memory maps
     *  Each entry is indexed by a PMST value.
     */
    this.mem = [];

    /* MP/MC = 0, OVLY = 0, DROM = 0 */
    this.mem[0x0] = [
        this.memBlock["P_ROM"],
        this.memBlock["VECT"],
        this.memBlock["P_DARAM47"],
        this.memBlock["P_SARAM03"],
        this.memBlock["P_SARAM47"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"]
    ];

    /* MP/MC = 0, OVLY = 0, DROM = 1 */
    this.mem[0x8] = [
        this.memBlock["P_ROM"],
        this.memBlock["VECT"],
        this.memBlock["P_DARAM47"],
        this.memBlock["P_SARAM03"],
        this.memBlock["P_SARAM47"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"],
        this.memBlock["D_DARAM47"]
    ];

    /* MP/MC = 0, OVLY = 1, DROM = 0 */
    this.mem[0x20] = [
        this.memBlock["P_DARAM03"],
        this.memBlock["P_ROM"],
        this.memBlock["VECT"],
        this.memBlock["P_DARAM47"],
        this.memBlock["P_SARAM03"],
        this.memBlock["P_SARAM47"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"]
    ];
    
    /* MP/MC = 0, OVLY = 1, DROM = 1 */
    this.mem[0x28] = [
        this.memBlock["P_DARAM03"],
        this.memBlock["P_ROM"],
        this.memBlock["VECT"],
        this.memBlock["P_DARAM47"],
        this.memBlock["P_SARAM03"],
        this.memBlock["P_SARAM47"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"],
        this.memBlock["D_DARAM47"]
    ];
    
    /* MP/MC = 1, OVLY = 0, DROM = 0 */
    this.mem[0x40] = [
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"]
    ];

    /* MP/MC = 1, OVLY = 0, DROM = 1 */
    this.mem[0x48] = [
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"],
        this.memBlock["D_DARAM47"]
    ];

    /* MP/MC = 1, OVLY = 1, DROM = 0 */
    this.mem[0x60] = [
        this.memBlock["P_DARAM03"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"]
    ];

    /* MP/MC = 1, OVLY = 1, DROM = 1 */
    this.mem[0x68] = [
        this.memBlock["P_DARAM03"],
        this.memBlock["D_SPRAM"],
        this.memBlock["D_DARAM03"],
        this.memBlock["D_DARAM47"]
    ];

    /* This defines the physical on-chip memory segments for old memory 
     * configurations. Other segments are defined in c54xx.cdb, while DARAM47,
     * SARAM03, and SARAM47 must be defined here.
     */
    this.oldMemBlock = [];

    this.oldMemBlock["SARAM03"] = {
        comment: "On-Chip SARAM 0-3",
        name: "SARAM03",
        base: 0x28000,
        len:  0x08000,
        space:  "code"
    };

    this.oldMemBlock["SARAM47"] = {
        comment: "On-Chip SARAM 4-7",
        name: "SARAM47",
        base: 0x38000,
        len:  0x08000,
        space:  "code"
    };

    this.oldMemBlock["DARAM47"] = {
        comment: "On-Chip DARAM 4-7",
        name: "DARAM47",
        base: 0x8000,
        len:  0x8000,
        space: "data"
    };

    /*
     *  Contains the On-Chip memory maps
     *  Each entry is indexed by a PMST value.
     */
    this.oldMem = [];

    /* MP/MC = 0, OVLY = 0, DROM = 0 */
    this.oldMem[0x0] = [
        this.oldMemBlock["SARAM03"],
        this.oldMemBlock["SARAM47"]
    ];

    /* MP/MC = 0, OVLY = 0, DROM = 1 */
    this.oldMem[0x8] = [
        this.oldMemBlock["SARAM03"],
        this.oldMemBlock["SARAM47"],
        this.oldMemBlock["DARAM47"]
    ];

    /* MP/MC = 0, OVLY = 1, DROM = 0 */
    this.oldMem[0x20] = [
        this.oldMemBlock["SARAM03"],
        this.oldMemBlock["SARAM47"]
    ];
    
    /* MP/MC = 0, OVLY = 1, DROM = 1 */
    this.oldMem[0x28] = [
        this.oldMemBlock["SARAM03"],
        this.oldMemBlock["SARAM47"],
        this.oldMemBlock["DARAM47"]
    ];
    
    /* MP/MC = 1, OVLY = 0, DROM = 0 */
    this.oldMem[0x40] = [
    ];

    /* MP/MC = 1, OVLY = 0, DROM = 1 */
    this.oldMem[0x48] = [
        this.oldMemBlock["DARAM47"]
    ];

    /* MP/MC = 1, OVLY = 1, DROM = 0 */
    this.oldMem[0x60] = [
    ];

    /* MP/MC = 1, OVLY = 1, DROM = 1 */
    this.oldMem[0x68] = [
        this.oldMemBlock["DARAM47"]
    ];

    /*
     * ======== getMemoryMap ========
     * This method returns the memory map.
     */
    this.getMemoryMap = function ()
    {
        if (this.registers.pmst == null) {
            return (this.mem[0x0]);
        }

        var lowerPmstMask = 0x68;   // care about MP/MC, OVLY, DROM bits only.
        var pmst = this.registers.pmst & lowerPmstMask;

        if (this.mem[pmst] != null) {
            return (this.mem[pmst]);
        }

        throw new Error("Invalid PMST value: " + this.registers.pmst);

        return (null);
    };

    /*
     * ======== getOldMemoryMap ========
     * This method returns the part of the old memory map not in the cdb file.
     */
    this.getOldMemoryMap = function ()
    {
        if (this.registers.pmst == null) {
            return (this.oldMem[0x0]);
        }

        var lowerPmstMask = 0x68;   // care about MP/MC, OVLY, DROM bits only.
        var pmst = this.registers.pmst & lowerPmstMask;

        if (this.oldMem[pmst] != null) {
            return (this.oldMem[pmst]);
        }

        throw new Error("Invalid PMST value: " + this.registers.pmst);

        return (null);
    };

}
/*
 *  @(#) ti.catalog.c5400; 1, 0, 0, 0,226; 2-23-2010 16:53:04; /db/ztree/library/trees/platform/platform-k32x/src/
 */

