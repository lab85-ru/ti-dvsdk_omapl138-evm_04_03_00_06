%%{
/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
%%}
/*
 *  ======== `String(this.module).toLowerCase()`_`String(this.vendor).toLowerCase()`.h ========
 */

#ifndef `this.module`_`this.vendor`_`this.inface`_
#define `this.module`_`this.vendor`_`this.inface`_

#include <ti/xdais/ialg.h>
#include <ti/xdais/dm/iuniversal.h>

#ifdef __cplusplus
extern "C" {
#endif

% if (this.ires) {
#include <ti/xdais/ires.h>
% }

/*
 *  ======== `this.module`_`this.vendor`_I`this.module` ========
 *  Our implementation of the IUNIVERSAL interface
 */
extern IUNIVERSAL_Fxns `this.module`_`this.vendor`_I`this.module`;
extern IALG_Fxns `this.module`_`this.vendor`_IALG;

% if (this.ires) {
/*
 *  ======== `this.module`_`this.vendor`_IRES ========
 *  Our implementation of the IRES_Fxns interface
 */
extern IRES_Fxns `this.module`_`this.vendor`_IRES;
% }

/*
 * You can optionally define algorithm-specific command IDs to send
 * in the control() call.  You can define these by enabling the
 * following code.  Feel free to change the "USERCMDX" to something
 * meaningful to users of this algorithm.
 */
#if 0
#define `this.inface`_USERCMD0 (XDM_CUSTOMCMDBASE + 0)
#define `this.inface`_USERCMD1 (XDM_CUSTOMCMDBASE + 1)
#endif


/*
 *  ======== `this.inface`_Params ========
 */
typedef struct `this.inface`_Params {
    /* This must be the first field */
    IALG_Params base;

    /* ... add any extended fields here ... */
    /* for example:
    XDAS_Int32 myField;
    */
} `this.inface`_Params;

/*
 *  ======== `this.inface`_PARAMS ========
 *  Default creation parameters.  Though not required, it is
 *  often a good practice to provide default create params for
 *  users of your algorithm.
 */
extern const `this.inface`_Params `this.inface`_PARAMS;

/*
 *  ======== `this.inface`_InArgs ========
 */
typedef struct `this.inface`_InArgs {
    /* This must be the first field */
    IUNIVERSAL_InArgs base;

    /* ... add any extended fields here ... */
    /* for example:
    XDAS_Int32 myField;
    */
} `this.inface`_InArgs;

/*
 *  ======== `this.inface`_OutArgs ========
 */
typedef struct `this.inface`_OutArgs {
    /* This must be the first field */
    IUNIVERSAL_OutArgs base;

    /* ... add any extended fields here ... */
    /* for example:
    XDAS_Int32 myField;
    */
} `this.inface`_OutArgs;

/*
 *  ======== `this.inface`_DynamicParams ========
 */
typedef struct `this.inface`_DynamicParams {
    /* This must be the first field */
    IUNIVERSAL_DynamicParams base;

    /* ... add any extended fields here ... */
    /* for example:
    XDAS_Int32 myField;
    */
} `this.inface`_DynamicParams;

/*
 *  ======== `this.inface`_Status ========
 */
typedef struct `this.inface`_Status {
    /* This must be the first field */
    IUNIVERSAL_Status base;

    /* ... add any extended fields here ... */
    /* for example:
    XDAS_Int32 myField;
    */
} `this.inface`_Status;

#ifdef __cplusplus
}
#endif

#endif
%%{
/*
 * @(#) ti.xdais.dm.templates; 1, 0, 0,31; 9-18-2010 14:46:37; /db/wtree/library/trees/dais/dais-t03x/src/ xlibrary

 */

%%}
