/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* This package interestingly _can_ support building the codec with DMA
 * acceleration.  However, the implementation utilizes the
 * ti.sdo.fc.acpy3.ACPY3 module from the Framework Components product.
 * We conditionally add support for this DMA-based acceleration at build time,
 * depending on whether the ACPY3 package can be found.
 *
 * The rationale for making this a _conditional_ dependency on FC is that
 * XDAIS alg developers are not required to use Framework Components - and this
 * example should be equally buildable by both types of users.
 *
 * Basically, if we can find ACPY3, we'll build the DMA-based version, too.
 *
 * Note, the .pjt build doesn't support this ACPY3 build support.
 */
try {
    var acpy3 = xdc.getPackageRepository('ti.sdo.fc.acpy3');

    /* if we got here, acpy3 is set, and will be used below.  Else, it's null */
}
catch (e) {
    /*
     * Non-fatal remark.  If you expected to find ACPY3(!), you can print 'e'
     * for more details.
     */
    print("Remark:  ACPY3 package not found." /* + e */);
};

/* If you don't want to redistribute your sources, set this to false. */
Pkg.attrs.exportSrc = true;

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

var publicHeader = "videnc1_copy_ti.h";

/* Always include the public header file in the generated release archive */
Pkg.otherFiles.$add(publicHeader);

/*
 *  Optionally, you may also want to redistribute these source files,
 *  depending on your customer and delivery scenarios.
 */
Pkg.otherFiles.$add("pjt/videnc1_copy.pjt");    /* CCS project file */
Pkg.otherFiles.$add("package.bld");             /* XDC build script */
Pkg.otherFiles.$add("videnc1_copy_ti_priv.h");  /* Internal interface header */

/*
 * Create an array containing the files to include in this
 * package.  Note that the extension is added by XDC, so it need
 * not be explicitly specified.
 */
var SRCS = ["videnc1_copy"];

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];

//    print("building for target " + targ.name + " ...");

    /* Build for all profiles */
    for (var profile in targ.profiles) {
        var libName = "lib/" + profile + "/videnc1_copy";
        var fullLibName = libName + '.a' + targ.suffix;

        /* If ACPY3 was found, add another library optimized for EDMA3 */
        if (acpy3) {
            /*
             * Note, we build both a debug and release version of the
             * DMA-enabled library.
             *
             * Note also that ACPY3 is not supported on all devices(!).
             * E.g., there is no x86 system with an EDMA3 device, so
             * ACPY3 doesn't provide a x86-based library.  _This_ package
             * builds libs for all targets thrown at it, and this may include
             * targets like x86.  In this case, if a x86 executable were
             * built, and the DMA support were [incorrectly] enabled, there
             * would likely be a link-time error as the ACPY3_* symbols this
             * DMA-enabled lib requires could not be satisfied by any ACPY3
             * library.
             */
            Pkg.addLibrary(libName + "_dma", targ, {
                copts: "-DUSE_ACPY3 ",
            }).addObjects(SRCS);

        }

        /* Always add the non-DMA accelerated lib */
        Pkg.addLibrary(libName, targ, {
            profile: profile
        }).addObjects(SRCS);

        /* and use the QualiTI-provided template to generate .qti scripts */
        var qtiAttrs = [
                "TI",               // vendor
                publicHeader,       // headers (relative to base dir)
                "IVIDENC1COPY",     // interface name
                "VIDENC1COPY",      // module name,
                fullLibName,        // lib name (relative to base dir)
                "../.."             // base dir (relative to .qti script)
        ];

        xdc.loadTemplate("ti/xdais/qualiti/QtiProject.xdt").genFile(
                fullLibName + '.qti', Pkg, qtiAttrs);

        /* Include the newly generated .qti script to the release */
        Pkg.otherFiles.$add(fullLibName + '.qti');
    }
}
/*
 *  @(#) ti.xdais.dm.examples.videnc1_copy; 2, 0, 0,209; 9-18-2010 14:46:29; /db/wtree/library/trees/dais/dais-t03x/src/ xlibrary

 */

