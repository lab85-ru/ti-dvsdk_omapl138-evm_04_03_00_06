var dataSection = "DDR2";
var udataSection = "DDR2";
var codeSection = "DDR2";
/*
 *  "Use" the various codec modules; i.e., implementation of codecs.
 *  All these "xdc.useModule" commands provide a handle to the codecs,
 *  which we'll use to initialize config params and add the codecs to
 *  the Server.algs array.
 */
    var C6ACCEL = xdc.useModule('ti.c6accel.ce.C6ACCEL');

        C6ACCEL.serverFxns = "UNIVERSAL_SKEL";
        C6ACCEL.stubFxns = "UNIVERSAL_STUBS";
        C6ACCEL.useCache = false;
        C6ACCEL.alg.watermark = false;
        C6ACCEL.alg.codeSection = codeSection;
        C6ACCEL.alg.udataSection = udataSection;
        C6ACCEL.alg.dataSection = dataSection;

    var AACHEDEC = xdc.useModule('ti.sdo.codecs.aachedec.ce.AACHEDEC');

        AACHEDEC.serverFxns = "AUDDEC1_SKEL";
        AACHEDEC.stubFxns = "AUDDEC1_STUBS";
        AACHEDEC.useCache = false;
        AACHEDEC.alg.watermark = false;
        AACHEDEC.alg.codeSection = codeSection;
        AACHEDEC.alg.udataSection = udataSection;
        AACHEDEC.alg.dataSection = dataSection;

    var G711DEC = xdc.useModule('ti.sdo.codecs.g711dec.ce.G711DEC');

        G711DEC.serverFxns = "SPHDEC1_SKEL";
        G711DEC.stubFxns = "SPHDEC1_STUBS";
        G711DEC.useCache = false;
        G711DEC.alg.watermark = false;
        G711DEC.alg.codeSection = codeSection;
        G711DEC.alg.udataSection = udataSection;
        G711DEC.alg.dataSection = dataSection;

    var G711ENC = xdc.useModule('ti.sdo.codecs.g711enc.ce.G711ENC');

        G711ENC.serverFxns = "SPHENC1_SKEL";
        G711ENC.stubFxns = "SPHENC1_STUBS";
        G711ENC.useCache = false;
        G711ENC.alg.watermark = false;
        G711ENC.alg.codeSection = codeSection;
        G711ENC.alg.udataSection = udataSection;
        G711ENC.alg.dataSection = dataSection;

    var H264DEC = xdc.useModule('ti.sdo.codecs.h264dec.ce.H264DEC');

        H264DEC.serverFxns = "VIDDEC2_SKEL";
        H264DEC.useCache = false;
        H264DEC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        H264DEC.stubFxns = "VIDDEC2_STUBS";
        H264DEC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        H264DEC.alg.watermark = false;
        H264DEC.alg.codeSection = codeSection;
        H264DEC.alg.udataSection = udataSection;
        H264DEC.alg.dataSection = dataSection;

    var H264ENC = xdc.useModule('ti.sdo.codecs.h264enc.ce.H264ENC');

        H264ENC.serverFxns = "VIDENC1_SKEL";
        H264ENC.useCache = false;
        H264ENC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        H264ENC.stubFxns = "VIDENC1_STUBS";
        H264ENC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        H264ENC.alg.watermark = false;
        H264ENC.alg.codeSection = codeSection;
        H264ENC.alg.udataSection = udataSection;
        H264ENC.alg.dataSection = dataSection;

    var JPEGDEC = xdc.useModule('ti.sdo.codecs.jpegdec.ce.JPEGDEC');

        JPEGDEC.serverFxns = "IMGDEC1_SKEL";
        JPEGDEC.useCache = false;
        JPEGDEC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        JPEGDEC.stubFxns = "IMGDEC1_STUBS";
        JPEGDEC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        JPEGDEC.alg.watermark = false;
        JPEGDEC.alg.codeSection = codeSection;
        JPEGDEC.alg.udataSection = udataSection;
        JPEGDEC.alg.dataSection = dataSection;

    var JPEGENC = xdc.useModule('ti.sdo.codecs.jpegenc.ce.JPEGENC');

        JPEGENC.serverFxns = "IMGENC1_SKEL";
        JPEGENC.useCache = false;
        JPEGENC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        JPEGENC.stubFxns = "IMGENC1_STUBS";
        JPEGENC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        JPEGENC.alg.watermark = false;
        JPEGENC.alg.codeSection = codeSection;
        JPEGENC.alg.udataSection = udataSection;
        JPEGENC.alg.dataSection = dataSection;

    var MPEG2DEC = xdc.useModule('ti.sdo.codecs.mpeg2dec.ce.MPEG2DEC');

        MPEG2DEC.serverFxns = "VIDDEC2_SKEL";
        MPEG2DEC.useCache = false;
        MPEG2DEC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG2DEC.stubFxns = "VIDDEC2_STUBS";
        MPEG2DEC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG2DEC.alg.watermark = false;
        MPEG2DEC.alg.codeSection = codeSection;
        MPEG2DEC.alg.udataSection = udataSection;
        MPEG2DEC.alg.dataSection = dataSection;

    var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC');

        MPEG4DEC.serverFxns = "VIDDEC2_SKEL";
        MPEG4DEC.useCache = false;
        MPEG4DEC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG4DEC.stubFxns = "VIDDEC2_STUBS";
        MPEG4DEC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG4DEC.alg.watermark = false;
        MPEG4DEC.alg.codeSection = codeSection;
        MPEG4DEC.alg.udataSection = udataSection;
        MPEG4DEC.alg.dataSection = dataSection;

    var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC');

        MPEG4ENC.serverFxns = "VIDENC1_SKEL";
        MPEG4ENC.useCache = false;
        MPEG4ENC.manageOutBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG4ENC.stubFxns = "VIDENC1_STUBS";
        MPEG4ENC.manageInBufsCache = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        MPEG4ENC.alg.watermark = false;
        MPEG4ENC.alg.codeSection = codeSection;
        MPEG4ENC.alg.udataSection = udataSection;
        MPEG4ENC.alg.dataSection = dataSection;



/*
 * The array of algorithms this server can serve up.  This array also
 * configures details about the threads which will be created to run the
 * algorithms (e.g. stack sizes, priorities, etc.).
 */
Server.algs = [ 
    {name: "c6accel", mod: C6ACCEL , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 3},
        groupId : 2,
    },

    {name: "aachedec", mod: AACHEDEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 3},
        groupId : 2,
    },

    {name: "g711dec", mod: G711DEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 3},
        groupId : 2,
    },

    {name: "g711enc", mod: G711ENC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 3},
        groupId : 2,
    },

    {name: "h264dec", mod: H264DEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1},
        groupId : 0,
    },

    {name: "h264enc", mod: H264ENC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1},
        groupId : 0,
    },

    {name: "jpegdec", mod: JPEGDEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 2},
        groupId : 1,
    },

    {name: "jpegenc", mod: JPEGENC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 2},
        groupId : 1,
    },

    {name: "mpeg2dec", mod: MPEG2DEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1},
        groupId : 0,
    },

    {name: "mpeg4dec", mod: MPEG4DEC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1},
        groupId : 0,
    },

    {name: "mpeg4enc", mod: MPEG4ENC , threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1},
        groupId : 0,
    },

];

