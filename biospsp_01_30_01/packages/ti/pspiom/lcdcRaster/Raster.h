/*
 * Raster.h
 *
 * This file contains Application programming interface for the LCDC Raster 
 * driver and command/macro definitions used by the LCDC Raster driver.
 *
 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/** \mainpage    PSP LCDC Raster Driver on BIOS 5.x
 *
 *  \section    Introduction
 *
 *  \subsection    xxx    Purpose and Scope
 *  The purpose of this document is to explain the LCDC Raster driver written
 *  for DSP/BIOS 5.x.
 *
 *  \subsection    aaa    LCDC Raster
 *
 *  \subsection    ddd   Compiler defines to add/remove features
 *
 *  Define to turn OFF parameter checking.
 *  Use -DPSP_DISABLE_INPUT_PARAMETER_CHECK when building library
 *
 *  Define to turn OFF asserts. Use -DNDEBUG when building library.
 *
 *  Define to turn ON statistics gathering.
 *  Use -DRaster_CAPTURE_EVENT_STATISTICS
 *
 *  A note on the capture event statistics within the driver
 *
 * Raster_CAPTURE_EVENT_STATISTICS; When defined will try to log
 * the interrupts generated by the LCDC peripheral. In the best case the LCDC
 * will generate interrupts for every palette loaded and frame completion,
 * this will happen at the rate, not less than, 60fps. This results in a total
 * of around 120 interrupts and logs per second. Hence the use of the above can
 * degrade the performance of the driver and should be used only for DEBUG
 * purposes.
 *
 * Max-Min policy:
 * Min is the minimum value that will result in a successful operation.
 * Max is the maximum value that will result in a successful operation.
 * The range is given by (Max-Min)+1.
 *
 *  \subsection    bbb    DSP/BIOS System
 *  DSP/BIOS is a real time kernel provided by TI to use with its
 *  DSP processors.
 *
 *  \subsection    References
 *    -# DSP/BIOS driver development <b>SPRU616.pdf</b>
 *
 *  \file  ti/pspiom/lcdcraster/Raster.h
 *
 *  \brief  Lcdc Raster interface definition
 *
 *  This file contains the interfaces, data types and symbolic definitions
 *  that are needed by the application to utilize the serivces of the Lcdc
 *  device driver.
 */

#ifndef Raster_H_
#define Raster_H_

#include <std.h>
#include <iom.h>

#ifdef __cplusplus
extern "C"
{
#endif

/* -------- enums -------- */

typedef enum Raster_BitsPerPixel {

    /**< Bits Per Pixel =  1 bit per pixel                                    */
    Raster_BitsPerPixel_BITS1 = 1,

    /**< Bits Per Pixel =  2 bits per pixel                                   */
    Raster_BitsPerPixel_BITS2 = 2,

    /**< Bits Per Pixel =  4 bits per pixel                                   */
    Raster_BitsPerPixel_BITS4 = 4,

    /**< Bits Per Pixel =  8 bits per pixel                                   */
    Raster_BitsPerPixel_BITS8 = 8,

    /**< Bits Per Pixel = 16 bits per pixel                                   */
    Raster_BitsPerPixel_BITS16 = 16,

    /**< Bits Per Pixel = 24 bits per pixel                                   */
    Raster_BitsPerPixel_BITS24 = 24

}Raster_BitsPerPixel;

typedef enum Raster_CCAPTION_SWITCH {

    /**< Invalid Caption Data */
    Raster_CCAPTION_SWITCH_INVALID = 0,

    /**< Valid Caption Data   */
    Raster_CCAPTION_SWITCH_VALID = 1

}Raster_CCAPTION_SWITCH;

typedef enum Raster_Controller {

    /**< Undefined type of controller                                         */
    Raster_Controller_UNDEFINED = 0x0,

    /**< Synchronous controller in LCDC                                       */
    Raster_Controller_RASTER = 0x1,

    /**< Asynchronous controller in LCDC                                      */
    Raster_Controller_LIDD = 0x2

}Raster_Controller;

/**
 * \brief DmaBurstSize
 *
 * Enumerates the burst size settings for DMA transfer.
 * All transfers are 32-bit wide.
 */
typedef enum Raster_DmaBurstSize {

    /**< Undefined. To be used only by driver                               */
    Raster_DmaBurstSize_UNDEFINED = 0x0,

    /**< Burst size of 1                                                    */
    Raster_DmaBurstSize_1 = 0x1,

    /**< Burst size of 2                                                    */
    Raster_DmaBurstSize_2 = 0x2,

    /**< Burst size of 4                                                    */
    Raster_DmaBurstSize_4 = 0x3,

    /**< Burst size of 8                                                    */
    Raster_DmaBurstSize_8 = 0x4,

    /**< Burst size of 16                                                   */
    Raster_DmaBurstSize_16 = 0x5

}Raster_DmaBurstSize;

/**
 * \brief DmaFb
 *
 * Enumerates the frame mode set by the controller. The built-in DMA in the
 * controller can operate in two different modes viz, Single buffer mode and
 * Ping-pong(Twin buffer) mode
 */
typedef enum Raster_DmaFb {

    /**< Undefined. To be used only by driver                               */
    Raster_DmaFb_UNDEFINED = 0x0,

    /**< Dma uses one frame buffer                                          */
    Raster_DmaFb_SINGLE = 0x1,

    /**< Dma uses two frame buffers                                         */
    Raster_DmaFb_DOUBLE = 0x2

}Raster_DmaFb;

/**
 * \brief FBContent
 *
 * Enumerates the content type of frame buffer data
 */
typedef enum Raster_FBContent {

    /**< Undefined. To be used only by driver                               */
    Raster_FBContent_UNDEFINED = 0x0,

    /**< Contains only palette data                                         */
    Raster_FBContent_PALETTE = 0x1,

    /**< Contains only pixel data                                         */
    Raster_FBContent_DATA = 0x2,

    /**< Contains both palette and pixel data                               */
    Raster_FBContent_PALETTE_DATA = 0x3

}Raster_FBContent;

/**
 * \brief FbBitsPerPixel
 *
 * Enumerate the number of bits per single pixel information
 */
typedef enum Raster_FbBitsPerPixel {

    /**< Undefined. To be used only by driver                               */
    Raster_FbBitsPerPixel_UNDEFINED = 0x0,

    /**< 1 bit per 1 Pixel; palette used                                    */
    Raster_FbBitsPerPixel_1BPP = 0x1,

    /**< 2 bit per 1 pixel; palette used                                    */
    Raster_FbBitsPerPixel_2BPP = 0x2,

    /**< 4 bit per 1 pixel; palette used                                    */
    Raster_FbBitsPerPixel_4BPP = 0x3,

    /**< 8 bit per 1 pixel; palette used                                    */
    Raster_FbBitsPerPixel_8BPP = 0x4,

    /**< 12 bit per 1 pixel; palette not used. 12 & 16BPP have same value   */
    Raster_FbBitsPerPixel_12BPP = 0x5,

    /**< 16 bit per 1 pixel; palette not used. 12 & 16BPP have same value   */
    Raster_FbBitsPerPixel_16BPP = 0x5

}Raster_FbBitsPerPixel;

typedef enum Raster_Intr {

    /* Undefined. To be used only by driver                               */
    Raster_Intr_UNDEFINED = 0x00,

    /* Enable Ouput fifo underrun error                                   */
    Raster_Intr_OFIFO_UNDERRUN_ENABLE = 0x01u,

    /* Enable Frame synchronization lost error                            */
    Raster_Intr_FRAMESYNC_LOST_ENABLE = 0x02u,

    /* Enable Palette data transferred event notification                 */
    Raster_Intr_PALETTE_LOADED_ENABLE = 0x04u,

    /* Enable AC bias transition done event notification                  */
    Raster_Intr_ACBIAS_TRANSITION_ENABLE = 0x08u,

    /* Enable End of Frame event notification                             */
    Raster_Intr_FRAME_DONE_ENABLE = 0x10u,

    /* Disable Ouput fifo underrun error                                  */
    Raster_Intr_OFIFO_UNDERRUN_DISABLE = 0xFEu,

    /* Disable Frame synchronization lost error                           */
    Raster_Intr_FRAMESYNC_LOST_DISABLE = 0xFDu,

    /* Disable Palette data transferred event notification                */
    Raster_Intr_PALETTE_LOADED_DISABLE = 0xFBu,

    /* Disable AC bias transition done event notification                 */
    Raster_Intr_ACBIAS_TRANSITION_DISABLE = 0xF7u,

    /* Disable Frame buffer data transferred event notification           */
    Raster_Intr_FRAME_DONE_DISABLE = 0xEFu

}Rsater_Intr;

/**
 * \brief OpMode
 *
 * Enumerations for driver operating modes
 */
typedef enum Raster_OpMode {
    /**< DMA Mode of operation, DMA interrupts used for DMA completion */
    Raster_OpMode_DMAINTERRUPT = 0
}Raster_OpMode;

/**
 * \brief RasterDataOrder
 *
 * Enumerates the order of Raster data
 */
typedef enum Raster_DataOrder {

    /**< Undefined. To be used only by driver                               */
    Raster_DataOrder_UNDEFINED = 0x0,

    /**< Data is ordered as LSB to MSB                                      */
    Raster_DataOrder_LSBMSB = 0x1,

    /**< Data is ordered as MSB to LSB                                      */
    Raster_DataOrder_MSBLSB = 0x2

}Raster_DataOrder;

/**
 * \brief RasterDisplay
 *
 * Enumerates the different types of displays supported by raster
 */
typedef enum Raster_Display {

    /**< Undefined. To be used only by driver                               */
    Raster_Display_UNDEFINED = 0x0,

    /**< Monochrome display                                                 */
    Raster_Display_MONOC = 0x1,

    /**< Color display                                                      */
    Raster_Display_COLOR = 0x2

}Raster_Display;

typedef enum Raster_Intface {
    Raster_Intface_INTERFACE_UNDEFINED = 0x0,
    Raster_Intface_SERIAL_4PIN = 0x1,
    Raster_Intface_SERIAL_8PIN = 0x2,
    Raster_Intface_PARALLEL_8PIN = 0x2,
    Raster_Intface_PARALLEL_16PIN = 0x3
}Raster_Intface;

/**
 * \brief RasterInterface
 *
 * Enumerates the physical interfaces supported by the raster
 * Three interfaces are supported, 4-pin, 8-pin and 16-pin
 * The way the data is sent also can be different, viz:
 * 1. Serial
 * Eg. [Pix3] [Pix2] [Pix1] ------------- Line1
 * OR
 * 2. Parallel
 * Eg. [Bit0.Pix1] ------- Line1
 *     [Bit1.Pix1] ------- Line2
 *     -------------------------
 *     [Bitn.Pix1] ------- Linen
 */
typedef enum Raster_Output {

    /**< Undefined. To be used only by driver                               */
    Raster_Output_OUTPUT_UNDEFINED = 0x0,

    /**< Mono 4-pin interface for STN panels                                */
    Raster_Output_STN_RIGHTALIGNED = 0x1,

    /**< Mono 8-pin interface for STN panels                                */
    Raster_Output_STN_INTRAPOLATED = 0x2,

    /**< Color 8-pin interface for STN panels                               */
    Raster_Output_TFT_RIGHTALIGNED = 0x3,

    /**< Color 16-pin interface for TFT panels                              */
    Raster_Output_TFT_INTRAPOLATED = 0x4

}Raster_Output;

/**
 * \brief RasterPanel
 *
 * Enumerates different types of panels supported by raster
 * 1. TFT - Thin Film Transistor
 * 2. STN - Super Twister Nematic
 */
typedef enum Raster_Panel {

    /**< Undefined. To be used only by driver                               */
    Raster_Panel_UNDEFINED = 0x0,

    /**< Super Twisted Nematic panel                                        */
    Raster_Panel_STN = 0x1,

    /**< Thin Film Transistor panel                                         */
    Raster_Panel_TFT = 0x2

}Raster_Panel;

/**
 * \brief RasterSubpanelPos
 *
 * Enumerates the subpanel positioning
 */
typedef enum Raster_SubpanelPos {

    /**< Undefined. To be used only by driver                               */
    Raster_SubpanelPos_UNDEFINED = 0x0,

    /**< Subpanel is positioned above                                       */
    Raster_SubpanelPos_HIGH = 0x1,

    /**< Subpanel is positioned below                                       */
    Raster_SubpanelPos_LOW = 0x2

}Raster_SubpanelPos;

/**
 * \brief RasterSyncEdge
 *
 * Enumerates if H and V sync edge are on the rising or falling edge of PCLK
 */
typedef enum Raster_SyncEdge {

    /**< Undefined. To be used only by driver                               */
    Raster_SyncEdge_UNDEFINED = 0x0,

    /**< Sync on the rising edge of PCLK                                    */
    Raster_SyncEdge_RISING = 0x1,

    /**< Sync on the falling edge of PCLK                                   */
    Raster_SyncEdge_FALLING = 0x2

}Raster_SyncEdge;

/**
 * \brief  PLL domain to be used by the device
 */
typedef enum Raster_pllDomain_t
{
    Raster_pllDomain_0 = 0,
    /**< PLL domain 0       */

    Raster_pllDomain_1 = 1
    /**< PLL domain 1       */
}Raster_pllDomain;

/* -------- structs -------- */

typedef struct Raster_CaptionBuffer {

    /**< Caption Validity */
    Raster_CCAPTION_SWITCH cCaptionValid;

    /**< 1st Byte Of Data */
    Uint8 char1;

    /**< 2nd Byte Of Data */
    Uint8 char2;

}Raster_CaptionBuffer;

/**
 * \brief ChanParams
 *
 * Structure to hold the parameters for Lcd. This will act as paramters for
 * the channel itself
 */
typedef struct Raster_ChanParams {

    /**< To indicate controller type                                        */
    Raster_Controller controller;

    /**< To contain the controller config                                   */
    Ptr chanConf;

    /**< This is pointer to heap memory on which LCDC driver shall allocate
     * memory for framebuffer, on application's behalf, when application
     * uses the ALLOC_FB IOCTL
     */
    Int segId;

}Raster_ChanParams;

/**
 * \brief DmaConfig
 *
 * Raster DMA configuration
 */
typedef struct Raster_DmaConfig {

    /**< Frame buffer mode                                                  */
    Raster_DmaFb fbMode;

    /**< Dma burst size; all transfers are 32-bit wide                      */
    Raster_DmaBurstSize burstSize;

    /**< Dma big endian data reordering enabled or not                      */
    Bool bigEndian;

    /**< Enable End-of-frame interrupt on DMA                               */
    Bool eofInt;

}Raster_DmaConfig;


/**
 * \brief DeviceConf
 *
 *  This structure defines different configuration options available for the
 *  LCDC device
 */
typedef struct Raster_DeviceConf
{
    Uint32           clkFreqHz;
    /**< Clock divisor to specify PCLK                                        */

    Raster_OpMode    opMode;
    /**< Device mode of operation                                             */

    Uint32           hwiNum;
    /**< HWI number associated with this device event                         */

    Raster_DmaConfig dma;
    /**< Dma controller configurations                                        */

    Bool             pscPwrmEnable;
    /**< PSC module power managment enable & disable control                  */
    
    /**< PLL Domain the LCDC is based in                                      */
    Raster_pllDomain pllDomain;

}Raster_DeviceConf;


/**
 * \brief EventStat
 *
 * Raster Event statistics collection structure
 */
typedef struct Raster_EventStat {

    /**< Count of end of frame 0 events                                     */
    Uint32 eof1;

    /**< Count of end of frame 1 events                                     */
    Uint32 eof0;

    /**< Count of palette loaded events                                     */
    Uint32 pl;

    /**< Count of fifo underflow events                                     */
    Uint32 fuf;

    /**< Count of ac bias status events                                     */
    Uint32 abc;

    /**< Count of sync lost events                                          */
    Uint32 sync;

    /**< Count of frame done events                                         */
    Uint32 done;
    
}Raster_EventStat;

/**
 * \brief FrameBuffer
 *
 * Structure representing the framebuffer, used to submit the LCD data
 */
typedef struct Raster_FrameBuffer {

    /**< Pitch for given plane                                              */
    Uns pitch;

    /**< No of Lines for given plane                                        */
    Uns lines;

    /**< 32 byte aligned Frambuffer Pointer                                 */
    Ptr frameBufferPtr;

    /**< Bits per pixel supported                                           */
    Raster_BitsPerPixel bpp;

    /**< To register the TimeStamp                                          */
    Uint32 timeStamp;

    /**< Start Pointer of caption buffer                                    */
    Raster_CaptionBuffer* captionBuff;

    /**< Length of Caption Buffer (captionBuff) (Max count 64B)             */
    Uint32 captionBuffLen;

    /**< Unaligned(Raw) Pointer                                             */
    Ptr rawBuffer;

    /**< Unaligned(Raw) Pointer                                             */
    IOM_Packet *ioPacket;

}Raster_FrameBuffer;

/**
 * \brief RasterSubpanel
 *
 * Raster Subpanel configuration structure
 */
typedef struct Raster_Subpanel {

    /**< Enable or disable raster subpanel                                  */
    Bool enable;

    /**< Position of the subpanel                                           */
    Raster_SubpanelPos position;

    /**< Lines per pixel threshold of subpanel                              */
    Uint32 lPPT;

    /**< Default data for the subpanel                                      */
    Uint32 defaultData;

}Raster_Subpanel;

/**
 * \brief RasterTiming2
 *
 * Raster Timing 2 configuration structure
 */
typedef struct Raster_Timing2 {

    /**< Whether LCD_AC signal is activeHIGH or activeLOW                   */
    Bool iAcbias;

    /**< If data is on rising edge of LCD_PCLK then LCD_HSYNC,
         LCD_VSYNC and LCD_AC are on falling edge and vice-versa          */
    Bool iPclk;

    /**< Whether LCD_HSYNC signal is activeHIGH or activeLOW                */
    Bool iLclk;

    /**< Whether LCD_VSYNC signal is activeHIGH or activeLOW                */
    Bool iFclk;

    /**< Enable or disable this to use or not use syncEdge                  */
    Bool syncCtrl;

    /**< Whether HSYNC and VSYNC are on rising or falling edge and depends
       on syncCtrl                                                        */
    Raster_SyncEdge syncEdge;

    /**< How many time the AC_BIAS should toggle before it results in an
       interrupt to the CPU                                               */
    Uint32 acBiasInt;

    /**< Number of line clock cycles to count before transitioning          *
     * the signal LCD_AC                                                  */
    Uint32 acBiasFreq;

}Raster_Timing2;

/**
 * \brief RasterConf
 *
 * This structure contains the configuration for the raster controller
 */
typedef struct Raster_RasterConf {

    /**< Information like STN, TFT and the BPP                              */
    Raster_Output outputFormat;

    /**< Interface type of the channel                                      */
    Raster_Intface intface;

    /**< Type of the panel connected to the channel                         */
    Raster_Panel panel;

    /**< Type of the display to be configured                               */
    Raster_Display display;

    /**< Bits per one pixel of image data                                   */
    Raster_FbBitsPerPixel bitsPP;

    /**< What fb contains; palette or data or palette+data                  */
    Raster_FBContent fbContent;

    /**< Whether order is from least to most or reverse                     */
    Raster_DataOrder dataOrder;

    /**< Whether Nibble mode is selected or not                             */
    Bool nibbleMode;

    /**< Raster subpanel configurations                                     */
    Raster_Subpanel subPanel;

    /**< Raster timing2 configurations                                      */
    Raster_Timing2 timing2;

    /**< Fifo dma delay in terms of PCLK                                    */
    Uint32 fifoDmaDelay;

    /**< Lists the Interrupts Enabled                                       */
    Uint32 intMask;

    /**< Horizontal front porch                                             */
    Uint32 hFP;

    /**< Horizontal back porch                                              */
    Uint32 hBP;

    /**< Horizontal sync pulse width                                        */
    Uint32 hSPW;

    /**< Pixels per line                                                    */
    Uint32 pPL;

    /**< Vertical front porch                                              */
    Uint32 vFP;

    /**< Vertical back porch                                                */
    Uint32 vBP;

    /**< Vertical sync pulse width                                          */
    Uint32 vSPW;

    /**< Lines per panel                                                    */
    Uint32 lPP;

}Raster_RasterConf;

/**
 *  \brief  Lcdc IOCTL commands
 *
 *  Lcdc IOCTL commands
 */
typedef enum Raster_IOCTL {

    /**< Undefined. To be used only by driver                                 */
    Raster_IOCTL_UNDEFINED = 128,

    /**< Get device configuration, cmdArgs = Raster_DeviceConf *                */
    Raster_IOCTL_GET_DEVICE_CONF,

    /**< Get raster configuration, cmdArgs = Raster_RasterConf *                */
    Raster_IOCTL_GET_RASTER_CONF,

    /**< Get raster subpanel configuration, cmdArgs = Raster_Subpanel *   */
    Raster_IOCTL_GET_RASTER_SUBPANEL_CONF,

    /**< Enable the subpanel feature, cmdArgs = Void *                        */
    Raster_IOCTL_SET_RASTER_SUBPANEL_EN,

    /**< Set the position of the subpanel.  Subpanel has to be enabled first,
         cmdArgs = Void *       */
    Raster_IOCTL_SET_RASTER_SUBPANEL_POS,

    /**< Sets Lines Per Pixel Threshold.Subpanel has to be enabled first
         cmdArgs = Void *       */
    Raster_IOCTL_SET_RASTER_SUBPANEL_LPPT,

    /**< Sets the data values for Subpanel. Subpanel has to be enabled first
         cmdArgs = Void *       */
    Raster_IOCTL_SET_RASTER_SUBPANEL_DATA,

    /**< Get DMA configuration, cmdArgs = Raster_DmaConfig *                    */
    Raster_IOCTL_GET_DMA_CONF,

    /**< Set dma frame buffer mode, cmdArgs = Void *                          */
    Raster_IOCTL_SET_DMA_FB_MODE,

    /**< Set dma burst size, cmdArgs = Void *                                 */
    Raster_IOCTL_SET_DMA_BURST_SIZE,

    /**< Set dma end-of-interrupt, cmdArgs = Void *                           */
    Raster_IOCTL_SET_DMA_EOF_INT,

    /**< Add event notification, cmdArgs = Uint32 *                           */
    Raster_IOCTL_ADD_RASTER_EVENT,

    /**< Remove event notification, cmdArgs = Uint32 *                        */
    Raster_IOCTL_REM_RASTER_EVENT,

    /**< Get event counters, cmdArgs = Raster_EventStat *                       */
    Raster_IOCTL_GET_EVENT_STAT,

    /**< Clear all event status counters, cmdArgs not used                    */
    Raster_IOCTL_CLEAR_EVENT_STAT,

    /**< Enable raster controller, cmdArgs not used                           */
    Raster_IOCTL_RASTER_ENABLE,

    /**< Disable raster controller, cmdArgs not used                          */
    Raster_IOCTL_RASTER_DISABLE,

    /**< Get device version, cmdArgs = Uint32 *                               */
    Raster_IOCTL_GET_DEVICE_VERSION,

    /**< Allocate a frame buffer for the application,
         cmdArgs = Raster_FrameBuffer *     */
    Raster_IOCTL_ALLOC_FB,

    /**< Free a previously allocated frame buffer, 
         cmdArgs = Raster_FrameBuffer *     */
    Raster_IOCTL_FREE_FB

}Raster_IOCTL;

/* -------- per-instance configs -------- */

/**
 *  \brief Lcdc parameters
 *
 *  Structure used to configure a Lcdc driver instance.
 */
typedef struct Raster_Params {

    /* device configuration parameters */
    Raster_DeviceConf devConf;

}Raster_Params;


extern const Raster_Params RasterDefault_PARAMS;

/**
 *  \brief Lcdc IOM_Fxns table
 *
 *  Driver function table to be used by applications. 
 */
extern const IOM_Fxns Raster_IOMFXNS;

/**
 * \brief    Initializes Lcdc instances which are statically allocated
 *
 * This function needs to be called at part of BIOS initialization by
 * setting initFxn for that particular UDEV instance or by calling this
 * function as part of user specific initFxn.
 */
Void Raster_init(Void);

#ifdef __cplusplus
}
#endif /* extern "C" */

#endif /* Raster_H_ */

