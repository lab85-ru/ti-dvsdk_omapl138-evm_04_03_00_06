.bd B 3
.TH cl6x 1 "Mar 24, 2010" "TI Tools" "TI Code Generation Tools"
.SH NAME
cl6x - Compiler
.SH SYNOPSIS
.B cl6x
[
.I options
] [
.I file(s)
]
.SH DESCRIPTION
The compiler is an optimizing C/C++ compiler that accepts C++ as well as American National Standards Institute (ANSI) standard C source code and produces target specific object code.  This compiler builds object code directly from your C++ program source.  There is no intermediate C version of the program.

The 
.B Optimizing C Compiler User's Guide
discusses the characteristics and limitations of this C/C++ compiler, as well as the languages, features and keywords supported.
.SH OPTIONS
The following options are accepted by this tool:
.SS General Options:
.SS
.TP
-@=filename
Read additional compile options the specified filename.
.TP
-c
Disable linking, overriding -z (if used).
.TP
--compiler_revision
Print out the compiler release revision and exit.
.TP
-D=NAME[=value]
Pre-define a symbol with the id 'NAME', optionally setting it's contents to 'value'.
.TP
--fp_reassoc=off,on
Set to on to allow reassociation of floating point arithmetic even in cases where the reassociation will result in a slightly different answer. (Default:on)
.TP
-gpp
Enable power profiling support by inserting NOPs into the frame code.  These NOPs can then be instrumented by the power profiling tooling to track power usage of functions.  If the power profiling tool is not used, this option will increase the cycle count of each function because of the NOPs.  This switch also disables optimizations that cannot be handled by the power-profiler.
.TP
-h
Show usage information.  When followed by another option or a phrase display that option's detailed information, or search for options related to that phrase.
.TP
-I=dir
Add the specified dir(ectory) to the #include file search path list.
.TP
-k
Keep the generated assembly language (.asm) file
.TP
-mk
Generate compiler consultant information
.TP
-n
Compile only; do not assemble
.TP
--no_const_clink
Do not generate .clink directives for const global arrays.  By default these arrays are placed in a .const subsection and conditionally linked.
.TP
--profile:breakpt
Disable optimizations that cannot be handled by a breakpoint-based profiler
.TP
-q
Suppress common compiler non-diagnostic output.  Remarks, errors and warnings will still be generated, as well as feature specific status.
.TP
-qq
Suppress all compiler non-diagnostic output.  Remarks, errors and warnings will still be generated.
.TP
-s
Generate interlisted assembly file
.TP
--sat_reassoc=off,on
Set to on to allow reassociation of saturating arithmetic even in cases where the reassociation will cause saturation to occur differently. (Default:off)
.TP
-ss
Generate C source interlisted assembly file
.TP
--tool_versions
Print version numbers for each tool [Same as -version, -versions]
.TP
-U=NAME
Undefine the symbol with the id 'NAME'.
.TP
--verbose
Display progress information and toolset version when executing.
.TP
-version
Print version numbers for each tool [Same as -versions, --tool_versions]
.TP
-versions
Print version numbers for each tool [Same as -version, --tool_versions]
.TP
-z[=arguments]
After compiling all the source files, perform a link and pass all the options following this option to the linker.
.SS Symbolic Debug Options:
.SS
.TP
-g
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -gw]
.TP
-gp
Adds the necessary debug directives to the object file which are needed by the profiler to allow function level profiling with minimal impact on optimization (if optimization is enabled). Using -g may hinder some optimizations to ensure that debuggability is maintained, while this option will not hinder optimization.

You will still be able to set breakpoints and profile on function-level boundaries, but you will not be able to single-step through code as with full debug ability.
.TP
-gt
Enable full symbolic COFF debugging in the generated object or out file (DEPRECATED).
.TP
-gw
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -g]
.TP
--machine_regs
When compiling linear assembly, register operands can be displayed in the assembly file as either machine registers or symbolic registers.  Symbolic registers is the default. Use this option to display machine registers in the assembly file when compiling linear assembly.  When compiling C/C++ machine registers are the default.
.TP
--symdebug:none
Disable debug and suppress all symbolic debug information from being included in the generated object or out file.
.TP
--symdebug:skeletal
Enable symbolic debug information for program analysis. (default)
.SS Parser Options:
.SS
.TP
--exceptions
Enable C++ exception handling
.TP
--fp_mode=relaxed,strict
Specify a floating point mode. In relaxed mode if the result of a double-precision floating point expression is assigned to a single-precision floating-point or an integer, the computations in the expression are converted to single-precision computations. Any double-precision constants in the expression are also converted to single-precision if they will fit. Floating point arithmetic reassociation is also allowed.  This behavior is not ISO conformant, but results in faster/smaller code, with some loss in accuracy. (Default:strict)
.TP
-pc
Enable multibyte character support in the parser.
.TP
-pe
Enable support for embedded C++
.TP
-pi
Ignore the inline keyword while parsing.
.TP
-pk
Enable K & R C compatibility.
.TP
-pl
Output raw listing to .rl file
.TP
-pm
Enable program mode compilation.
.TP
-pn
Disable intrinsic functions in the parser.
.TP
-pr
Enable relaxed ANSI source parsing mode.
.TP
-ps
Enable strict ANSI source parsing mode.  Any source violating strict ANSI guidelines will generate a parsing error.
.TP
-px
Output xref listing to .crl file
.TP
-rtti
Support C++ run-time type information
.TP
--static_template_instantiation
All template entities are instantiated as needed in the file.  The instantiations are given internal (static) linkage.
.SS Parser Preprocessing Options:
.SS
.TP
-ppa
This option instructs the compiler to additionally continue compilation of the source file (rather than exiting) after generating a pre-processing .pp output file such as those generated by -ppd (dependencies) -ppi (included files), or -ppm (macros).
.TP
-ppc
Only preprocess the source file(s) and then stop; maintain source comments in the output.
.TP
-ppd[=filename]
Generate a dependency list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include all files included in the source file as well as any of the files included.  Also see the -ppa option to continue compilation after generating the dependency list (similar to gcc).
.TP
-ppi[=filename]
Generate an include list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the include list (similar to gcc).
.TP
-ppl
Only preprocess the source file(s) and then stop; maintain #line directives in the output..
.TP
-ppm[=filename]
Generate a list of predefined and user defined macros for the source file into the file <filename>.pp and then exit.  Optionally, name the output file. The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the macro list (similar to gcc).
.TP
-ppo
Only preprocess the source file(s) and then stop.
.SS Parser Diagnostics Options:
.SS
.TP
-pdel=count
Set error limit to <count>
.TP
-pden
Emit the diagnostic identifier numbers along with diagnostic messages.  These identifiers can be used with options such as -pds to suppress a specific diagnostic.
.TP
-pdf
Write diagnostics to an .err file instead of the standard output.  The file name with be the same as the source file but with an .err extension.
.TP
-pdr
Issue remarks, which are normally supressed.
.TP
-pds=id
Suppress diagnostic <id>
.TP
-pdse=id
Treat diagnostic <id> as error
.TP
-pdsr=id
Treat diagnostic <id> as remark
.TP
-pdsw=id
Treat diagnostic <id> as warning
.TP
-pdv
Enable verbose diagnostic information from the parser, including the source line of the error and an indicator of the error position within the line.
.TP
-pdw
Suppress all parser warnings.
.SS Runtime Model Options:
.SS
.TP
--gcc
This option enables the support for GCC extensions
.TP
-mb
Enable 62xx compatibility
.TP
-mc
Do not reorder floating point operations
.TP
-me
Generate big endian code
.TP
--mem_model:const=data,far,far_aggregates
Const access model (Default:data)
.TP
--mem_model:data=far,far_aggregates,near
Data access model (Default:far_aggregates)
.TP
-mf[=0-5]
Optimize for speed (Default:4)
.TP
-mh[=#]
Specify speculative load byte count threshold
.TP
-mi[=#]
Specify maximum cycles that interrupts may be disabled
.TP
-mn
Optimize fully in the presence of debug directives
.TP
-mo
Place each function in a separate subsection
.TP
-ms[=0-3]
Optimize for code size (Default:0)
.TP
-mt
Assume no irregular alias or loop behavior
.TP
-mu
Disable software pipelining
.TP
-mv=id
Target processor version (Default:6200)
.TP
-mw
Generate verbose software pipelining information
.TP
--no_compress
This option disables compression (use of 16-bit instructions) for 6400+.  It also tells the assembler to (1) prevent labeled execute packets from spanning fetch packet boundaries, (2) pad the end of code sections to 32-byte boundaries, and (3) handle .align directives. Normally for 6400+, these are the responsibilities of the compressor (cmp6x).
.TP
--no_reload_errors
Accept loop buffer assembly code that would normally cause the assembler to issue loop buffer reload-related errors.
.TP
-ox
Treats pointer-to-const as an indication that no other store within the pointer's scope will affect the pointer's target.
.TP
--preinclude=filename
Include the source code of the indicated file at the beginning of the compilation. This can be used to establish standard macro definitions, etc. The file name is searched for in the directories on the include search list. The files are processed in the order in which they were specified.
.TP
--speculate_unknown_loads
Speculate loads with unbounded address ranges
.SS Optimizations Options:
.SS
.TP
-ma
Assume called funcs create hidden aliases (rare)
.TP
-oi[=size]
Specify threshold for automatic inlining
.TP
-on=0-2
Set the optimizer information file level, or disable with 0. Level 1 includes basic information.  Level 2 includes detailed information.  The file will be created in the assembly directory if a custom asm directory is specified on the command line otherwise it will be created in the object file directory.
.TP
-op=0-3
Specify assumptions to make about function calls when optimizing.

Level 0 (-op0) indicates that the module has functions that are called from other modules.

Level 1 (-op1) indicates that the module does not have functions that are called by other modules but has global variables that are modified in other modules.

Level 2 (-op2) indicates that the module does not have functions that are called or globals that are modified by other modules.

Level 3 (-op3) indicates that the module has functions that are called by other modules but does not have globals that are modified by other modules.
.TP
-os
Generate optimized source interlisted assembly file
.TP
-O[=0-3]
Set compiler optimization level.

Level 0 includes register optimizations.  Level 1 adds local optimizations. Level 2 further adds global optimizations. Level 3 further adds interprocedure optimizations.

Using -O without arguments defaults to -O2. (Default:2)
.TP
--remove_hooks_when_inlining
Remove entry/exit hooks from inlined function bodies
.TP
--single_inline
Inline function that are called only once.  Will inline these functions even if auto inlining has been turned off (-oi0)
.SS Entry/Exit Hook Options:
.SS
.TP
--entry_hook[=hook_function_name]
Insert this call at entry to each function (Default:__entry_hook)
.TP
--entry_parm=address,name,none
Pass caller's name or address to entry hook
.TP
--exit_hook[=hook_function_name]
Insert this call at exit from each function (Default:__exit_hook)
.TP
--exit_parm=address,name,none
Pass caller's name or address to exit hook
.SS Feedback Options:
.SS
.TP
--codecov
Generate code-coverage from profile feedback
.TP
--gen_profile_info
Generate profile feedback data
.TP
--onlycodecov
Generate code-coverage from profile feedback and stop
.TP
--use_profile_info[=filelist]
Use profile feedback file(s)
.SS Library Function Assumptions Options:
.SS
.TP
-ol0
File redefines an RTS library function.
.TP
-ol1
File contains an RTS library function.
.TP
-ol2
File does not define any RTS library func (def.)
.SS Assembler Options:
.SS
.TP
-aa
Generate absolute listing file
.TP
-ac
Symbol names are not case-significant
.TP
-ad=NAME[=value]
Pre-define the assembly symbol NAME, optionally setting its contents to 'value'.
.TP
-ahc=filename
Simulate source '.copy filename'
.TP
-ahi=filename
Simulate source '.include filename'
.TP
-al
Generate listing file
.TP
-apd
Generate assembly dependency information
.TP
-api
Generate first-level assembly include file list
.TP
-as
Keep local symbols in output file
.TP
-au=NAME
Undefine assembly symbol NAME
.TP
-ax
Generate cross reference file
.SS File Type Specifier Options:
.SS
.TP
-fa=filename
File is an assembly file (default for .asm)
.TP
-fc=filename
File is a C file (default for .c/no ext)
.TP
-fl=filename
File is a linear asm file (default for .sa)
.TP
-fo=filename
File is an object file (default for .obj)
.TP
-fp=filename
File is a C++ file (default for .C .cpp .cc)
.SS Directory Specifier Options:
.SS
.TP
-fb=dir
Absolute listing directory (default is .obj dir)
.TP
-ff=dir
Listing/xref file directory (default is .obj dir)
.TP
-fr=dir
Object file directory (default is .)
.TP
-fs=dir
Assembly file directory (default is .)
.TP
-ft=dir
Temporary file directory (default is .)
.SS Default File Extensions Options:
.SS
.TP
-ea=.ext
Extension for assembly files (default is .asm)
.TP
-ec=.ext
Extension for C files (default is .c)
.TP
-el=.ext
Extension for linear asm files (default is .sa)
.TP
-eo=.ext
Extension for object files (default is .obj)
.TP
-ep=.ext
Extension for C++ files (default is .cpp)
.TP
-es=.ext
Extension for listing files (default is .lst)
.TP
-fg
Treat C files as C++ files
.SH EXIT STATUS
The following error values are returned:
.PD 0
.TP 10
.B 0
Successful completion.
.TP
.B >0
Unsuccessful completion; an error occured.
.PD
.SH COPYRIGHT
.TP
Copyright (c) 2010, Texas Instruments, Inc.
