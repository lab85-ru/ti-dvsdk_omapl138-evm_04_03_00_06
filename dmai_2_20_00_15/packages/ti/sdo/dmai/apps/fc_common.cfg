/* --COPYRIGHT--,BSD
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

/*
 * This file defines a common configuration for the modules from Framework 
 * Components
 */

if ( (prog.platformName == "ti.platforms.evmDM6446") 
    || (prog.platformName == "ti.platforms.evmDM6437") ){
	/* Configure DSKT2 module */
	var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
	DSKT2.DARAM0     = "L1DHEAP";
	DSKT2.DARAM1     = "L1DHEAP";
	DSKT2.DARAM2     = "L1DHEAP";
	DSKT2.SARAM0     = "L1DHEAP";
	DSKT2.SARAM1     = "L1DHEAP";
	DSKT2.SARAM2     = "L1DHEAP";
	DSKT2.ESDATA     = "DDR2";
	DSKT2.IPROG      = "L1DHEAP";
	DSKT2.EPROG      = "DDR2";
	DSKT2.DSKT2_HEAP = "DDR2";    /* to allocate internal DSKT2 object */
	
	/* Configure DMAN3 module */
	var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
	
	DMAN3.heapInternal    = "L1DHEAP";
	DMAN3.heapExternal    = "DDR2";
	DMAN3.idma3Internal   = false;
	DMAN3.scratchAllocFxn = "DSKT2_allocScratch";
	DMAN3.scratchFreeFxn  = "DSKT2_freeScratch";
	
	/*  Next, we configure all the physical resources that DMAN3 is granted
	 *  exclusively. These settings are optimized for the DSP on DM6446 
	 *  (DaVinci).
	 *
	 *  We assume PaRams 0..79 are taken by the Arm drivers, so we reserve
	 *  all the rest, up to 127 (there are 128 PaRam sets on DM6446).
	 *  DMAN3 takes TCC's 32 through 63 (hence the High TCC mask is 0xFFFFFFFF
	 *  and the Low TCC mask is 0). Of the 48 PaRams we reserved, we assign
	 *  all of them to scratch group 0; similarly, of the 32 TCCs we reserved,
	 *  we assign all of them to scratch group 0.
	 *
	 *  If we had more scratch groups with algorithms that require EDMA, we 
	 *  would split those 48 PaRams and 32 TCCs appropriately. For example, if 
	 *  we had a video encoder alg. in group 0 and video decoder alg. in group 
	 *  1, and they both needed a number of EDMA channels, we could assing 24 
	 *  PaRams and 16 TCCs to Groups [0] and [1] each. (Assuming both 
	 *  algorithms needed no more than 24 channels to run properly.)
	 */
	DMAN3.paRamBaseIndex     = 80; // 1st EDMA3 PaRAM set available for DMAN3
	DMAN3.numQdmaChannels    = 8;  // number of device's QDMA channels to use
	DMAN3.qdmaChannels       = [0,1,2,3,4,5,6,7]; // QDMA channels to use
	DMAN3.numPaRamEntries    = 48; // # of PaRAM sets exclusively used by DMAN
	DMAN3.numPaRamGroup[0]   = 48; // # of PaRAM sets for scratch group 0
	DMAN3.numTccGroup[0]     = 32; // # of TCCs assigned to scratch group 0
	DMAN3.tccAllocationMaskL = 0;  // bitmask indicating which TCCs 0..31 to use
	DMAN3.tccAllocationMaskH = 0xffffffff; // assign all TCCs 32..63 for DMAN
	
	/* Uncomment these lines if you wish to debug FC and enable FC trace */
    /* DSKT2.trace = true;
    DSKT2.debug = true; 
    DMAN3.debug = true;
    DMAN3.trace = true;    */
    
}
else if (prog.platformName == "ti.platforms.evmDM6467") {
	/*
	 *  ======== DSKT2 and RMAN Configuration ========
	 *  XDAIS Algorithm Memory and DMA allocation
	 */
    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "IRAM";
    DSKT2.DARAM1     = "IRAM";
    DSKT2.DARAM2     = "IRAM";
    DSKT2.SARAM0     = "IRAM";
    DSKT2.SARAM1     = "IRAM";
    DSKT2.SARAM2     = "IRAM";
    DSKT2.ESDATA     = "DDR2";
    DSKT2.IPROG      = "IRAM";
    DSKT2.EPROG      = "DDR2";
    DSKT2.DSKT2_HEAP = "DDR2";    /* to allocate internal DSKT2 object */
       
    DSKT2.DARAM_SCRATCH_SIZES = [ 32768, 0, 0,0,0,0,0, /* ... */ 0 ];
    DSKT2.SARAM_SCRATCH_SIZES = [ 32768, 0, 0,0,0,0,0, /* ... */ 0 ];

    var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2 = true;
    RMAN.tableSize = 10;
    RMAN.semCreateFxn = "Sem_create";
    RMAN.semDeleteFxn = "Sem_delete";
    RMAN.semPendFxn = "Sem_pend";
    RMAN.semPostFxn = "Sem_post";

    var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');
    EDMA3.maxPaRams[0] = 384;
    EDMA3.maxTccs[0] = 26;
    EDMA3.maxEdmaChannels[0] = 26;
    EDMA3.maxQdmaChannels[0] = 2;

    var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');

    var HDVICP =  xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');
    
    var HDINTC = xdc.useModule('ti.sdo.fc.hdintc.HDINTC');
    HDINTC.interruptVectorId_0 = 10;
    HDINTC.interruptVectorId_1 = 11;
    HDINTC.hdvicpInterruptEventNo_0 = 29;
    HDINTC.hdvicpInterruptEventNo_1 = 39;
    
    /* Uncomment these lines if you wish to debug FC and enable FC trace */
/*    DSKT2.trace = true;
    DSKT2.debug = true; 
    RMAN.debug = true;
    RMAN.trace = true;  
    EDMA3.trace = true;
    EDMA3.debug = true;
    EDMA3CHAN.debug = true;
    EDMA3CHAN.trace = true;
	HDVICP.debug = true;
    HDVICP.trace = true;   */
}
else if (prog.platformName == "ti.platforms.evmDM355") {

    /* Configure RMAN */ 
    var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "__ALG_allocMemory";
    RMAN.persistentFreeFxn = "__ALG_freeMemory";
    RMAN.semCreateFxn = "Sem_create";
    RMAN.semDeleteFxn = "Sem_delete";
    RMAN.semPendFxn = "Sem_pend";
    RMAN.semPostFxn = "Sem_post";
    RMAN.tableSize = 10;

    var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');

    var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');

    var EDMA = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');

    var VICPLU = xdc.useModule('ti.sdo.linuxutils.vicp.VICP');

    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');

    var VICPSYNC = xdc.useModule('ti.sdo.fc.vicpsync.VICPSYNC');

    var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');

    var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');
} 
else if (prog.platformName == "ti.platforms.evmDM365") {
  
    /* Configure RMAN */ 
    var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "__ALG_allocMemory";
    RMAN.persistentFreeFxn = "__ALG_freeMemory";
    RMAN.semCreateFxn = "Sem_create";
    RMAN.semDeleteFxn = "Sem_delete";
    RMAN.semPendFxn = "Sem_pend";
    RMAN.semPostFxn = "Sem_post";
    RMAN.tableSize = 10;

    var VICPSYNC = xdc.useModule('ti.sdo.fc.vicpsync.VICPSYNC');

    var HDVICPSYNC = xdc.useModule('ti.sdo.fc.hdvicpsync.HDVICPSYNC');

    var MEMUTILS = xdc.useModule('ti.sdo.fc.memutils.MEMUTILS');

    var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');

    var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');

    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');

    var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');

    var EDMA = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');

    var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');

    var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');

    /* Uncomment these lines if you wish to debug FC and enable FC trace */
    /* 
    RMAN.trace = true;
    RMAN.debug = true;
    VICPSYNC.debug = true;
    HDVICPSYNC.debug = true; 
    HDVICPSYNC.trace = true; 
    EDMA3.trace = true;
    EDMA3.debug = true;
    HDVICP.trace = true;
    HDVICP.debug = true;
    EDMA.trace = true;
    EDMA.debug = true;
    VICP.debug = true;
    EDMA3CHAN.trace = true;
    EDMA3CHAN.debug = true;
    LSP.debug = true;
    */
}
else if (prog.platformName == "ti.platforms.evm3530") {
    /* Add SDMA and SCPY support for Framecopy */
    var SDMA = xdc.useModule('ti.sdo.linuxutils.sdma.SDMA');
    var SCPY = xdc.useModule('ti.sdo.fc.scpy.SCPY');
} else {
    print("*** Error: *** Unknown platform " + prog.platformName);
}
