/* --COPYRIGHT--,BSD
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

/*
 * This function tries to create an Engine from a Codec Server. If the Codec
 * Server is not found, the configuration step does not fail. Instead the
 * configuration continues without creating the Engine, and if the
 * application calls Engine_open() on the string 'engineName' it will fail.
 * Since the DMAI reference application lets you specify the 'engineName' using
 * the -e flag (on Linux), it's up to the user to know which engines were
 * successfully created.
 *
 * This is used to build against and test Codec Servers which are not part of
 * the DVSDK, without depending on these servers to be able to build the
 * applications.
 */
function tryEngineCreate(engineName, serverImagePath, serverPkgName) {
    try {
        var myEngine = Engine.createFromServer(engineName,
                                               serverImagePath,
                                               serverPkgName);
    }
    catch (e) {
         print("\n      Failed to create engine \"" + engineName +
               "\" since \"" + serverPkgName +
               "\" could not be found in the XDC_PATH, continuing build..\n");
    }
}

/* Load support for the Codec Engine OS Abstraction Layer */
var osalGlobal = xdc.useModule( 'ti.sdo.ce.osal.Global' );

if (prog.build.target.isa == "v5t" || prog.build.target.isa == "v5T") {
    if (prog.platformName == "ti.platforms.evmDM355") {
        /* Configure the OSAL to use it's Linux version */
        osalGlobal.runtimeEnv = osalGlobal.LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmDM365") {
        /* Configure the OSAL to use it's Linux version */
        osalGlobal.runtimeEnv = osalGlobal.LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmDM6446") {
        /* Configure the OSAL to use it's DSP Link Linux version */
        osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmOMAPL137") {
        /* Configure the OSAL to use it's DSP Link Linux version */
        osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmOMAPL138") {
        /* Configure the OSAL to use it's DSP Link Linux version */
        osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmDM357") {
        /* Configure the OSAL to use it's DSP Link Linux version */
        osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    }
    else if (prog.platformName == "ti.platforms.evmDM6467") {
        var os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');
        osalGlobal.os = os;

        /* Configure CE to use it's DSP Link Linux version */
        var ipc = xdc.useModule('ti.sdo.ce.ipc.Settings');
        ipc.commType = ipc.COMM_DSPLINK;
    }
    else if (prog.platformName == "ti.platforms.evm3530") {
        /* Load the Codec Engine 'Operating System Abstraction Layer' */
        var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
        osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    }
    else {
        print("*** Error: *** Unknown platform name " + prog.platformName);
    }

    /* WinCE not suported for this isa */
    if (Program.build.target.os == "WindowsCE") {
        print("*** Error: *** Unsupported target OS " +
              Program.build.target.os + " for isa "   +
              prog.build.target.isa);
    }
}
else if (prog.build.target.isa == "64P") {
    /* Configure CE to use it's DSP/BIOS version */
    osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;

    osalGlobal.defaultMemSegId = "DDR2";
}
else if (prog.build.target.isa == "v4T") {
    if (prog.platformName == "ti.platforms.evm3530") {
        if (Program.build.target.os == "WindowsCE") {
            osalGlobal.runtimeEnv = osalGlobal.DSPLINK_WINCE;
        }
        else {
            print("*** Error: *** Unsupported target OS " +
                  Program.build.target.os + " for isa "   +
                  prog.build.target.isa);
        }
    }
    else {
        print("*** Error: *** Unknown platform name " + prog.platformName);
    }
}
else {
    print("*** Error: *** Unknown isa " + prog.build.target.isa);
}

/* Load support for the DMAI module */
var DMAI = xdc.loadPackage('ti.sdo.dmai');
