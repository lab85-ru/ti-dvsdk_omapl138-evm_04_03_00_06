/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======= package.bld =======
 */

var Pkg = xdc.useModule('xdc.bld.PackageContents');

Pkg.attrs.exportSrc = true;

var srcFilesLinux = ["memutils_cmem"];      // CMEM based implementation
var srcFilesBios = ["memutils_bios"];       // BIOS based implementation
var srcFilesWinCE = ["memutils_std"];     // Windows CE based implementation

Pkg.otherFiles = [
    "memutils.h",
    "package.bld"
];

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];

//    print("Building for target:  " + targ.suffix + "\n");

    /* Build std lib for all targets */
    Pkg.addLibrary("lib/release/memutils_std", targ, {
        profile: "release",
    }).addObjects(["memutils_std"]);

    Pkg.addLibrary("lib/debug/memutils_std", targ, {
        profile: "debug",
    }).addObjects(["memutils_std"]);

    Pkg.addLibrary("lib/trace/memutils_std", targ, {
        profile: "trace",
    }).addObjects(["memutils_std"]);

    Pkg.addLibrary("lib/debug_trace/memutils_std", targ, {
        profile: "debug_trace",
    }).addObjects(["memutils_std"]);


    if ((targ.suffix == "64P") || (targ.suffix == "674")) {
//        print("Found BIOS implementation");

        /* also build a BIOS-based implementation */
        var srcs = srcFilesBios;
    }
//    else if (targ.suffix == "86U") {
//        var srcs = srcFilesStd;
//    }
    else if ((targ.os == "Linux") && (targ.suffix != "86U")) {
//        print("Found Linux/CMEM implementation");
        /* also build a Linux-CMEM-based implementation */
        var srcs = srcFilesLinux;
    }
    else if (targ.os == "WindowsCE") {
        var srcs = srcFilesWinCE;
    }
    else {
//        print("Skipping");
        srcs = undefined;
    }

    if (srcs != undefined) {
//        print("More libs...");
        Pkg.addLibrary("lib/release/memutils", targ, {
            profile: "release",
        }).addObjects(srcs);

        Pkg.addLibrary("lib/debug/memutils", targ, {
            profile: "debug",
        }).addObjects(srcs);

        Pkg.addLibrary("lib/trace/memutils", targ, {
            profile: "trace",
        }).addObjects(srcs);

        Pkg.addLibrary("lib/debug_trace/memutils" , targ, {
            profile: "debug_trace",
        }).addObjects(srcs);
    }
}
/*
 *  @(#) ti.sdo.fc.memutils; 1, 0, 0,121; 12-1-2010 17:25:29; /db/atree/library/trees/fc/fc-p01x/src/ xlibrary

 */

