/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/*
 *  ======== package.bld ========
 *  Build script for RMAN Memory Resource example.
 *
 */

// explicit references to global objects
var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');
Pkg.attrs.exportAll = true;

//Pkg.attrs.profile = "debug";
Pkg.attrs.profile = "debug_trace";

var buildPlatforms = {
    Linux86: ["PC"],
};

/*
 * Executables for all platforms
 * To add a new program, just create a new element in the progs array and
 * set it equal to an array listing the objects the program requires.
 *
 * The output will have the name "<element>_tiomapxxxx.<ext>" or
 * "<element>_<platform>.<ext>" , and for BIOS based apps there
 * must be a tconf script describing the programs configuration with the
 * name <element>.tcf.
 */
var commonProgs = [
// /*
    {
        name:   "shmbuf_test0",
        sources: [
            "shmbuf_test0", "shmbuf_util",
            ],
        cfg: "test",
    },
    {
        name:   "shmbuf_test1",
        sources: [
            "shmbuf_test1", "shmbuf_util",
            ],
        cfg: "test",
    },
];

/* Specifies which programs run on which platforms */
var platProgs = {
    "PC"     : commonProgs,
};

var realPlatformName = {
    "PC"     : "host.platforms.PC",
};

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];
    var plat = targ.platform;   /* use the target's default platform */

    if (buildPlatforms[targ.name] == null) {
        continue;
    }
    print("building for target " + targ.name + " ...");

    // for each build platform (eg, 2430,...)
    for (k = 0; k < buildPlatforms[targ.name].length; k++) {
        var chipType = buildPlatforms[targ.name][k]; // eg, "2430"
        var progs = platProgs[chipType];  // eg, programs2430
        
        /* Process platform's executables */
        for (j = 0; j < progs.length; j++) {
            var prog = progs[j];
            print("adding " + prog.name + " (" + chipType + ") flavor...");
            var outDir = "bin/" + chipType + "/";

            // add executable

            /*
             *  This is not a BIOS program, so there is no tcf file.
             *  Instead use .xdt file that will have the linker include
             *  paths to search for dman3, acpy3, and rts libraries.
             */
            var exe = Pkg.addExecutable(outDir + prog.name, targ,
                    realPlatformName[chipType], {
                    copts: " -g ",
                    //defs: " -DGT_ASSERT=1 -DGT_TRACE=1 ",
                    cfgScript: prog.cfg + ".cfg",
                    cfgArgs: "{chipType: \"" + chipType + "\"}",
//                    releases : [srcRelease, bldRelease],
            });

            // Add -pdr for remarks and -pdn to gen numeric remark IDs.
            // (Note, we don't add it to the .addExecutable call above b/c
            // the RTSC generated sources are noisy with -pdr.
            exe.addObjects( prog.sources );
        }
    }
}
/*
 *  @(#) ti.sdo.fc.rman.examples.shmbuf; 1, 0, 0,119; 12-1-2010 17:25:54; /db/atree/library/trees/fc/fc-p01x/src/ xlibrary

 */

