/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
 */
/*
 *  ======== bios_TCI6486.tci ========
 *  This file contains BIOS settings for TCI6486.
 *
 */

/*
 *  ======== bios.internal.setupMemoryTCI6486 ========
 *  This function will set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemoryTCI6486 = function (prog)
{
    /*
     *  BIOS MEM segments will be created from object model memory definitions.
     *  Place default code and data sections into specified memory segments.
     */
    bios.initializeMemory(prog, "SL2RAM", "LL2RAM");
    
    var ll2ram = prog.module("MEM").instance("LL2RAM");
    var sl2ram = prog.module("MEM").instance("SL2RAM");

    /* Place code or read-only data into Shared L2 RAM */
    prog.module("MEM").GBLINITSEG = sl2ram;
    prog.module("MEM").SWITCHSEG = sl2ram;
    prog.module("MEM").CINITSEG = sl2ram;
    prog.module("MEM").PINITSEG = sl2ram;
    prog.module("MEM").CONSTSEG = sl2ram;

    /*
     * Place HWI vectors into Local L2 RAM because they are changeable
     * during runtime.
     */
    prog.module("MEM").HWIVECSEG = ll2ram;

    bios.internal.setupCacheTCI6486(prog, ll2ram);
}


/*
 *  ======== bios.internal.setupCacheTCI6486 ========
 *  This function setups up the intial L1P, L1D, and L2 cache base and size.
 */
bios.internal.setupCacheTCI6486 = function (prog, iram)
{
    var cpu = prog.cpu;
    var cache_l1p = prog.module("MEM").instance("CACHE_L1P");
    var l1psram = prog.module("MEM").instance("L1PSRAM");

    cache_l1p.len = 0x0;
    cache_l1p.base = 0x00E00000 + 0x8000;

    if (cpu.registers.l1PMode == undefined || cpu.registers.l1PMode == null ||
    	cpu.registers.l1PMode == "32k") {
	if (l1psram != undefined) {
            l1psram.destroy();	
	}
        cache_l1p.base -= 0x8000;
        cache_l1p.len = 0x8000;	
    }
    else {
    	if (cpu.registers.l1PMode == "0k") {
	    l1psram.len = 0x8000;
	}
        else if (cpu.registers.l1PMode == "4k") {
            l1psram.len = 0x7000;
        }
        else if (cpu.registers.l1PMode == "8k") {
            l1psram.len = 0x6000;
        }
        else if (cpu.registers.l1PMode == "16k") {
            l1psram.len = 0x4000;
        }
        else throw new Error("Can't set L1P cache to size: " +
            cpu.registers.l1PMode);
    }

    var cache_l1d = prog.module("MEM").instance("CACHE_L1D");
    var l1dsram = prog.module("MEM").instance("L1DSRAM");
    cache_l1d.len = 0x0;
    cache_l1d.base = 0x00F00000 + 0x8000;

    if (cpu.registers.l1DMode == undefined || cpu.registers.l1DMode == null ||
    	cpu.registers.l1DMode == "32k") {
	if (l1dsram != undefined) {
            l1dsram.destroy();	
	}
        cache_l1d.base -= 0x8000;
        cache_l1d.len = 0x8000;	
    }
    else {
    	if (cpu.registers.l1DMode == "0k") {
	    l1dsram.len = 0x8000;
	}
        else if (cpu.registers.l1DMode == "4k") {
            l1dsram.len = 0x7000;
        }
        else if (cpu.registers.l1DMode == "8k") {
            l1dsram.len = 0x6000;
        }
        else if (cpu.registers.l1DMode == "16k") {
            l1dsram.len = 0x4000;
        }
        else throw new Error("Can't set L1D cache to size: " +
            cpu.registers.l1DMode);
    }

    var cache = prog.module("MEM").instance("CACHE_L2");

    cache.len  = 0x0;
    cache.base = iram.base + iram.len;

    /*
     * Update IRAM len here but not base because the base will be automatically
     * updated when setting the cache registers in initializeRegisterMap().
     */
    if (cpu.registers.l2Mode != null) {
	if (cpu.registers.l2Mode == "32k") {
	    iram.len = iram.len - 0x8000;
	}
	else if (cpu.registers.l2Mode == "64k") {
	    iram.len = iram.len - 0x10000;
	}
	else if (cpu.registers.l2Mode == "128k") {
	    iram.len = iram.len - 0x20000;
	}
	else if (cpu.registers.l2Mode == "256k") {
	    iram.len = iram.len - 0x40000;
	}
    }
}


/*
 *  ======== bios.initTCI6486 ========
 *  BIOS initialization for the TCI6486
 */
bios.initTCI6486 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
	baseseed = "ti/bios/config/cdb/c6486.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
	try {
	    prog.load(seed);
	}
	catch (e) {
	    throw new Error ("Can't load configuration seed '" + seed + "' : "
		+ e);
	}
    }
    else {
	throw new Error ("Can't find configuration seed: " + baseseed);

    }

    prog.module("CLK").RESETTIMER = true;
    prog.module("GBL").CLKTYPE = 6486;

    /* set CLKOUT to be the value of cpu.clockRate. */
    bios.internal.setClkout(prog);
    
    prog.module("GBL").ENDIANMODE = prog.build.target.model.endian;

    /* initialize the default memory segments for TCI6486 */
    bios.internal.setupMemoryTCI6486(prog);

    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
