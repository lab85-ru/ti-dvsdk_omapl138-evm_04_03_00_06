/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
 */
/*
 *  ======== bios_5510.tci ========
 *  This file contains BIOS settings for c5510.
 *  Note:  all memory addresses in this file are defined in words.
 *
 */

/*
 *  ======== bios.internal.setupMemory5510 ========
 *  This function is the top-level function that will remove all MEM segments
 *  from the cdb file.  It will take your physical memory map from calling
 *  getMemoryMap() and create MEM instances in cdb.
 *  It will then set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemory5510 = function (prog)
{
    /*
     *  BIOS MEM segments will be created from object model memory definitions.
     *  Place default code and data sections into specified memory segments.
     */
    bios.initializeMemory(prog, "SARAM", "DARAM");

    /*
     *  The base and length of DARAM are initialized to values in the
     *  object model. See C5510.tci for details.
     *  The interrupt vectors are placed at the end of physical SARAM.
     */
    var vect = prog.module("MEM").instance("VECT");
    vect.base = 0x27f80;

    /* 
     *  SARAM is split up for better efficiency and also
     *  so that sections placed do no cross a page boundry.
     */
    var saram1 = prog.module("MEM").create("SARAM1");
    saram1.comment =
        "SARAM is split up so the sections do not cross a page boundary";
    saram1.base = 0x8000;
    saram1.len =  0x8000;

    var saram = prog.module("MEM").instance("SARAM");
    saram.base = 0x10000;
    saram.len =  0x10000;

    var saram2 = prog.module("MEM").create("SARAM2");
    saram1.comment =
        "SARAM is split up so the sections do not cross a page boundary";
    saram2.base = 0x20000;
    saram2.len =  0x07f80;

    /*
     *  Place these sections in "SARAM1" since these are initailization
     *  code only.  We want to keep "SARAM" as large as possible for
     *  the runtime code since having code in 1 single page
     *  makes it more efficient to execute.
     */
    prog.module("MEM").GBLINITSEG = saram1
    prog.module("MEM").TRCDATASEG = saram1
    prog.module("MEM").SWITCHSEG =  saram1
    prog.module("MEM").CINITSEG =  saram1
    prog.module("MEM").PINITSEG =  saram1
}

/*
 *  ======== bios.init5510 ========
 *  BIOS initialization for the C5510.
 */
bios.init5510 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
	baseseed = "ti/bios/config/cdb/c55xx.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
	try {
	    prog.load(seed);
	}
	catch (e) {
	    throw new Error ("Can't load configuration seed '" + seed + "' : "
		+ e);
	}
    }
    else {
	throw new Error ("Can't find configuration seed: " + baseseed);
    }

    /* Set CHIPTYPE to cpu.deviceName */
    prog.module("GBL").CHIPTYPE = prog.cpu.deviceName;

    /* set CLKOUT to be the value of cpu.clockRate. */
    bios.internal.setClkout(prog);

    /* set the memory model in GBL based on build options */
    if (prog.build.target.model.dataModel == "huge") {
        throw new Error ("Huge model not supported");
    }
    else {
        prog.module("GBL").MEMORYMODEL = "LARGE";
    }

    /* If the old memory names are used, we call the function that sets up
     * the old external memory names, while the internal names (and some old 
     * ones are retained from the CDB file.
     */
    if (bios.supportOldMemoryNames) {
	bios.internal.oldMemoryNames(prog);
        /* Second Block of SARAM, length = 64K words, default block */
        prog.module("MEM").instance("SARAM").comment =
	    "SARAM split into blocks for instruction cycle efficiency";
	prog.module("MEM").instance("SARAM").base = 0x10000;
	prog.module("MEM").instance("SARAM").len = 0x10000;

	/* Add instance of SARAM_A */
	SARAM_A = prog.module("MEM").create("SARAM_A");
        SARAM_A.createHeap = 0;
        SARAM_A.comment =
	    "32K block to insure next 64K block is aligned on 64K boundary";
        SARAM_A.space = "code/data";
        SARAM_A.base = 0x8000;
        SARAM_A.len = 0x8000;

	/* Add instance of SARAM_B */
	SARAM_B = prog.module("MEM").create("SARAM_B");
        SARAM_B.createHeap =0;
        SARAM_B.comment =
	    "32K block to finish allocating balance of internal memory";
        SARAM_B.space = "code/data";
        SARAM_B.base = 0x20000;
        SARAM_B.len = 0x8000;

	//  trcinit, pinit, cinit, gblinit in  SARAM_A
	//  switch section in DARAM
	//  This is required as in small model trcinit, cinit and gblinit
	//  section cannot be placed in SARAM, as it begins at address
	//  0x10000, where as  bss is in DARAM. As a result data spans
	//  two different 64K page boundary, which should not be allowed.

	prog.module("MEM").SWITCHSEG = prog.module("MEM").instance("DARAM");
	prog.module("MEM").CINITSEG = SARAM_A;
	prog.module("MEM").PINITSEG = SARAM_A;
	prog.module("MEM").TRCDATASEG = SARAM_A;
	prog.module("MEM").GBLINITSEG = SARAM_A;
    }
    else {
	/* set the default memory segments for 5510 using new memory names */
	bios.internal.setupMemory5510(prog);
    }

    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
