/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
 */
/*
 *  ======== bios_2430.tci ========
 *  This file contains BIOS settings for 2430.
 *
 */

/*
 *  ======== bios.internal.setupMemory2430 ========
 *  This function is the top-level function that will remove all MEM segments
 *  from the cdb file.  It will take your physical memory map from calling
 *  getMemoryMap() and create MEM instances in cdb.
 *  It will then set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemory2430 = function (prog)
{
    /*
     *  BIOS MEM segments will be created from object model memory definitions.
     *  Place default code and data sections into specified memory segments.
     */
    bios.initializeMemory(prog, "IRAM", "IRAM");

    var iram = prog.module("MEM").instance("IRAM");
    bios.internal.setupCache2430(prog, iram);
}


/*
 *  ======== bios.internal.setupCache2430 ========
 */
bios.internal.setupCache2430 = function (prog, iram)
{
    var cpu = prog.cpu;
    var cache_l1p = prog.module("MEM").instance("CACHE_L1P");
    var l1psram = prog.module("MEM").instance("L1PSRAM");

    cache_l1p.len = 0x0;
    cache_l1p.base = 0x10E00000 + 0x8000;

    if (cpu.registers.l1PMode == undefined || cpu.registers.l1PMode == null ||
    	cpu.registers.l1PMode == "32k") {
	if (l1psram != undefined) {
            l1psram.destroy();	
	}
        cache_l1p.base -= 0x8000;
        cache_l1p.len = 0x8000;	
    }
    else {
    	if (cpu.registers.l1PMode == "0k") {
	    l1psram.len = 0x8000;
	}
        else if (cpu.registers.l1PMode == "4k") {
            l1psram.len = 0x7000;
        }
        else if (cpu.registers.l1PMode == "8k") {
            l1psram.len = 0x6000;
        }
        else if (cpu.registers.l1PMode == "16k") {
            l1psram.len = 0x4000;
        }
        else throw new Error("Can't set L1P cache to size: " +
            cpu.registers.l1PMode);
    }

    var cache_l1d = prog.module("MEM").instance("CACHE_L1D");
    var l1dsram = prog.module("MEM").instance("L1DSRAM");
    cache_l1d.len = 0x0;
    cache_l1d.base = 0x10F04000 + 0x14000;

    if (cpu.registers.l1DMode == undefined || cpu.registers.l1DMode == null ||
        cpu.registers.l1DMode == "32k") {
        cache_l1d.base -= 0x8000;
        cache_l1d.len = 0x8000;	
        l1dsram.len = 0xc000;
    }
    else {
        if (cpu.registers.l1DMode == "0k") {
            l1dsram.len = 0x14000;
        }
        else if (cpu.registers.l1DMode == "4k") {
            l1dsram.len = 0x13000;
        }
        else if (cpu.registers.l1DMode == "8k") {
            l1dsram.len = 0x12000;
        }
        else if (cpu.registers.l1DMode == "16k") {
            l1dsram.len = 0x10000;
        }
        else throw new Error("Can't set L1D cache to size: " +
            cpu.registers.l1DMode);
    }

    var cache = prog.module("MEM").instance("CACHE_L2");

    cache.len  = 0x0;
    cache.base = iram.base + iram.len;

    if (cpu.registers.l2Mode != null) {
	if (cpu.registers.l2Mode == "0k") {
	    iram.len   = 0x10000;
	}
	else if (cpu.registers.l2Mode == "32k") {
	    iram.len   = 0x8000;
	}
	else if (cpu.registers.l2Mode == "64k") {
	    iram.len   = 0x0;
	    /*
	     * All references to IRAM need to be changed to point to some other
	     * available MEM instance.
	     */
	    var memInst = prog.module("MEM").instances();
	    var seg = null;
	    for (var i=0; i < memInst.length; i++) {
		if (memInst[i].space == "code/data" && memInst[i] != iram) {
		    seg = memInst[i];
		}
	    }
	    if (seg == null) {
		throw new Error("All of IRAM is used for cache " + 
		    "and there is no external memory in the configuration");
	    }
	    else {
		bios.setMemCodeSections(prog, seg);
		bios.setMemDataNoHeapSections(prog, seg);
	    }
	    iram.destroy();
	}
	else {
	    throw new Error("Can't set cache to size: " + cpu.registers.l2Mode);
	}
    }
    else {
	iram.len = 0x10000;
    }
}

/*
 *  ======== bios.init2430 ========
 *  BIOS initialization for the 2430
 */
bios.init2430 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
	baseseed = "ti/bios/config/cdb/c64Pomap2430.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
	try {
	    prog.load(seed);
	}
	catch (e) {
	    throw new Error ("Can't load configuration seed '" + seed + "' : "
		+ e);
	}
    }
    else {
	throw new Error ("Can't find configuration seed: " + baseseed);

    }

    /* set CLKOUT to be the value of cpu.clockRate. */
    bios.internal.setClkout(prog);
    
    /* enable specification of the input clock rate */
    prog.module("CLK").SPECIFYRATE = true;

    /* Set the input CLK to 26.0 Mhz */
    prog.module("CLK").INPUTCLK = 26.0;

    /* Set endian mode based on build options */
    if (prog.build.target.model.endian != null) {
        if (prog.build.target.model.endian != "little") {
	    print("Warning: '" + prog.build.target.model.endian +
	        "' endian mode" + " is not supported on '" +
	        prog.cpu.deviceName + "' device.")
        }
    }

    prog.module("GBL").ENDIANMODE = prog.build.target.model.endian;

    /* initialize the default memory segments for 2430 */
    bios.internal.setupMemory2430(prog);

    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
