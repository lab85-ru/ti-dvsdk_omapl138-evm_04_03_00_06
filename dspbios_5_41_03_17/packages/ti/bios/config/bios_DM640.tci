/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
 */
/*
 *  ======== bios_DM640.tci ========
 *  This file contains BIOS settings for DM640.
 *  The chip configuration settings are based on document SPRS222 and SPRU610.
 *
 *
 */

/*
 *  ======== bios.internal.setupMemoryDM640 ========
 *  This function is the top-level function that will remove all MEM segments
 *  from the cdb file.  It will take your physical memory map from calling
 *  getMemoryMap() and create MEM instances in cdb.
 *  It will then set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemoryDM640 = function (prog)
{
    /*
     *  BIOS MEM segments will be created from object model memory definitions.
     *  Place default code and data sections into specified memory segments.
     */
    bios.initializeMemory(prog, "IRAM", "IRAM");

    var cpu = prog.cpu;
    var iram = prog.module("MEM").instance("IRAM");
    var cache = prog.module("MEM").instance("CACHE_L2");
    cache.len  = 0x0;
    cache.base = 0x20000;

    if (cpu.registers.l2Mode != null) {
        if (cpu.registers.l2Mode == "4-way cache (0k)") {
            iram.len   = 0x20000;
        }
        else if (cpu.registers.l2Mode == "4-way cache (32k)") {
            iram.len   = 0x18000;
        }
        else if (cpu.registers.l2Mode == "4-way cache (64k)") {
            iram.len   = 0x10000;
        }
        else if (cpu.registers.l2Mode == "4-way cache (128k)") {
            iram.len   = 0x0;
	    /* All references to IRAM need to be changed to point to some other
	     * available MEM instance.
	     */
	    var memInst = prog.module("MEM").instances();
	    var seg = null;
	    for (var i=0; i < memInst.length; i++) {
		if (memInst[i].space == "code/data" && memInst[i] != iram) {
		    seg = memInst[i];
		}
	    }
	    if (seg == null) {
		throw new Error("All of IRAM is used for cache " + 
		    "and there is no external memory in the configuration");
	    }
	    else {
		bios.setMemCodeSections(prog, seg);
		bios.setMemDataNoHeapSections(prog, seg);
	    }
	    iram.destroy();
        }
    }
    else {
        iram.len = 0x20000;
    }
}

/*
 *  ======== bios.initDM640 ========
 *  BIOS initialization for the DM640 platform
 */
bios.initDM640 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
	baseseed = "ti/bios/config/cdb/c64xx.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
	try {
	    prog.load(seed);
	}
	catch (e) {
	    throw new Error ("Can't load configuration seed '"
                             + seed + "' : " + e);
	}
    }
    else {
	throw new Error ("Can't find configuration seed :"
                         + baseseed);

    }

    /* set CLKOUT to be the value of cpu.clockRate. */
    bios.internal.setClkout(prog);

    /* Set endian mode based on build options */
    prog.module("GBL").ENDIANMODE = prog.build.target.model.endian;

    /* initialize the default memory segments for DM640 */
    bios.internal.setupMemoryDM640(prog);

    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
