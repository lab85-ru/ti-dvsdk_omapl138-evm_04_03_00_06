;
;  Copyright 2010 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
;
;
;  ======== used.hXX ======== 
;  this file was generated by 'mkused.sh'


;
; ======== c55.h55 ========
;
        .asg    "sp", C55_save$regs
        .asg    "C55_pop_out_$regs", C55_restore_$regs
        .asg    "st0_l,st1_l,st2_l,st3_l", C55_setBiosSTbits$regs
        .asg    "st0_l,st1_l,st2_l,st3_l", C55_setBiosSTbitsFast$regs
        .asg    "tc1", C55_saveCContext$regs
        .asg    "tc1", C55_restoreCContext$regs
        .asg    "tc1", C55_saveBiosContext$regs
        .asg    "tc1", C55_restoreBiosContext$regs
        .asg "C55_save$regs", C55_saveRegGroup$regs
        .asg "C55_restore$regs", C55_restoreRegGroup$regs
        .asg "", C55_saveBiosCdiffContext$regs
        .asg "", C55_restoreBiosCdiffContext$regs
        .asg "", C55_doNothing$regs

;
; ======== chk.h55 ========
;
        .asg    "", CHK_nargs$regs
        .asg    "", CHK_void$regs
        .asg    "", CHK_domain$regs
        .asg    "", CHK_config$regs
        .asg    "", CHK_end$regs
        .asg    "", CHK_init$regs

;
; ======== clk.h55 ========
;
        .asg    "", CLK_Obj$regs
    .asg    "", CLK_config$regs
    .asg    "ac0_g, ac0_h, ac0_l", CLK_countspms$regs
    .asg    ":CLK_Obj$regs:", CLK_end$regs
    .asg    ":CLK_F_getshtime$regs:", CLK_gethtime$regs
    .asg    "ac0_g,ac0_h,ac0_l", CLK_F_getltime$regs
    .asg "ac0_g,ac0_h,ac0_l", CLK_getprd$regs
    .asg    "", CLK_init$regs
    .asg    ":CLK_F_itime$regs:", CLK_itime$regs
    .asg    "imr0, tc1", CLK_startup$regs

;
; ======== fxn.h55 ========
;
        .asg    "", FXN_Obj$regs
    .asg    "", FXN_config$regs
    .asg    "", FXN_end$regs
    .asg    "", FXN_init$regs
    .asg    "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,ac3_g,ac3_h,ac3_l, ar0,ar1,ar2,ar3,ar4,t0,t1,trn1, brc1,brs1,csr,rsa0_h,rsa0_l,rea0_h,rea0_l,rsa1_h,rsa1_l,rea1_h,rea1_l, rptc", FXN_execute$regs 
    .asg    "", FXN_startup$regs

;
; ======== gbl.h55 ========
;
        .asg    "", GBL_Obj$regs
    .asg    "", GBL_config$regs
        .asg    "", GBL_end$regs
        .asg "ac0,ar1,ar2,ar3,csr,:TRC_init$regs:", GBL_init$regs
;        .asg    "xar0,xar1", GBL_preamble$regs
;        .asg    "xar0,xar1", GBL_postamble$regs
    .asg    "", GBL_startup$regs
        .asg    "", GBL_varaible$regs

;
; ======== hst.h55 ========
;
        .asg    ":GBL_Obj$regs:,:PIP_Obj$regs:", HST_Obj$regs
        .asg    "", HST_config$regs
        .asg    "", HST_end$regs
        .asg    "xar0", HST_getpipe$regs
        .asg "LNK_init$regs", HST_init$regs
        .asg "", HST_startup$regs

;
; ======== hwi.h55 ========
;
;! 04-Sep-2002 cc       added missing : to .asg ":HWI_mkStub$regs", HWI_Obj$regs
    .asg    ":HWI_mkStub$regs:", HWI_Obj$regs
    .asg    "", HWI_config$regs
    .asg    "intm", HWI_disable$regs
    .asg    "intm,tc1", HWI_enable$regs
    .asg    "", HWI_mkStub$regs
    .asg "intm, tc1",HWI_restore$regs
    .asg    "", HWI_end$regs
    .asg    "ifr0, ifr1, ivpd, ivph, ier0, ier1", HWI_init$regs
    .asg ":HWI_enable$regs:", HWI_startup$regs
  .asg  "ier0,ier1", HWI_setIer$regs
  .asg  "xar0,xar1,ier0,ier1" ,HWI_restoreIer$regs
  .asg "ar0,ac0", HWI_checkAndCallScheduler$regs
   .asg  "xar0,ac1", HWI_checkAndRestoreStack$regs
        .asg    "xar0", HWI_saveRegForOperation$regs
        .asg   "ac0,ac1,xar0,xsp,xssp", HWI_checkAndChangeStack$regs
        .asg  "xar0,xar1,xsp,xssp", HWI_evenStackPtr$regs
    .asg    "intm,ar1,:C55_save$regs:", HWI_enter$regs
        .asg  "xar1,xar0,xsp,xssp", HWI_restoreStackPtr$regs
        .asg    "xar0,xar1,ac0_g,ac0_h,ac0_l", HWI_preserveGlobalBits$regs
        .asg    "", HWI_restoreRegAfterOperation$regs
    .asg    "ier0,ier1,intm,ar1,:C55_restore$regs:", HWI_exit$regs

;
; ======== idl.h55 ========
;
        .asg    "", IDL_Obj$regs
        .asg    "", IDL_config$regs
        .asg    ":IDL_Obj$regs:", IDL_end$regs
        .asg    "ac0_g,ac0_h,ac0_l", IDL_init$regs
        .asg    ":IDL_F_loop$regs:", IDL_loop$regs
        .asg    ":FXN_F_run$regs:", IDL_run$regs
        .asg    "", IDL_glue$regs
        .asg    "", IDL_startup$regs

;
; ======== lnk.h55 ========
;
        .asg    "", LNK_Obj$regs
        .asg    "", LNK_config$regs
        .asg    "", LNK_end$regs
        .asg    "", LNK_init$regs
        .asg "", LNK_startup$regs

;
; ======== log.h55 ========
;
        .asg ":GBL_Obj$regs:", LOG_Obj$regs
    .asg    "", LOG_config$regs
        .asg    "", LOG_disable$regs
        .asg    "", LOG_enable$regs
        .asg    "", LOG_end$regs
                .asg "xar0,xar2,xar3,:LOG_F_event$regs:", LOG_error$regs
    .asg    ":LOG_F_event$regs:", LOG_event$regs
    .asg    "", LOG_init$regs
                .asg "xar0,xar2,xar3:TRC_query$regs:,:LOG_F_event$regs:", LOG_message$regs
    .asg    "LOG_F_event$regs:", LOG_printf$regs
    .asg ":LOG_F_reset$regs:", LOG_reset$regs
    .asg    "", LOG_startup$regs

;
; ======== mem.h55 ========
;
    .asg    "", MEM_Obj$regs
    .asg    "", MEM_config$regs
    .asg    ":MEM_Obj$regs:", MEM_end$regs
    .asg    "", MEM_startup$regs
        .asg "ar1", MEM_init$regs

;
; ======== pip.h55 ========
;
        .asg    ":GBL_Obj$regs:,:FXN_Obj$regs:,:STS_Obj$regs:", PIP_Obj$regs
    .asg    "", PIP_config$regs
    .asg    "", PIP_end$regs
    .asg    "", PIP_init$regs
    .asg        "xar0,:PIP_F_take$regs:", PIP_alloc$regs
    .asg        "xar0,:PIP_F_give$regs:", PIP_put$regs
    .asg    "xar0,:PIP_F_take$regs:", PIP_get$regs
    .asg    "xar0,:PIP_F_give$regs:", PIP_free$regs
                .asg "xar0,:PIP_F_start$regs:", PIP_startup$regs
    .asg    "", PIP_readprobeSET$regs
    .asg    "", PIP_readprobeCLR$regs
    .asg    "", PIP_writeprobeSET$regs
    .asg    "", PIP_writeprobeCLR$regs

;
; ======== prd.h55 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", PRD_Obj$regs
        .asg    "", PRD_config$regs
        .asg    "", PRD_end$regs
        .asg    "", PRD_init$regs
        .asg    "t0", PRD_start$regs
        .asg    "", PRD_stop$regs
        .asg    "", PRD_startup$regs
        .asg    ":PRD_F_tick$regs:", PRD_tick$regs
        .asg    "ac0_g, ac0_h, ac0_l", PRD_getticks$regs

;
; ======== rta.h55 ========
;
        .asg    "", RTA_config$regs
        .asg    "", RTA_end$regs
        .asg    "", RTA_init$regs
        .asg "", RTA_startup$regs

;
; ======== std.h55 ========
;

;
; ======== sts.h55 ========
;
        .asg    "", STS_Obj$regs
        .asg    ":STS_F_add$regs:", STS_add$regs
        .asg    "", STS_config$regs
        .asg    ":STS_F_delta$regs:", STS_delta$regs
        .asg    "", STS_end$regs
        .asg    "", STS_init$regs
        .asg    ":STS_F_reset$regs:", STS_reset$regs
        .asg    "", STS_set$regs
        .asg    "", STS_startup$regs

;
; ======== swi.h55 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", SWI_Obj$regs
        .asg    "tc1,tc2,t0,t1:SWI_F_post$regs:", SWI_andn$regs
        .asg "tc1,t0,t1", SWI_busy$regs
        .asg    "", SWI_config$regs
        .asg    "tc1,:SWI_F_post$regs:", SWI_dec$regs
        .asg    "", SWI_disable$regs
        .asg    ":SWI_F_enable$regs:", SWI_enable$regs
        .asg    "", SWI_end$regs
        .asg "t0", SWI_getpri$regs
        .asg    ":SWI_F_post$regs:", SWI_inc$regs
        .asg    "", SWI_init$regs
        .asg    "ar1,t0:SWI_F_post$regs:", SWI_or$regs
        .asg    ":SWI_F_post$regs:", SWI_post$regs
        .asg    "ac0_g, ac0_h,ac0_l,t0,t1 ", SWI_raisepri$regs
        .asg    ":SWI_F_restorepri$regs:", SWI_restorepri$regs
        .asg    "t0", SWI_getmbox$regs
        .asg    "xar0" , SWI_self$regs
        .asg    "SWI_enable$regs:", SWI_startup$regs
        .asg "t0,t1,tc1", SWI_unlocked$regs

;
; ======== trc.h55 ========
;
        .asg    "", TRC_config$regs
        .asg    "", TRC_end$regs
        .asg    "xar0", TRC_init$regs
        .asg    "", TRC_disable$regs
        .asg    "", TRC_enable$regs
        .asg    "t0", TRC_query$regs
        .asg    "", TRC_startup$regs

;
; ======== biosdata.s55 ========
;

;
; ======== clk.s55 ========
;
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g, ac1_h, ac1_l, t0, t1, tc1", CLK_F_getshtime$regs
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,t0,t1,tc1,xar1", CLK_F_getshtime$regs
    .asg    "ac0_g,ac0_h,ac0_l", CLK_F_getltime$regs
    .asg    "ac1_g, ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,:CLK_F_getshtime$regs:", CLK_F_itime$regs

;
; ======== clk5502.s55 ========
;
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l", CLK_F_getBIOStime$regs

;
; ======== clk5561.s55 ========
;
   .asg   "tc1", CLK_F_getshtime$regs
;#       .asg    "tc1", CLK_F_wdogdisable5561$regs

;
; ======== clk_isr.s55 ========
;
    .asg    "tc1", CLK_F_isr$regs

;
; ======== clk_pwrm_asm.s55 ========
;
        .asg "tc1", CLK_stopTimer$regs
        .asg "t0, tc1", CLK_startTimer$regs

;
; ======== clk_rete.s55 ========
;
        .asg    "intm", CLK_F_rete$regs

;
; ======== clk_run.s55 ========
;
        .asg    "", CLK_F_run$regs

;
; ======== fxn.s55 ========
;
;! 04-Sep-2002  cc      changed zero to selfLoop in .asg "", FXN_F_selfLoop$regs
    .asg    "", FXN_F_nop$regs
    .asg    "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,ac3_g,ac3_h,ac3_l, ar0,ar1,ar2,ar3,ar4,t0,t1,trn1, brc1,brs1,csr,rsa0_h,rsa0_l,rea0_h,rea0_l,rsa1_h,rsa1_l,rea1_h,rea1_l, rptc", FXN_F_run$regs 
        .asg    "ac0_g, ac0_h, ac0_l", FXN_F_zero$regs
        .asg    "", FXN_F_selfLoop$regs

;
; ======== gbl_vers.s55 ========
;
        .asg    "ac0_g, ac0_h, ac0_l", GBL_F_version$regs

;
; ======== hwi_disp_asm.s55 ========
;
        .asg    "", HWI_F_dispatch$regs

;
; ======== idl.s55 ========
;
        .asg    "ar0,FXN_F_run$regs:", IDL_F_loop$regs

;
; ======== idl_busy.s55 ========
;
        .asg    "ar0,ac0_g,ac0_h,ac0_l,ac3_h,frct,sxmd,tc2,rptc,:STS_delta$regs:", IDL_F_busy$regs
        .asg    "ac0_g,ac0_h,ac0_l", IDL_F_init$regs

;
; ======== idl_cal.s55 ========
;
        .asg    "tc1",  IDL_clkstart$regs
        .asg    "tc1",  IDL_clkstop$regs
        .asg    "tc1,xar0,xar2,xar3,:IDL_clkstart$regs:, :IDL_clkstop$regs:", IDL_F_calibrate$regs

;
; ======== idl_cal5502.s55 ========
;
        .asg    "tc1,xar0,xar2,xar3", IDL_F_calibrate5502$regs

;
; ======== idl_cal5561.s55 ========
;
        .asg    "tc1,xar0,xar2,xar3,t0,ac0", IDL_F_calibrate5561$regs

;
; ======== log.s55 ========
;
    .asg    "ac0_g,ac0_h,ac0_l,t0,tc1,tc2,xar0,xar1,xar4", LOG_F_event$regs

;
; ======== log_rese.s55 ========
;
    .asg    "ac0_g,ac0_h,ac0_l,t0,xar0,xar1,xar2", LOG_F_reset$regs

;
; ======== mem_asm.s55 ========
;

;
; ======== pip.s55 ========
;
    .asg    "t0,tc1,xar0,xar1,:FXN_execute$regs:", PIP_F_take$regs
    .asg    "", PIP_F_probe$regs
        .asg    "ac0_g,ac0_h,ac0_l,tc0,tc1,xar0,xar1,:FXN_execute$regs:", PIP_F_give$regs
        .asg    "xar0,xar1,xar2,xar3:FXN_execute$regs:", PIP_F_start$regs

;
; ======== prd.s55 ========
;
        .asg    "ac0_g, ac0_h, ac0_l, ac1_g, ac1_h, ac1_l, t1, sxmd, tc1,xar0,xar1,xar2, xar3, :FXN_execute$regs:, :LOG_event$regs:, :STS_add$regs:, :TRC_query$regs:", PRD_F_swi$regs
        .asg    "ac0_g, ac0_h, ac0_l, xar0, xar1, xar2, t0, t1, tc1, :TRC_query$regs:, LOG_event$regs", PRD_F_tick$regs

;
; ======== rta.s55 ========
;
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,rptc,STBIT_INTM", RTA_F_getlog$regs
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,rptc,STBIT_INTM", RTA_F_getsts$regs
        .asg "t0,ar0,ar1,ar2,csr", RTA_F_readblk$regs
        .asg "", RTA_F_writeword$regs
        .asg    "t0,ar0,ar1,ar3,brc0,tc1,rptc,STBIT_INTM", RTA_F_resetmem$regs
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,STBIT_INTM", RTA_F_dispatch$regs

;
; ======== rta_andn.s55 ========
;
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_andn$regs
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_or$regs
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_or$regs

;
; ======== sts.s55 ========
;
        .asg    "ac1_g,ac1_h,ac1_l,ac0_g,ac0_h,ac0_l,xar0,:STS_F_add$regs:", STS_F_delta$regs
    .asg    "ac1_g,ac1_h,ac1_l,xar0", STS_F_add$regs
    .asg    "csr,xar0,xar1",  STS_F_reset$regs

;
; ======== swi.s55 ========
;
        .asg    "t0,tc1,xar1", SWI_F_enable$regs
    .asg    "t0,t1,tc1,tc2,xar0,xar1,xar2,xar3,xar4:logPost$regs:,:stsPost$regs:,:TRC_query$regs:", SWI_F_post$regs
    .asg    "xar0,ac0,ac1", SWI_F_exec_sync$regs
    .asg    "intm ", SWI_F_exec$regs
    .asg    "ac0_g,ac1_h,ac1_l,t0,t1,tc1,xar0,xar1,xar2,xar3,xar4:FXN_execute$regs:,:logBegin$regs:,:logEnd$regs:,:stsEnd$regs:,:TRC_query$regs:",SWI_F_run$regs
    .asg    "ac1_g,ac1_h,ac1_l,t0,xar1,xar2,xar3:LOG_event$regs:", logPost$regs
    .asg    "ac1_g,ac1_h,ac1_l,tc1,xar1,xar2,xar3,LOG_event$regs:", logBegin$regs
    .asg    "ac1_g,ac1_h,ac1_l,t0,t1,tc1,xar0,xar1,xar2,xar3,:LOG_event$regs:", logEnd$regs
    .asg    "ac0_g,ac0_h,ac0_l,tc1,xar2,STS_set$regs:", stsPost$regs
    .asg    "ac0_g,ac0_h,ac0_l,xar0,xar1,:CLK_itime$regs:,:STS_delta$regs:", stsEnd$regs

;
; ======== swi_pri.s55 ========
;
   .asg   " dr0:HWI_disable$regs:,:HWI_enable$regs:,:SWI_F_exec$regs:", SWI_F_restorepri$regs

;
; ======== trc.s55 ========
;

;
; ======== c55.h55 ========
;
        .asg    "sp", C55_save$regs
        .asg    "C55_pop_out_$regs", C55_restore_$regs
        .asg    "st0_l,st1_l,st2_l,st3_l", C55_setBiosSTbits$regs
        .asg    "st0_l,st1_l,st2_l,st3_l", C55_setBiosSTbitsFast$regs
        .asg    "tc1", C55_saveCContext$regs
        .asg    "tc1", C55_restoreCContext$regs
        .asg    "tc1", C55_saveBiosContext$regs
        .asg    "tc1", C55_restoreBiosContext$regs
        .asg "C55_save$regs", C55_saveRegGroup$regs
        .asg "C55_restore$regs", C55_restoreRegGroup$regs
        .asg "", C55_saveBiosCdiffContext$regs
        .asg "", C55_restoreBiosCdiffContext$regs
        .asg "", C55_doNothing$regs

;
; ======== chk.h55 ========
;
        .asg    "", CHK_nargs$regs
        .asg    "", CHK_void$regs
        .asg    "", CHK_domain$regs
        .asg    "", CHK_config$regs
        .asg    "", CHK_end$regs
        .asg    "", CHK_init$regs

;
; ======== clk.h55 ========
;
        .asg    "", CLK_Obj$regs
    .asg    "", CLK_config$regs
    .asg    "ac0_g, ac0_h, ac0_l", CLK_countspms$regs
    .asg    ":CLK_Obj$regs:", CLK_end$regs
    .asg    ":CLK_F_getshtime$regs:", CLK_gethtime$regs
    .asg    "ac0_g,ac0_h,ac0_l", CLK_F_getltime$regs
    .asg "ac0_g,ac0_h,ac0_l", CLK_getprd$regs
    .asg    "", CLK_init$regs
    .asg    ":CLK_F_itime$regs:", CLK_itime$regs
    .asg    "imr0, tc1", CLK_startup$regs

;
; ======== fxn.h55 ========
;
        .asg    "", FXN_Obj$regs
    .asg    "", FXN_config$regs
    .asg    "", FXN_end$regs
    .asg    "", FXN_init$regs
    .asg    "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,ac3_g,ac3_h,ac3_l, ar0,ar1,ar2,ar3,ar4,t0,t1,trn1, brc1,brs1,csr,rsa0_h,rsa0_l,rea0_h,rea0_l,rsa1_h,rsa1_l,rea1_h,rea1_l, rptc", FXN_execute$regs 
    .asg    "", FXN_startup$regs

;
; ======== gbl.h55 ========
;
        .asg    "", GBL_Obj$regs
    .asg    "", GBL_config$regs
        .asg    "", GBL_end$regs
        .asg "ac0,ar1,ar2,ar3,csr,:TRC_init$regs:", GBL_init$regs
;        .asg    "xar0,xar1", GBL_preamble$regs
;        .asg    "xar0,xar1", GBL_postamble$regs
    .asg    "", GBL_startup$regs
        .asg    "", GBL_varaible$regs

;
; ======== hst.h55 ========
;
        .asg    ":GBL_Obj$regs:,:PIP_Obj$regs:", HST_Obj$regs
        .asg    "", HST_config$regs
        .asg    "", HST_end$regs
        .asg    "xar0", HST_getpipe$regs
        .asg "LNK_init$regs", HST_init$regs
        .asg "", HST_startup$regs

;
; ======== hwi.h55 ========
;
;! 04-Sep-2002 cc       added missing : to .asg ":HWI_mkStub$regs", HWI_Obj$regs
    .asg    ":HWI_mkStub$regs:", HWI_Obj$regs
    .asg    "", HWI_config$regs
    .asg    "intm", HWI_disable$regs
    .asg    "intm,tc1", HWI_enable$regs
    .asg    "", HWI_mkStub$regs
    .asg "intm, tc1",HWI_restore$regs
    .asg    "", HWI_end$regs
    .asg    "ifr0, ifr1, ivpd, ivph, ier0, ier1", HWI_init$regs
    .asg ":HWI_enable$regs:", HWI_startup$regs
  .asg  "ier0,ier1", HWI_setIer$regs
  .asg  "xar0,xar1,ier0,ier1" ,HWI_restoreIer$regs
  .asg "ar0,ac0", HWI_checkAndCallScheduler$regs
   .asg  "xar0,ac1", HWI_checkAndRestoreStack$regs
        .asg    "xar0", HWI_saveRegForOperation$regs
        .asg   "ac0,ac1,xar0,xsp,xssp", HWI_checkAndChangeStack$regs
        .asg  "xar0,xar1,xsp,xssp", HWI_evenStackPtr$regs
    .asg    "intm,ar1,:C55_save$regs:", HWI_enter$regs
        .asg  "xar1,xar0,xsp,xssp", HWI_restoreStackPtr$regs
        .asg    "xar0,xar1,ac0_g,ac0_h,ac0_l", HWI_preserveGlobalBits$regs
        .asg    "", HWI_restoreRegAfterOperation$regs
    .asg    "ier0,ier1,intm,ar1,:C55_restore$regs:", HWI_exit$regs

;
; ======== idl.h55 ========
;
        .asg    "", IDL_Obj$regs
        .asg    "", IDL_config$regs
        .asg    ":IDL_Obj$regs:", IDL_end$regs
        .asg    "ac0_g,ac0_h,ac0_l", IDL_init$regs
        .asg    ":IDL_F_loop$regs:", IDL_loop$regs
        .asg    ":FXN_F_run$regs:", IDL_run$regs
        .asg    "", IDL_glue$regs
        .asg    "", IDL_startup$regs

;
; ======== lnk.h55 ========
;
        .asg    "", LNK_Obj$regs
        .asg    "", LNK_config$regs
        .asg    "", LNK_end$regs
        .asg    "", LNK_init$regs
        .asg "", LNK_startup$regs

;
; ======== log.h55 ========
;
        .asg ":GBL_Obj$regs:", LOG_Obj$regs
    .asg    "", LOG_config$regs
        .asg    "", LOG_disable$regs
        .asg    "", LOG_enable$regs
        .asg    "", LOG_end$regs
                .asg "xar0,xar2,xar3,:LOG_F_event$regs:", LOG_error$regs
    .asg    ":LOG_F_event$regs:", LOG_event$regs
    .asg    "", LOG_init$regs
                .asg "xar0,xar2,xar3:TRC_query$regs:,:LOG_F_event$regs:", LOG_message$regs
    .asg    "LOG_F_event$regs:", LOG_printf$regs
    .asg ":LOG_F_reset$regs:", LOG_reset$regs
    .asg    "", LOG_startup$regs

;
; ======== mem.h55 ========
;
    .asg    "", MEM_Obj$regs
    .asg    "", MEM_config$regs
    .asg    ":MEM_Obj$regs:", MEM_end$regs
    .asg    "", MEM_startup$regs
        .asg "ar1", MEM_init$regs

;
; ======== pip.h55 ========
;
        .asg    ":GBL_Obj$regs:,:FXN_Obj$regs:,:STS_Obj$regs:", PIP_Obj$regs
    .asg    "", PIP_config$regs
    .asg    "", PIP_end$regs
    .asg    "", PIP_init$regs
    .asg        "xar0,:PIP_F_take$regs:", PIP_alloc$regs
    .asg        "xar0,:PIP_F_give$regs:", PIP_put$regs
    .asg    "xar0,:PIP_F_take$regs:", PIP_get$regs
    .asg    "xar0,:PIP_F_give$regs:", PIP_free$regs
                .asg "xar0,:PIP_F_start$regs:", PIP_startup$regs
    .asg    "", PIP_readprobeSET$regs
    .asg    "", PIP_readprobeCLR$regs
    .asg    "", PIP_writeprobeSET$regs
    .asg    "", PIP_writeprobeCLR$regs

;
; ======== prd.h55 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", PRD_Obj$regs
        .asg    "", PRD_config$regs
        .asg    "", PRD_end$regs
        .asg    "", PRD_init$regs
        .asg    "t0", PRD_start$regs
        .asg    "", PRD_stop$regs
        .asg    "", PRD_startup$regs
        .asg    ":PRD_F_tick$regs:", PRD_tick$regs
        .asg    "ac0_g, ac0_h, ac0_l", PRD_getticks$regs

;
; ======== rta.h55 ========
;
        .asg    "", RTA_config$regs
        .asg    "", RTA_end$regs
        .asg    "", RTA_init$regs
        .asg "", RTA_startup$regs

;
; ======== std.h55 ========
;

;
; ======== sts.h55 ========
;
        .asg    "", STS_Obj$regs
        .asg    ":STS_F_add$regs:", STS_add$regs
        .asg    "", STS_config$regs
        .asg    ":STS_F_delta$regs:", STS_delta$regs
        .asg    "", STS_end$regs
        .asg    "", STS_init$regs
        .asg    ":STS_F_reset$regs:", STS_reset$regs
        .asg    "", STS_set$regs
        .asg    "", STS_startup$regs

;
; ======== swi.h55 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", SWI_Obj$regs
        .asg    "tc1,tc2,t0,t1:SWI_F_post$regs:", SWI_andn$regs
        .asg "tc1,t0,t1", SWI_busy$regs
        .asg    "", SWI_config$regs
        .asg    "tc1,:SWI_F_post$regs:", SWI_dec$regs
        .asg    "", SWI_disable$regs
        .asg    ":SWI_F_enable$regs:", SWI_enable$regs
        .asg    "", SWI_end$regs
        .asg "t0", SWI_getpri$regs
        .asg    ":SWI_F_post$regs:", SWI_inc$regs
        .asg    "", SWI_init$regs
        .asg    "ar1,t0:SWI_F_post$regs:", SWI_or$regs
        .asg    ":SWI_F_post$regs:", SWI_post$regs
        .asg    "ac0_g, ac0_h,ac0_l,t0,t1 ", SWI_raisepri$regs
        .asg    ":SWI_F_restorepri$regs:", SWI_restorepri$regs
        .asg    "t0", SWI_getmbox$regs
        .asg    "xar0" , SWI_self$regs
        .asg    "SWI_enable$regs:", SWI_startup$regs
        .asg "t0,t1,tc1", SWI_unlocked$regs

;
; ======== trc.h55 ========
;
        .asg    "", TRC_config$regs
        .asg    "", TRC_end$regs
        .asg    "xar0", TRC_init$regs
        .asg    "", TRC_disable$regs
        .asg    "", TRC_enable$regs
        .asg    "t0", TRC_query$regs
        .asg    "", TRC_startup$regs

;
; ======== biosdata.s55 ========
;

;
; ======== clk.s55 ========
;
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g, ac1_h, ac1_l, t0, t1, tc1", CLK_F_getshtime$regs
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,t0,t1,tc1,xar1", CLK_F_getshtime$regs
    .asg    "ac0_g,ac0_h,ac0_l", CLK_F_getltime$regs
    .asg    "ac1_g, ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,:CLK_F_getshtime$regs:", CLK_F_itime$regs

;
; ======== clk5502.s55 ========
;
   .asg   "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l", CLK_F_getBIOStime$regs

;
; ======== clk5561.s55 ========
;
   .asg   "tc1", CLK_F_getshtime$regs
;#       .asg    "tc1", CLK_F_wdogdisable5561$regs

;
; ======== clk_isr.s55 ========
;
    .asg    "tc1", CLK_F_isr$regs

;
; ======== clk_pwrm_asm.s55 ========
;
        .asg "tc1", CLK_stopTimer$regs
        .asg "t0, tc1", CLK_startTimer$regs

;
; ======== clk_rete.s55 ========
;
        .asg    "intm", CLK_F_rete$regs

;
; ======== clk_run.s55 ========
;
        .asg    "", CLK_F_run$regs

;
; ======== fxn.s55 ========
;
;! 04-Sep-2002  cc      changed zero to selfLoop in .asg "", FXN_F_selfLoop$regs
    .asg    "", FXN_F_nop$regs
    .asg    "ac0_g,ac0_h,ac0_l,ac1_g,ac1_h,ac1_l,ac2_g,ac2_h,ac2_l,ac3_g,ac3_h,ac3_l, ar0,ar1,ar2,ar3,ar4,t0,t1,trn1, brc1,brs1,csr,rsa0_h,rsa0_l,rea0_h,rea0_l,rsa1_h,rsa1_l,rea1_h,rea1_l, rptc", FXN_F_run$regs 
        .asg    "ac0_g, ac0_h, ac0_l", FXN_F_zero$regs
        .asg    "", FXN_F_selfLoop$regs

;
; ======== gbl_vers.s55 ========
;
        .asg    "ac0_g, ac0_h, ac0_l", GBL_F_version$regs

;
; ======== hwi_disp_asm.s55 ========
;
        .asg    "", HWI_F_dispatch$regs

;
; ======== idl.s55 ========
;
        .asg    "ar0,FXN_F_run$regs:", IDL_F_loop$regs

;
; ======== idl_busy.s55 ========
;
        .asg    "ar0,ac0_g,ac0_h,ac0_l,ac3_h,frct,sxmd,tc2,rptc,:STS_delta$regs:", IDL_F_busy$regs
        .asg    "ac0_g,ac0_h,ac0_l", IDL_F_init$regs

;
; ======== idl_cal.s55 ========
;
        .asg    "tc1",  IDL_clkstart$regs
        .asg    "tc1",  IDL_clkstop$regs
        .asg    "tc1,xar0,xar2,xar3,:IDL_clkstart$regs:, :IDL_clkstop$regs:", IDL_F_calibrate$regs

;
; ======== idl_cal5502.s55 ========
;
        .asg    "tc1,xar0,xar2,xar3", IDL_F_calibrate5502$regs

;
; ======== idl_cal5561.s55 ========
;
        .asg    "tc1,xar0,xar2,xar3,t0,ac0", IDL_F_calibrate5561$regs

;
; ======== log.s55 ========
;
    .asg    "ac0_g,ac0_h,ac0_l,t0,tc1,tc2,xar0,xar1,xar4", LOG_F_event$regs

;
; ======== log_rese.s55 ========
;
    .asg    "ac0_g,ac0_h,ac0_l,t0,xar0,xar1,xar2", LOG_F_reset$regs

;
; ======== mem_asm.s55 ========
;

;
; ======== pip.s55 ========
;
    .asg    "t0,tc1,xar0,xar1,:FXN_execute$regs:", PIP_F_take$regs
    .asg    "", PIP_F_probe$regs
        .asg    "ac0_g,ac0_h,ac0_l,tc0,tc1,xar0,xar1,:FXN_execute$regs:", PIP_F_give$regs
        .asg    "xar0,xar1,xar2,xar3:FXN_execute$regs:", PIP_F_start$regs

;
; ======== prd.s55 ========
;
        .asg    "ac0_g, ac0_h, ac0_l, ac1_g, ac1_h, ac1_l, t1, sxmd, tc1,xar0,xar1,xar2, xar3, :FXN_execute$regs:, :LOG_event$regs:, :STS_add$regs:, :TRC_query$regs:", PRD_F_swi$regs
        .asg    "ac0_g, ac0_h, ac0_l, xar0, xar1, xar2, t0, t1, tc1, :TRC_query$regs:, LOG_event$regs", PRD_F_tick$regs

;
; ======== rta.s55 ========
;
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,rptc,STBIT_INTM", RTA_F_getlog$regs
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,rptc,STBIT_INTM", RTA_F_getsts$regs
        .asg "t0,ar0,ar1,ar2,csr", RTA_F_readblk$regs
        .asg "", RTA_F_writeword$regs
        .asg    "t0,ar0,ar1,ar3,brc0,tc1,rptc,STBIT_INTM", RTA_F_resetmem$regs
        .asg "t0,t1,ar0,ar1,ar2,ar3,brc0,brc1,tc1,STBIT_INTM", RTA_F_dispatch$regs

;
; ======== rta_andn.s55 ========
;
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_andn$regs
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_or$regs
        .asg "t0,tc1,rptc,STBIT_INTM", RTA_F_or$regs

;
; ======== sts.s55 ========
;
        .asg    "ac1_g,ac1_h,ac1_l,ac0_g,ac0_h,ac0_l,xar0,:STS_F_add$regs:", STS_F_delta$regs
    .asg    "ac1_g,ac1_h,ac1_l,xar0", STS_F_add$regs
    .asg    "csr,xar0,xar1",  STS_F_reset$regs

;
; ======== swi.s55 ========
;
        .asg    "t0,tc1,xar1", SWI_F_enable$regs
    .asg    "t0,t1,tc1,tc2,xar0,xar1,xar2,xar3,xar4:logPost$regs:,:stsPost$regs:,:TRC_query$regs:", SWI_F_post$regs
    .asg    "xar0,ac0,ac1", SWI_F_exec_sync$regs
    .asg    "intm ", SWI_F_exec$regs
    .asg    "ac0_g,ac1_h,ac1_l,t0,t1,tc1,xar0,xar1,xar2,xar3,xar4:FXN_execute$regs:,:logBegin$regs:,:logEnd$regs:,:stsEnd$regs:,:TRC_query$regs:",SWI_F_run$regs
    .asg    "ac1_g,ac1_h,ac1_l,t0,xar1,xar2,xar3:LOG_event$regs:", logPost$regs
    .asg    "ac1_g,ac1_h,ac1_l,tc1,xar1,xar2,xar3,LOG_event$regs:", logBegin$regs
    .asg    "ac1_g,ac1_h,ac1_l,t0,t1,tc1,xar0,xar1,xar2,xar3,:LOG_event$regs:", logEnd$regs
    .asg    "ac0_g,ac0_h,ac0_l,tc1,xar2,STS_set$regs:", stsPost$regs
    .asg    "ac0_g,ac0_h,ac0_l,xar0,xar1,:CLK_itime$regs:,:STS_delta$regs:", stsEnd$regs

;
; ======== swi_pri.s55 ========
;
   .asg   " dr0:HWI_disable$regs:,:HWI_enable$regs:,:SWI_F_exec$regs:", SWI_F_restorepri$regs

;
; ======== trc.s55 ========
;
