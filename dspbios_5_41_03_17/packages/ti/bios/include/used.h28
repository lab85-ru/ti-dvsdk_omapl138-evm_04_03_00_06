;
;  Copyright 2010 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
;
;
;  ======== used.hXX ======== 
;  this file was generated by 'mkused.sh'


;
; ======== c28.h28 ========
;
        .asg "sp", C28_save$regs
        .asg "sp", C28_restore$regs
        .asg    "ier", C28_disableIER$regs
        .asg    "ier", C28_enableIER$regs
        .asg "st0,st1",C28_setBiosSTbits$regs
        .asg "sp",C28_saveCContext$regs
        .asg "sp",C28_saveCContext$regs
        .asg "C28_saveCContext$regs",C28_saveBiosContext$regs
        .asg "C28_restoreCContext$regs",C28_restoreBiosContext$regs

;
; ======== chk.h28 ========
;
        .asg    "", CHK_nargs$regs
        .asg    "", CHK_void$regs
        .asg    "", CHK_domain$regs
        .asg    "", CHK_config$regs
        .asg    "", CHK_end$regs
        .asg    "", CHK_init$regs

;
; ======== clk.h28 ========
;
        .asg    "", CLK_Obj$regs
        .asg    "", CLK_config$regs
        .asg    "acc", CLK_countspms$regs
    .asg    ":CLK_Obj$regs:", CLK_end$regs
        .asg    ":CLK_F_getshtime$regs:", CLK_gethtime$regs
        .asg    "acc, xar0 ", CLK_F_getltime$regs
        .asg "acc", CLK_getprd$regs
        .asg    "", CLK_init$regs
        .asg    ":CLK_F_itime$regs:", CLK_itime$regs
        .asg    "ier,xar0", CLK_startup$regs

;
; ======== fxn.h28 ========
;
        .asg    "", FXN_Obj$regs
    .asg    "", FXN_config$regs
    .asg    "", FXN_end$regs
    .asg    "", FXN_init$regs
    .asg    "al,ah,xar0,xar4,xar5,xar6,xar7,t,tl,pl,ph,ier,ifr,rpc,st0,st1", FXN_execute$regs 
    .asg    "", FXN_startup$regs

;
; ======== gbl.h28 ========
;
        .asg    "", GBL_Obj$regs
    .asg    "", GBL_config$regs
        .asg    "", GBL_end$regs
        .asg    "acc,xar0,xar4,xar5,:TRC_init$regs:", GBL_init$regs
;        .asg    "ah,sp", GBL_preamble$regs
;        .asg    "sp", GBL_postamble$regs
    .asg    "", GBL_startup$regs
        .asg    "", GBL_varaible$regs

;
; ======== hst.h28 ========
;
        .asg    ":GBL_Obj$regs:,:PIP_Obj$regs:", HST_Obj$regs
        .asg    "", HST_config$regs
        .asg    "", HST_end$regs
        .asg    "xar4", HST_getpipe$regs
        .asg "LNK_init$regs", HST_init$regs
        .asg "", HST_startup$regs

;
; ======== hwi.h28 ========
;
    .asg    ":HWI_mkStub$regs", HWI_Obj$regs
    .asg    "", HWI_config$regs
    .asg    "intm,dbgm", HWI_disable$regs
    .asg   "intm,dbgm", HWI_enable$regs
    .asg    "tc", HWI_mkStub$regs
    .asg "intm,dbgm",HWI_restore$regs
    .asg    "", HWI_end$regs
    .asg    "ifr", HWI_init$regs
    .asg ":HWI_enable$regs:", HWI_startup$regs
        .asg   "", HWI_saveRegForOperation$regs
        .asg   "acc,xar0,sp", HWI_checkAndChangeStack$regs
  .asg  "ier", HWI_setIer$regs
   .asg  "sp,ah", HWI_evenStackPtr$regs
    .asg    ":HWI_setIer$regs:,:HWI_saveRegForOperation$regs:,:HWI_evenStackPtr$regs:,:C28_save$regs:", HWI_enter$regs
  .asg  "sp", HWI_restoreStackPtr$regs
  .asg  "acc,ier" ,HWI_restoreIer$regs
  .asg "xar0,acc", HWI_checkAndCallScheduler$regs
   .asg  "xar0,acc,sp", HWI_checkAndRestoreStack$regs
     .asg  "", HWI_restoreRegAfterOperation$regs
        .asg    "st1,st0,acc", SWI_Obj$regs
        .asg    ":C28_restore$regs:,:SWI_F_exec$regs:,:HWI_restoreStackPtr:,:HWI_restoreIer$regs:,:HWI_checkAndCallScheduler$regs:,:HWI_preserveGlobalBits$regs:,:HWI_checkAndRestoreStack$regs:", HWI_exit$regs
    .asg   "ah", HWI_correctIerInStack$regs

;
; ======== idl.h28 ========
;
        .asg    "", IDL_Obj$regs
        .asg    "", IDL_config$regs
        .asg    ":IDL_Obj$regs:", IDL_end$regs
        .asg    ":IDL_F_init$regs:", IDL_init$regs
        .asg    ":IDL_F_loop$regs:", IDL_loop$regs
        .asg    ":FXN_F_run$regs:", IDL_run$regs
        .asg    "", IDL_glue$regs
        .asg    "", IDL_startup$regs

;
; ======== lnk.h28 ========
;
        .asg    "", LNK_Obj$regs
        .asg    "", LNK_config$regs
        .asg    "", LNK_end$regs
        .asg    "", LNK_init$regs
        .asg "", LNK_startup$regs

;
; ======== log.h28 ========
;
        .asg    ":GBL_Obj$regs:", LOG_Obj$regs
    .asg    "", LOG_config$regs
        .asg    "", LOG_disable$regs
        .asg    "", LOG_enable$regs
        .asg    "", LOG_end$regs
                .asg "xar4,xar6,xar7,:LOG_F_event$regs:", LOG_error$regs
    .asg    ":LOG_F_event$regs:", LOG_event$regs
    .asg    "", LOG_init$regs
                .asg "xar4,xar6,xar7,:TRC_query$regs:,:LOG_F_event$regs:", LOG_message$regs
    .asg    "xar7,LOG_F_event$regs:", LOG_printf$regs
    .asg ":LOG_F_reset$regs:", LOG_reset$regs
    .asg    "", LOG_startup$regs

;
; ======== mem.h28 ========
;
    .asg    "", MEM_Obj$regs
    .asg    "", MEM_config$regs
    .asg    ":MEM_Obj$regs:", MEM_end$regs
    .asg    "", MEM_startup$regs
        .asg    "", MEM_init$regs

;
; ======== pie.h28 ========
;
    .asg    "", PIE_init$regs
    .asg    "", PIE_end$regs
    .asg    "", PIE_startup$regs
    .asg    "", PIE_config$regs
    .asg    ":HWI_Obj$regs:", PIE_Obj$regs

;
; ======== pip.h28 ========
;
        .asg    ":GBL_Obj$regs:,:FXN_Obj$regs:,:STS_Obj$regs:", PIP_Obj$regs
    .asg    "", PIP_config$regs
    .asg    "", PIP_end$regs
    .asg    "", PIP_init$regs
    .asg        "xar4,:PIP_F_take$regs:", PIP_alloc$regs
    .asg        "xar4,:PIP_F_give$regs:", PIP_put$regs
    .asg    "xar4,:PIP_F_take$regs:", PIP_get$regs
    .asg    "xar4,:PIP_F_give$regs:", PIP_free$regs
                .asg "xar0,xar4,:PIP_F_start$regs:", PIP_startup$regs
    .asg    "", PIP_readprobeSET$regs
    .asg    "", PIP_readprobeCLR$regs
    .asg    "", PIP_writeprobeSET$regs
    .asg    "", PIP_writeprobeCLR$regs

;
; ======== prd.h28 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", PRD_Obj$regs
        .asg    "", PRD_config$regs
        .asg    "", PRD_end$regs
        .asg    "", PRD_init$regs
        .asg    "ah,al,xar0", PRD_start$regs
        .asg    "", PRD_stop$regs
        .asg    "xar0", PRD_startup$regs
        .asg    ":PRD_F_tick$regs:", PRD_tick$regs
        .asg    "xar0, acc", PRD_getticks$regs

;
; ======== rta.h28 ========
;
        .asg    "", RTA_config$regs
        .asg    "", RTA_end$regs
        .asg    "", RTA_init$regs
        .asg "", RTA_startup$regs

;
; ======== std.h28 ========
;

;
; ======== sts.h28 ========
;
        .asg    "", STS_Obj$regs
        .asg    ":STS_F_add$regs:", STS_add$regs
        .asg    "", STS_config$regs
        .asg    ":STS_F_delta$regs:", STS_delta$regs
        .asg    "", STS_end$regs
        .asg    "", STS_init$regs
        .asg    ":STS_F_reset$regs:", STS_reset$regs
        .asg    "", STS_set$regs
        .asg    "", STS_startup$regs

;
; ======== swi.h28 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", SWI_Obj$regs
        .asg    "ah,al,xar4:SWI_F_post$regs:", SWI_andn$regs
        .asg "al,xar0,tc", SWI_busy$regs
        .asg    "", SWI_config$regs
        .asg    "al,xar4,:SWI_F_post$regs:", SWI_dec$regs
        .asg    "xar0", SWI_disable$regs
        .asg    ":SWI_F_enable$regs:", SWI_enable$regs
        .asg    "", SWI_end$regs
        .asg "al", SWI_getpri$regs
        .asg    ":SWI_F_post$regs:", SWI_inc$regs
        .asg    "", SWI_init$regs
        .asg    ":SWI_F_post$regs:", SWI_or$regs
        .asg    ":SWI_F_post$regs:", SWI_post$regs
        .asg    "t,ah,al,xar0", SWI_raisepri$regs
        .asg    ":SWI_F_restorepri$regs:", SWI_restorepri$regs
        .asg    "al,xar0", SWI_getmbox$regs
        .asg    "xar0,xar4" , SWI_self$regs
        .asg    "SWI_enable$regs:", SWI_startup$regs
        .asg "xar0,al,tc", SWI_unlocked$regs

;
; ======== trc.h28 ========
;
        .asg    "", TRC_config$regs
        .asg    "", TRC_end$regs
        .asg    "xar0,al", TRC_init$regs
        .asg    "xar0,al", TRC_disable$regs
        .asg    "xar0,al", TRC_enable$regs
        .asg    "al,t,xar0", TRC_query$regs
        .asg    "", TRC_startup$regs

;
; ======== biosdata.s28 ========
;

;
; ======== clk.s28 ========
;
        .asg   "xar4",CLK_F_getfhtime$regs
        .asg   "xar5,xar4,xar7,acc,xt,acc,p,tc", CLK_F_getshtime$regs
        .asg    "xar4", CLK_F_getltime$regs
        .asg    "xar4,xar7,tc,:CLK_F_getshtime$regs:", CLK_F_itime$regs

;
; ======== clk_isr.s28 ========
;
    .asg    "xar0,acc,LOG_F_event$regs", CLK_F_isr$regs

;
; ======== clk_rete.s28 ========
;
        .asg    "xar7,xar0,intm,dbgm", CLK_F_rete$regs

;
; ======== clk_run.s28 ========
;
        .asg    "", CLK_F_run$regs

;
; ======== fxn.s28 ========
;
    .asg    "", FXN_F_nop$regs
    .asg    "al,ah,xar0,xar4,xar5,xar6,xar7,t,tl,pl,ph,ier,ifr,rpc,st0,st1", FXN_F_run$regs 
        .asg    "al", FXN_F_zero$regs
        .asg    "", FXN_F_selfLoop$regs

;
; ======== gbl_vers.s28 ========
;
        .asg    "acc", GBL_F_version$regs

;
; ======== hwi_disp_asm.s28 ========
;
        .asg "al",HWI_F_DispIsrPie$regs
        .asg    "", HWI_F_dispatch$regs
        .asg "al",HWI_F_DispIsr1$regs
        .asg "al",HWI_F_DispIsr1$regs

;
; ======== idl.s28 ========
;
        .asg    "xar0,xar4,FXN_F_run$regs:", IDL_F_loop$regs

;
; ======== idl_busy.s28 ========
;
        .asg    "xar0,xar4,acc:STS_delta$regs:", IDL_F_busy$regs
        .asg    "xar0,xar4,xar7,acc", IDL_F_init$regs 

;
; ======== idl_cal.s28 ========
;
        .asg    "t,xar0,xar4", IDL_F_calibrate$regs

;
; ======== log.s28 ========
;
        .asg    "xar0,acc", LOG_F_event$regs

;
; ======== log_rese.s28 ========
;
    .asg    "xar0,acc", LOG_F_reset$regs

;
; ======== mem_asm.s28 ========
;

;
; ======== pip.s28 ========
;
    .asg    "acc,xar0,xar4,:FXN_execute$regs:", PIP_F_take$regs
    .asg    "", PIP_F_probe$regs
        .asg    "acc,xar0,xar4,:FXN_execute$regs:", PIP_F_give$regs
        .asg    "al,xar0,xar4,xar5:FXN_execute$regs:", PIP_F_start$regs

;
; ======== prd.s28 ========
;
        .asg    "al,ah,xar0,xar4,xar5, xar6,xar7,pl,ph,st0,st1 :FXN_execute$regs:, :LOG_event$regs:, :STS_add$regs:, :TRC_query$regs:", PRD_F_swi$regs
        .asg    "ah, al, xar0, xar4, xar5, xar6,xar7, :TRC_query$regs:,:LOG_event$regs:,:SWI_F_post$regs:", PRD_F_tick$regs

;
; ======== rta.s28 ========
;
        .asg "xar0,xar4,xar5,xar6,xar7,acc", RTA_F_getlog$regs
        .asg "", RTA_F_getsts$regs
        .asg "ah, xar4, xar5", RTA_F_readblk$regs
        .asg "", RTA_F_writeword$regs
        .asg    "xar4, xar5, xar6, xar7, al", RTA_F_resetmem$regs
        .asg "xar4,xar5,xar7,intm,dbgm,acc", RTA_F_dispatch$regs

;
; ======== rta_andn.s28 ========
;
        .asg "", RTA_F_andn$regs
        .asg "", RTA_F_or$regs
        .asg "", RTA_F_or$regs

;
; ======== rtdx_isr.s28 ========
;
        .asg "", RTDX_F_isr$regs

;
; ======== sts.s28 ========
;
        .asg    "acc, xar5,:STS_F_add$regs:", STS_F_delta$regs
    .asg    "acc", STS_F_add$regs
    .asg    "",  STS_F_set$regs
    .asg    "xar4,ar0",  STS_F_reset$regs

;
; ======== swi.s28 ========
;
        .asg    "xar0,al,:SWI_F_exec_sync$regs:", SWI_F_enable$regs
        .asg    "al,ar6,xar0,xar4,xar5,:logPost$regs:,:stsPost$regs:,:TRC_query$regs:", SWI_F_post$regs
        .asg    "sp,xar0,al", SWI_F_exec_sync$regs
        .asg    "sp,al,xar0,intm,dbgm", SWI_F_exec$regs
        .asg    "acc,sp,xar0,xar6,t,xar4,xar5,:FXN_execute$regs:,:logBegin$regs:,:logEnd$regs:,:stsEnd$regs:,:TRC_query$regs:",SWI_F_run$regs
        .asg    "xar0, xar4, xar5, xar6, xar7:LOG_event$regs:", logPost$regs
        .asg    "xar4, xar5, xar7, LOG_event$regs:", logBegin$regs
        .asg    "xar0,xar4,xar5,xar6,xar7,:LOG_event$regs:", logEnd$regs
        .asg    "xar0,xar5,acc,STS_set$regs:", stsPost$regs
        .asg    "xar0,xar4,ar5,acc,:CLK_itime$regs:,:STS_delta$regs:", stsEnd$regs

;
; ======== swi_pri.s28 ========
;
   .asg   " al,xar4:HWI_disable$regs:,:HWI_enable$regs:,:SWI_F_exec$regs:", SWI_F_restorepri$regs

;
; ======== trc.s28 ========
;

;
; ======== c28.h28 ========
;
        .asg "sp", C28_save$regs
        .asg "sp", C28_restore$regs
        .asg    "ier", C28_disableIER$regs
        .asg    "ier", C28_enableIER$regs
        .asg "st0,st1",C28_setBiosSTbits$regs
        .asg "sp",C28_saveCContext$regs
        .asg "sp",C28_saveCContext$regs
        .asg "C28_saveCContext$regs",C28_saveBiosContext$regs
        .asg "C28_restoreCContext$regs",C28_restoreBiosContext$regs

;
; ======== chk.h28 ========
;
        .asg    "", CHK_nargs$regs
        .asg    "", CHK_void$regs
        .asg    "", CHK_domain$regs
        .asg    "", CHK_config$regs
        .asg    "", CHK_end$regs
        .asg    "", CHK_init$regs

;
; ======== clk.h28 ========
;
        .asg    "", CLK_Obj$regs
        .asg    "", CLK_config$regs
        .asg    "acc", CLK_countspms$regs
    .asg    ":CLK_Obj$regs:", CLK_end$regs
        .asg    ":CLK_F_getshtime$regs:", CLK_gethtime$regs
        .asg    "acc, xar0 ", CLK_F_getltime$regs
        .asg "acc", CLK_getprd$regs
        .asg    "", CLK_init$regs
        .asg    ":CLK_F_itime$regs:", CLK_itime$regs
        .asg    "ier,xar0", CLK_startup$regs

;
; ======== fxn.h28 ========
;
        .asg    "", FXN_Obj$regs
    .asg    "", FXN_config$regs
    .asg    "", FXN_end$regs
    .asg    "", FXN_init$regs
    .asg    "al,ah,xar0,xar4,xar5,xar6,xar7,t,tl,pl,ph,ier,ifr,rpc,st0,st1", FXN_execute$regs 
    .asg    "", FXN_startup$regs

;
; ======== gbl.h28 ========
;
        .asg    "", GBL_Obj$regs
    .asg    "", GBL_config$regs
        .asg    "", GBL_end$regs
        .asg    "acc,xar0,xar4,xar5,:TRC_init$regs:", GBL_init$regs
;        .asg    "ah,sp", GBL_preamble$regs
;        .asg    "sp", GBL_postamble$regs
    .asg    "", GBL_startup$regs
        .asg    "", GBL_varaible$regs

;
; ======== hst.h28 ========
;
        .asg    ":GBL_Obj$regs:,:PIP_Obj$regs:", HST_Obj$regs
        .asg    "", HST_config$regs
        .asg    "", HST_end$regs
        .asg    "xar4", HST_getpipe$regs
        .asg "LNK_init$regs", HST_init$regs
        .asg "", HST_startup$regs

;
; ======== hwi.h28 ========
;
    .asg    ":HWI_mkStub$regs", HWI_Obj$regs
    .asg    "", HWI_config$regs
    .asg    "intm,dbgm", HWI_disable$regs
    .asg   "intm,dbgm", HWI_enable$regs
    .asg    "tc", HWI_mkStub$regs
    .asg "intm,dbgm",HWI_restore$regs
    .asg    "", HWI_end$regs
    .asg    "ifr", HWI_init$regs
    .asg ":HWI_enable$regs:", HWI_startup$regs
        .asg   "", HWI_saveRegForOperation$regs
        .asg   "acc,xar0,sp", HWI_checkAndChangeStack$regs
  .asg  "ier", HWI_setIer$regs
   .asg  "sp,ah", HWI_evenStackPtr$regs
    .asg    ":HWI_setIer$regs:,:HWI_saveRegForOperation$regs:,:HWI_evenStackPtr$regs:,:C28_save$regs:", HWI_enter$regs
  .asg  "sp", HWI_restoreStackPtr$regs
  .asg  "acc,ier" ,HWI_restoreIer$regs
  .asg "xar0,acc", HWI_checkAndCallScheduler$regs
   .asg  "xar0,acc,sp", HWI_checkAndRestoreStack$regs
     .asg  "", HWI_restoreRegAfterOperation$regs
        .asg    "st1,st0,acc", SWI_Obj$regs
        .asg    ":C28_restore$regs:,:SWI_F_exec$regs:,:HWI_restoreStackPtr:,:HWI_restoreIer$regs:,:HWI_checkAndCallScheduler$regs:,:HWI_preserveGlobalBits$regs:,:HWI_checkAndRestoreStack$regs:", HWI_exit$regs
    .asg   "ah", HWI_correctIerInStack$regs

;
; ======== idl.h28 ========
;
        .asg    "", IDL_Obj$regs
        .asg    "", IDL_config$regs
        .asg    ":IDL_Obj$regs:", IDL_end$regs
        .asg    ":IDL_F_init$regs:", IDL_init$regs
        .asg    ":IDL_F_loop$regs:", IDL_loop$regs
        .asg    ":FXN_F_run$regs:", IDL_run$regs
        .asg    "", IDL_glue$regs
        .asg    "", IDL_startup$regs

;
; ======== lnk.h28 ========
;
        .asg    "", LNK_Obj$regs
        .asg    "", LNK_config$regs
        .asg    "", LNK_end$regs
        .asg    "", LNK_init$regs
        .asg "", LNK_startup$regs

;
; ======== log.h28 ========
;
        .asg    ":GBL_Obj$regs:", LOG_Obj$regs
    .asg    "", LOG_config$regs
        .asg    "", LOG_disable$regs
        .asg    "", LOG_enable$regs
        .asg    "", LOG_end$regs
                .asg "xar4,xar6,xar7,:LOG_F_event$regs:", LOG_error$regs
    .asg    ":LOG_F_event$regs:", LOG_event$regs
    .asg    "", LOG_init$regs
                .asg "xar4,xar6,xar7,:TRC_query$regs:,:LOG_F_event$regs:", LOG_message$regs
    .asg    "xar7,LOG_F_event$regs:", LOG_printf$regs
    .asg ":LOG_F_reset$regs:", LOG_reset$regs
    .asg    "", LOG_startup$regs

;
; ======== mem.h28 ========
;
    .asg    "", MEM_Obj$regs
    .asg    "", MEM_config$regs
    .asg    ":MEM_Obj$regs:", MEM_end$regs
    .asg    "", MEM_startup$regs
        .asg    "", MEM_init$regs

;
; ======== pie.h28 ========
;
    .asg    "", PIE_init$regs
    .asg    "", PIE_end$regs
    .asg    "", PIE_startup$regs
    .asg    "", PIE_config$regs
    .asg    ":HWI_Obj$regs:", PIE_Obj$regs

;
; ======== pip.h28 ========
;
        .asg    ":GBL_Obj$regs:,:FXN_Obj$regs:,:STS_Obj$regs:", PIP_Obj$regs
    .asg    "", PIP_config$regs
    .asg    "", PIP_end$regs
    .asg    "", PIP_init$regs
    .asg        "xar4,:PIP_F_take$regs:", PIP_alloc$regs
    .asg        "xar4,:PIP_F_give$regs:", PIP_put$regs
    .asg    "xar4,:PIP_F_take$regs:", PIP_get$regs
    .asg    "xar4,:PIP_F_give$regs:", PIP_free$regs
                .asg "xar0,xar4,:PIP_F_start$regs:", PIP_startup$regs
    .asg    "", PIP_readprobeSET$regs
    .asg    "", PIP_readprobeCLR$regs
    .asg    "", PIP_writeprobeSET$regs
    .asg    "", PIP_writeprobeCLR$regs

;
; ======== prd.h28 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", PRD_Obj$regs
        .asg    "", PRD_config$regs
        .asg    "", PRD_end$regs
        .asg    "", PRD_init$regs
        .asg    "ah,al,xar0", PRD_start$regs
        .asg    "", PRD_stop$regs
        .asg    "xar0", PRD_startup$regs
        .asg    ":PRD_F_tick$regs:", PRD_tick$regs
        .asg    "xar0, acc", PRD_getticks$regs

;
; ======== rta.h28 ========
;
        .asg    "", RTA_config$regs
        .asg    "", RTA_end$regs
        .asg    "", RTA_init$regs
        .asg "", RTA_startup$regs

;
; ======== std.h28 ========
;

;
; ======== sts.h28 ========
;
        .asg    "", STS_Obj$regs
        .asg    ":STS_F_add$regs:", STS_add$regs
        .asg    "", STS_config$regs
        .asg    ":STS_F_delta$regs:", STS_delta$regs
        .asg    "", STS_end$regs
        .asg    "", STS_init$regs
        .asg    ":STS_F_reset$regs:", STS_reset$regs
        .asg    "", STS_set$regs
        .asg    "", STS_startup$regs

;
; ======== swi.h28 ========
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", SWI_Obj$regs
        .asg    "ah,al,xar4:SWI_F_post$regs:", SWI_andn$regs
        .asg "al,xar0,tc", SWI_busy$regs
        .asg    "", SWI_config$regs
        .asg    "al,xar4,:SWI_F_post$regs:", SWI_dec$regs
        .asg    "xar0", SWI_disable$regs
        .asg    ":SWI_F_enable$regs:", SWI_enable$regs
        .asg    "", SWI_end$regs
        .asg "al", SWI_getpri$regs
        .asg    ":SWI_F_post$regs:", SWI_inc$regs
        .asg    "", SWI_init$regs
        .asg    ":SWI_F_post$regs:", SWI_or$regs
        .asg    ":SWI_F_post$regs:", SWI_post$regs
        .asg    "t,ah,al,xar0", SWI_raisepri$regs
        .asg    ":SWI_F_restorepri$regs:", SWI_restorepri$regs
        .asg    "al,xar0", SWI_getmbox$regs
        .asg    "xar0,xar4" , SWI_self$regs
        .asg    "SWI_enable$regs:", SWI_startup$regs
        .asg "xar0,al,tc", SWI_unlocked$regs

;
; ======== trc.h28 ========
;
        .asg    "", TRC_config$regs
        .asg    "", TRC_end$regs
        .asg    "xar0,al", TRC_init$regs
        .asg    "xar0,al", TRC_disable$regs
        .asg    "xar0,al", TRC_enable$regs
        .asg    "al,t,xar0", TRC_query$regs
        .asg    "", TRC_startup$regs

;
; ======== biosdata.s28 ========
;

;
; ======== clk.s28 ========
;
        .asg   "xar4",CLK_F_getfhtime$regs
        .asg   "xar5,xar4,xar7,acc,xt,acc,p,tc", CLK_F_getshtime$regs
        .asg    "xar4", CLK_F_getltime$regs
        .asg    "xar4,xar7,tc,:CLK_F_getshtime$regs:", CLK_F_itime$regs

;
; ======== clk_isr.s28 ========
;
    .asg    "xar0,acc,LOG_F_event$regs", CLK_F_isr$regs

;
; ======== clk_rete.s28 ========
;
        .asg    "xar7,xar0,intm,dbgm", CLK_F_rete$regs

;
; ======== clk_run.s28 ========
;
        .asg    "", CLK_F_run$regs

;
; ======== fxn.s28 ========
;
    .asg    "", FXN_F_nop$regs
    .asg    "al,ah,xar0,xar4,xar5,xar6,xar7,t,tl,pl,ph,ier,ifr,rpc,st0,st1", FXN_F_run$regs 
        .asg    "al", FXN_F_zero$regs
        .asg    "", FXN_F_selfLoop$regs

;
; ======== gbl_vers.s28 ========
;
        .asg    "acc", GBL_F_version$regs

;
; ======== hwi_disp_asm.s28 ========
;
        .asg "al",HWI_F_DispIsrPie$regs
        .asg    "", HWI_F_dispatch$regs
        .asg "al",HWI_F_DispIsr1$regs
        .asg "al",HWI_F_DispIsr1$regs

;
; ======== idl.s28 ========
;
        .asg    "xar0,xar4,FXN_F_run$regs:", IDL_F_loop$regs

;
; ======== idl_busy.s28 ========
;
        .asg    "xar0,xar4,acc:STS_delta$regs:", IDL_F_busy$regs
        .asg    "xar0,xar4,xar7,acc", IDL_F_init$regs 

;
; ======== idl_cal.s28 ========
;
        .asg    "t,xar0,xar4", IDL_F_calibrate$regs

;
; ======== log.s28 ========
;
        .asg    "xar0,acc", LOG_F_event$regs

;
; ======== log_rese.s28 ========
;
    .asg    "xar0,acc", LOG_F_reset$regs

;
; ======== mem_asm.s28 ========
;

;
; ======== pip.s28 ========
;
    .asg    "acc,xar0,xar4,:FXN_execute$regs:", PIP_F_take$regs
    .asg    "", PIP_F_probe$regs
        .asg    "acc,xar0,xar4,:FXN_execute$regs:", PIP_F_give$regs
        .asg    "al,xar0,xar4,xar5:FXN_execute$regs:", PIP_F_start$regs

;
; ======== prd.s28 ========
;
        .asg    "al,ah,xar0,xar4,xar5, xar6,xar7,pl,ph,st0,st1 :FXN_execute$regs:, :LOG_event$regs:, :STS_add$regs:, :TRC_query$regs:", PRD_F_swi$regs
        .asg    "ah, al, xar0, xar4, xar5, xar6,xar7, :TRC_query$regs:,:LOG_event$regs:,:SWI_F_post$regs:", PRD_F_tick$regs

;
; ======== rta.s28 ========
;
        .asg "xar0,xar4,xar5,xar6,xar7,acc", RTA_F_getlog$regs
        .asg "", RTA_F_getsts$regs
        .asg "ah, xar4, xar5", RTA_F_readblk$regs
        .asg "", RTA_F_writeword$regs
        .asg    "xar4, xar5, xar6, xar7, al", RTA_F_resetmem$regs
        .asg "xar4,xar5,xar7,intm,dbgm,acc", RTA_F_dispatch$regs

;
; ======== rta_andn.s28 ========
;
        .asg "", RTA_F_andn$regs
        .asg "", RTA_F_or$regs
        .asg "", RTA_F_or$regs

;
; ======== rtdx_isr.s28 ========
;
        .asg "", RTDX_F_isr$regs

;
; ======== sts.s28 ========
;
        .asg    "acc, xar5,:STS_F_add$regs:", STS_F_delta$regs
    .asg    "acc", STS_F_add$regs
    .asg    "",  STS_F_set$regs
    .asg    "xar4,ar0",  STS_F_reset$regs

;
; ======== swi.s28 ========
;
        .asg    "xar0,al,:SWI_F_exec_sync$regs:", SWI_F_enable$regs
        .asg    "al,ar6,xar0,xar4,xar5,:logPost$regs:,:stsPost$regs:,:TRC_query$regs:", SWI_F_post$regs
        .asg    "sp,xar0,al", SWI_F_exec_sync$regs
        .asg    "sp,al,xar0,intm,dbgm", SWI_F_exec$regs
        .asg    "acc,sp,xar0,xar6,t,xar4,xar5,:FXN_execute$regs:,:logBegin$regs:,:logEnd$regs:,:stsEnd$regs:,:TRC_query$regs:",SWI_F_run$regs
        .asg    "xar0, xar4, xar5, xar6, xar7:LOG_event$regs:", logPost$regs
        .asg    "xar4, xar5, xar7, LOG_event$regs:", logBegin$regs
        .asg    "xar0,xar4,xar5,xar6,xar7,:LOG_event$regs:", logEnd$regs
        .asg    "xar0,xar5,acc,STS_set$regs:", stsPost$regs
        .asg    "xar0,xar4,ar5,acc,:CLK_itime$regs:,:STS_delta$regs:", stsEnd$regs

;
; ======== swi_pri.s28 ========
;
   .asg   " al,xar4:HWI_disable$regs:,:HWI_enable$regs:,:SWI_F_exec$regs:", SWI_F_restorepri$regs

;
; ======== trc.s28 ========
;
