;
;  Copyright 2010 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
;
;
;  ======== clk5505.h55 ========
;
;

    .if ($isdefed("CLK5505_") = 0)   ; prevent multiple includes of this file
CLK5505_        .set    1

        .mmregs
        .include cinit.h55

 .asg   "(CLK_REGS + 5)", _CLK_COUNTHI_ADDR
 .asg   "(CLK_REGS + 4)", _CLK_COUNTLO_ADDR

;
;# ======== CLK_config ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "", CLK_config$regs
CLK_config .macro   _imr0tintmask, _imr1tintmask, _intbit, _timerimrmask, _timer0func, _timer0arg, _timer1func, _timer1arg, _timer2func, _timer2arg, _regs, _timerimr, _timerifr, _timernum, _usetimer, _microsecs, _tcr, _tddr, _tddrhigh, _prd, _prdhigh, _countspms, _countspmshigh, _timefxn, _hookfxn, _calDiv, _calMult, _htimediv, _htimemult, _ltimediv, _ltimeMult, _htimePerLtime
    ; only expand if the CLK module is configured by the user
    .if (CLK$ = 1)
        ; Initializing two variables here _CLK_DFLTMICROSECS will always hold
        ; the default microseconds value as specified in the cdb file
        ; _CLK_D_microseconds will hold the new microseconds value after the
        ; the timer is reprogrammed.
        ; C55_cinitFloat expects floating point constant, we do it here itself
        ; rather than in biosdata.s55
        ; These two variables are declared in C file clk_data.c

        .ref _CLK_DFLTMICROSECS
        .ref _CLK_D_microseconds
        .ref _CLK_htimePerLtime

        ; CLK_INTID provided to make unsed CLK_run happy in bios.a55 library
        .global CLK_INTID
CLK_INTID       .equ    4

        .global _CLK_timer5505, _CLK_timerIAFR, _CLK_timerNum
        .ref _CLK_timer0func, _CLK_timer1func, _CLK_timer2func
        .ref _CLK_timer0arg, _CLK_timer1arg, _CLK_timer2arg
                

_CLK_timer5505  .equ    _regs
_CLK_timerIAFR  .equ    0x1c14
_CLK_timerNum   .equ    _timernum

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_D_microseconds, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_DFLTMICROSECS, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_htimePerLtime, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_htimePerLtime:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer0func, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer0func:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer0arg, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer0arg:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer1func, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer1func:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer1arg, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer1arg:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer2func, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer2func:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_timer2arg, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_timer2arg:
        C55_cinitEnd    isClkAligned

    .else
        .wmsg "CLK Clock Services are not available"
    .endif
    .endm
;
;
;# ======== CLK_startup ========
;  Start the C55x timers.
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    prd (Timer Period Register) = CLK_PRD.
;#    prsc(Timer prescale Register) = (0x000f & CLK_TDDR)
;#    tcr (Timer Control Register)= CLK_TCR (Timer is started).
;#    Timer interrupt enable is set in interrupt enable register.
;#
;# Dependencies:
;#    This routine must be called after all other routines that use the
;#    timer and before interrupts are globally enabled.
;
    .asg    "tc1, :_CLK_setup$regs:, :_CLK_stop$regs:, :_CLK_start$regs:, :_CLK_enable$regs:", CLK_startup$regs
CLK_startup       .macro
    .mmregs
    .if ((CLK$ = 1) & (CLK_USETIMER = 1))       ; if CLK enabled
    .ref _CLK_stop
    .ref _CLK_start
    call _CLK_stop
    call _CLK_start
    .endif                                      ; if CLK enabled
    .endm

;
;# ======== CLK_readCount ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "ac0", CLK_readCount$regs
CLK_readCount .macro type
    .noremark 5673
    .if ($symcmp(":type:", "signed") == 0)
        .if(.MNEMONIC); if ; MNEMONIC ; assembler
            mov port(#_CLK_COUNTHI_ADDR), ac0
            sfts ac0, #16
            or port(#_CLK_COUNTLO_ADDR), ac0 
        .else
            ac0 = *port(#_CLK_COUNTHI_ADDR)
            ac0 = ac0 << 16
            ac0 |= *port(#_CLK_COUNTLO_ADDR)
        .endif
    .else
        .if(.MNEMONIC); if ; MNEMONIC ; assembler
            mov uns(port(#_CLK_COUNTHI_ADDR)), ac0 
            sfts ac0, #16
            or port(#_CLK_COUNTLO_ADDR), ac0 
        .else
            ac0 = uns(*port(#_CLK_COUNTHI_ADDR))
            ac0 = ac0 << 16
            ac0 |= *port(#_CLK_COUNTLO_ADDR)
        .endif
    .endif
    .remark 5673
    .endm

;
;# ======== CLK_ackIsr========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "", CLK_ackIsr$regs
CLK_ackIsr .macro
        .endm

        .endif                                  ; CLK5505_ defined
