;
;  Copyright 2010 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
;
;
;  ======== clk2420.h55 ========
;

    .if ($isdefed("CLK2420_") = 0)   ; prevent multiple includes of this file
CLK2420_    .set    1

        .mmregs
        
;2420 CLK Register struct - WARNING! should match struct in _clk2420.h
CLK_2420Regs    .struct
tidrhi          .int
tidrlo          .int
dummy1          .long
dummy2          .long
dummy3          .long
tiocp_cfghi     .int
tiocp_cfglo     .int
tistathi        .int
tistatlo        .int
tisrhi          .int
tisrlo          .int
tierhi          .int
tierlo          .int
twerhi          .int
twerlo          .int
tclrhi          .int
tclrlo          .int
tcrrhi          .int
tcrrlo          .int
tldrhi          .int
tldrlo          .int
ttgrhi          .int
ttgrlo          .int
twpshi          .int
twpslo          .int
tmarhi          .int
tmarlo          .int
tcar1hi         .int
tcar1lo         .int
tsicrhi         .int
tsicrlo         .int
tcar2hi         .int
tcar2lo         .int
    .endstruct


CLK_STARTTIMER  .set    0x1
CLK_AUTORELOAD  .set    0x2
CLK_SOFTRESET   .set    0x2
CLK_OVF_IT_FLAG .set    0x2

        .global _CLK_gptimerlo
        .global _CLK_gptimerloData
        .global _CLK_gptimerhi
        .global _CLK_gptimerlo_enablemask
_CLK_gptimerlo          .tag    CLK_2420Regs
_CLK_gptimerloData      .tag    CLK_2420Regs
_CLK_gptimerhi          .tag    CLK_2420Regs

;
;# ======== CLK_config ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "", CLK_config$regs
CLK_config .macro   _imr0tintmask, _imr1tintmask, _timersbase, _timerbasedata, _intbit, _timerimrmask, _regs, _regsdata, _timerimr, _timerifr, _timernum, _usetimer, _enablehtime, _microsecs, _tcr, _tddr, _inputclk, _htimeclk, _prd, _prdhigh, _countspms, _countspmshigh, _timefxn, _hookfxn, _clkdiv, _calibDiv, _calibMult, _htimediv, _htimemult, _ltimediv, _ltimemult, _htimePerLtime

    ; only expand if the CLK module is configured by the user
    .if (CLK$ = 1)
        ; Initializing two variables here _CLK_DFLTMICROSECS will always hold
        ; the default microseconds value as specified in the cdb file
        ; _CLK_D_microseconds will hold the new microseconds value after the
        ; the timer is reprogrammed.
        ; C55_cinitFloat expects floating point constant, we do it here itself
        ; rather than in biosdata.s55
        ; These two variables are declared in C file clk_data.c

        .ref _CLK_DFLTMICROSECS
        .ref _CLK_D_microseconds
        .ref _CLK_inputClock
        .ref _CLK_htimeClock
        .ref _CLK_htimePerLtime
             
        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_D_microseconds, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_DFLTMICROSECS, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_inputClock, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_inputclk:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_htimeClock, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_htimeclk:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_htimePerLtime, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_htimePerLtime:
        C55_cinitEnd    isClkAligned
    .else
        .wmsg "CLK Clock Services are not available"
    .endif

_CLK_gptimerlo                  .equ    _regs
_CLK_gptimerloData              .equ    :_regsdata:
; htime timer fixed to timer7
_CLK_gptimerhi          .equ    _timersbase + 0x800
_CLK_gptimerlo_enablemask       .equ    _timerimrmask
    .endm
    
;
;
;# ======== CLK_startup ========
;  Start the 2420 timers.
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    Timer Period Register = CLK_PRD.
;#    Timer prescale Register =  CLK_TDDR
;#    Timer is started.
;#    Timer interrupt enable is set in interrupt enable register.
;#
;# Dependencies:
;#    This routine must be called after all other routines that use the
;#    timer and before interrupts are globally enabled.
;
    .asg    "tc1, :_CLK_setup$regs:, :_CLK_stop$regs:, :_CLK_start$regs:, :_CLK_enable$regs:", CLK_startup$regs

CLK_startup       .macro
    .mmregs
        .if ((CLK$ = 1) & (CLK_USETIMER = 1))           ; if CLK enabled
            .ref _CLK_stop
            .ref _CLK_start
            call _CLK_stop                              ; stop ltime
            call _CLK_start                             ; start ltime
        .endif
        .if (CLK_ENABLEHTIME = 1)
            .ref _CLK_stop_htimer
            .ref _CLK_start_htimer
            call _CLK_stop_htimer                       ; stop htime
            call _CLK_start_htimer                      ; start htime
        .endif
    .endm

;
;# ======== CLK_readCount ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "ac1,ac0,ar0", CLK_readCount$regs
CLK_readCount .macro type
    .noremark 5673
    .if ($symcmp(":type:", "signed") == 0)
        .if (.MNEMONIC)
            pshboth ac1
            psh AC1G_MMR
            mov uns(port(#(_CLK_gptimerlo.tcrrlo))), ac0
            mov port(#(_CLK_gptimerlo.tcrrhi)), ac1
            sfts ac1, #16
            or ac1, ac0
            pop AC1G_MMR
            popboth ac1
        .else
            pshboth(ac1)
            push(AC1G_MMR) || mmap()
            ac0 = uns(*port(#(_CLK_gptimerlo.tcrrlo)))
            ac1 = *port(#(_CLK_gptimerlo.tcrrhi))
            ac1 = ac1 << 16
            ac0 |= ac1
            AC1G_MMR = pop() || mmap()
            ac1 = popboth()
        .endif
    .else
        .if (.MNEMONIC)
            pshboth ac1
            psh AC1G_MMR
            mov uns(port(#(_CLK_gptimerlo.tcrrlo))), ac0
            mov uns(port(#(_CLK_gptimerlo.tcrrhi))), ac1
            sfts ac1, #16
            or ac1, ac0
            pop AC1G_MMR
            popboth ac1
        .else
            pshboth(ac1)
            push(AC1G_MMR) || mmap()
            ac0 = uns(*port(#(_CLK_gptimerlo.tcrrlo)))
            ac1 = uns(*port(#(_CLK_gptimerlo.tcrrhi)))
            ac1 = ac1 << 16
            ac0 |= ac1
            AC1G_MMR = pop() || mmap()
            ac1 = popboth()
        .endif
    .endif
    .remark 5673
    .endm

;
;# ======== CLK_ackIsr========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "ar0", CLK_ackIsr$regs
CLK_ackIsr .macro
    .ref CLK_TIMERS_BASE_DATAMEM
    ac0 = #CLK_OVF_IT_FLAG
    dbl(*(#(_CLK_gptimerloData.tisrhi))) = ac0 
    .endm

    .endif ; ($isdefed("CLK2420_") = 0)
