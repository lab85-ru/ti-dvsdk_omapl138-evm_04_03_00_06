;
;  Copyright 2010 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,28 02-10-2010 (cuda-u28)
;
;
;  ======== clk5502.h55 ========
;

        .if ($isdefed("CLK5502_") = 0)   ; prevent multiple includes of this file
CLK5502_        .set    1
        .mmregs

_CLK_MAXPER             .set    0ffffh          ; Maximum clock period
                                                ; This  is the value
                                                ; set to PRD, when
                                                ; callibration  is
                                                ; done.

;  BIT POSITIONS OF TLB,ARB and  TSS in the TCR register
_CLK_TLB_POS            .set    10              ; bit pos of TLB
_CLK_TSS_POS            .set    4               ; bit pos of TSS
_CLK_ARB_POS            .set    5               ; bit pos of ARB

_CLK_O_TIM1             .set    08h             ; offset for TIM1  register
_CLK_O_PRD1             .set    0ch             ; offset for PRD1  register
_CLK_O_PRD3             .set    0eh             ; offset for PRD3  register
_CLK_O_TCR              .set    10h             ; offset for TCR12 register
_CLK_O_GTCR             .set    12h             ; offset for GTCR  register

 .asg "(CLK_REGS + _CLK_O_TIM1)",  _CLK_TIM_REG         ; Addr of TIM1  reg
 .asg "(CLK_REGS + _CLK_O_TIM1 + 1)",  _CLK_TIMHI_REG   ; Addr of TIM1  reg
 .asg "(CLK_REGS + _CLK_O_PRD1)",  _CLK_PRD_REG         ; Addr of PRD1  reg
 .asg "(CLK_REGS + _CLK_O_TCR)",   _CLK_TCR_REG         ; Addr of TCR12 reg
 .asg "(CLK_REGS + _CLK_O_PRD3)",  _CLK_PRSC_REG        ; Addr of PRD3  reg used as PSR
 .asg "(CLK_REGS + _CLK_O_GTCR)",  _CLK_GTCR_REG        ; Addr of GTCR  reg

_CLK_BIOS_REGS           .set           0x7800  ; Address of BIOS Timer

 .asg "(_CLK_BIOS_REGS + _CLK_O_TIM1)",  _CLK_BIOS_TIM_REG  ; Addr of BIOS TIM reg
 .asg "(_CLK_BIOS_REGS + _CLK_O_PRD1)",  _CLK_BIOS_PRD_REG  ; Addr of BIOS PRD1 reg
 .asg "(_CLK_BIOS_REGS + _CLK_O_TCR)",   _CLK_BIOS_TCR_REG  ; Addr of BIOS TCR reg
 .asg "(_CLK_BIOS_REGS + _CLK_O_GTCR)",  _CLK_BIOS_GTCR_REG ; Addr of BIOS GTCR reg

_CLK_TSSR_REGS          .set            0x8000  ; timer signal source reg
; Route Timer2 (watchdog) interrupt to INT3
_CLK_TIMER2INTR_TO_INT3 .set            0x0006

;;   BIOS timer is used in 64 bit mode
;;   General purpose timers are used in 32-bit dual chained mode, 
;;   where TIM34 is used as pre-scalar
_CLK_ENABLED_CONTINUOUSLY        .set   0x0080  ; resets timer after interrupt
_CLK_64BIT_GP_MODE_IN_RESET      .set   0x0000  ; resets timer
_CLK_64BIT_GP_MODE_NOT_IN_RESET .set    0x0003  ; 64-bit General Purpose MODE
_CLK_32BIT_DC_MODE_NOT_IN_RESET .set    0x000f  ; 32-bit Dual Chained MODE
_CLK_32BIT_DC_MODE_IN_RESET     .set    0x0000  ; 32-bit Dual Chained MODE

;
;# ======== CLK_config ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "", CLK_config$regs
CLK_config .macro   _imr0tintmask, _imr1tintmask, _intbit, _timerimrmask, _regs, _timerimr, _timerifr, _timernum, _usetimer, _enablehtime, _microsecs, _tcr, _tddr, _tddrhigh, _prd, _prdhigh, _countspms, _countspmshigh, _timefxn, _hookfxn, _clkdiv, _calibDiv, _calibMult, _htimediv, _htimemult, _ltimediv, _ltimemult, _htimePerLtime

    ; only expand if the CLK module is configured by the user
    .if (CLK$ = 1)
        ; Initializing two variables here _CLK_DFLTMICROSECS will always hold
        ; the default microseconds value as specified in the cdb file
        ; _CLK_D_microseconds will hold the new microseconds value after the
        ; the timer is reprogrammed.
        ; C55_cinitFloat expects floating point constant, we do it here itself
        ; rather than in biosdata.s55
        ; These two variables are declared in C file clk_data.c

        .ref _CLK_DFLTMICROSECS
        .ref _CLK_D_microseconds
        .ref _CLK_htimePerLtime
             
        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_D_microseconds, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_DFLTMICROSECS, FLOATSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitFloat  :_microsecs:
        C55_cinitEnd    isClkAligned

        C55_cinitHeader CINITALIGN,isClkAligned, _CLK_htimePerLtime, LONGSIZE, DATAPAGE
        C55_cinitBegin  isClkAligned
        C55_cinitLong   :_htimePerLtime:
        C55_cinitEnd    isClkAligned
    .else
        .wmsg "CLK Clock Services are not available"
    .endif
    .endm
;
;
;# ======== CLK_startup ========
;  Start the C55x timers.
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    prd (Timer Period Register) = CLK_PRD.
;#    prsc(Timer prescale Register) = (0x000f & CLK_TDDR)
;#    tcr (Timer Control Register)= CLK_TCR (Timer is started).
;#    Timer interrupt enable is set in interrupt enable register.
;#
;# Dependencies:
;#    This routine must be called after all other routines that use the
;#    timer and before interrupts are globally enabled.
;
    .asg    "tc1, :_CLK_setup$regs:, :_CLK_stop$regs:, :_CLK_start$regs:, :_CLK_enable$regs:", CLK_startup$regs
CLK_startup       .macro
    .mmregs
    .if ((CLK$ = 1) & (CLK_USETIMER = 1))       ; if CLK enabled
        .ref _CLK_stop
        .ref _CLK_start
        call _CLK_stop
        ;if Timer2 was selected route intr to INT3
        .if (CLK_TIMERNUM = 2)
            .if (.MNEMONIC)                     ; if .MNEMONIC assembler
                mov #_CLK_TIMER2INTR_TO_INT3, port(#_CLK_TSSR_REG)
            .else
                *port(#_CLK_TSSR_REGS) = #_CLK_TIMER2INTR_TO_INT3
            .endif      
        .endif
        call _CLK_start
    .endif
    .if(CLK_ENABLEHTIME = 1)
        .ref _CLK_stop_htimer
        .ref _CLK_start_htimer
        call _CLK_stop_htimer
        call _CLK_start_htimer
    .endif
    .endm

;
;# ======== CLK_readCount ========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "ac0", CLK_readCount$regs
CLK_readCount .macro type
    .noremark 5673
    .if ($symcmp(":type:", "signed") == 0)
        .if(.MNEMONIC); if ; MNEMONIC ; assembler
            mov port(#_CLK_TIMHI_REG), ac0
            sfts ac0, #16
            or port(#_CLK_TIM_REG), ac0 
        .else
            ac0 = *port(#_CLK_TIMHI_REG)
            ac0 = ac0 << 16
            ac0 |= *port(#_CLK_TIM_REG)
        .endif
    .else
        .if(.MNEMONIC); if ; MNEMONIC ; assembler
            mov uns(port(#_CLK_TIMHI_REG))), ac0 
            sfts ac0, #16
            or port(#_CLK_TIM_REG)), ac0 
        .else
            ac0 = uns(*port(#_CLK_TIMHI_REG))
            ac0 = ac0 << 16
            ac0 |= *port(#_CLK_TIM_REG)
        .endif
    .endif
    .remark 5673
    .endm

;
;# ======== CLK_ackIsr========
;
;#
;# Preconditions:
;#    none
;#
;# Postconditions:
;#    none
;#
        .asg    "", CLK_ackIsr$regs
CLK_ackIsr .macro
        .endm

    .endif                                      ; CLK5502_ defined
