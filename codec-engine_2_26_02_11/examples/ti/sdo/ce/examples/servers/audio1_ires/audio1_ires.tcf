/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== audio1_ires.tcf ========
 */


/* get the platform name specified in the build script */
var platform = environment["config.platform"];
var platShortName = platform.match(/[^\.]+$/);

/* load platform and device specific configuration parameters */
utils.importFile("audio1_ires_" + platShortName + ".tci");


/*  ===========================================================================
 *  Enable heaps and tasks
 *  ===========================================================================
 */
bios.enableMemoryHeaps(prog);
bios.enableTskManager(prog);


/*  ===========================================================================
 *  Create heaps in memory segments that are to have heap
 *  ===========================================================================
 */

platformSeg.createHeap = true;
platformSeg.heapSize   = 0x20000;  // 128 KB

bios.DDRALGHEAP.createHeap = true;
bios.DDRALGHEAP.heapSize   = bios.DDRALGHEAP.len;

bios.L1DSRAM.createHeap       = true;
bios.L1DSRAM.enableHeapLabel  = true;
bios.L1DSRAM["heapLabel"]     = prog.extern("L1DHEAP");
if (platform.match("ti.platforms.evmDM6467")) {
    bios.L1DSRAM.heapSize     = 0x1000;   // use 4k of L1DSRAM for heap
}
else if ((platform == "ti.platforms.evmOMAPL137") ||
        (platform == "ti.platforms.evmOMAPL138")) {
    /*
     * The setting of L1DSRAM.len is to work around a problem in the BIOS 5
     * bios_6747.tci file.  Remove when that (SDOCM00051331) is fixed.
     */
    bios.L1DSRAM.len       = 0x4000;

    bios.L1DSRAM.heapSize     = 0x1000;   // use 4k of L1DSRAM for heap
}
else {
    bios.L1DSRAM.heapSize         = 0x8000;
}

/*  ===========================================================================
 *  GBL
 *  ===========================================================================
 */
/* MAR bits set in platform-specific *.tci file */
bios.GBL.ENABLEALLTRC    = false;
bios.GBL.PROCID          = 0;


/*  ===========================================================================
 *  MEM : startup and SWI stack size
 *  ===========================================================================
 */
bios.MEM.STACKSIZE = 0x1000;


/*  ===========================================================================
 *  Global Settings
 *  ===========================================================================
 */
bios.MEM.ARGSSIZE = 256;


/*  ===========================================================================
 *  Enable MSGQ and POOL Managers
 *  ===========================================================================
 */
bios.MSGQ.ENABLEMSGQ = true;
bios.POOL.ENABLEPOOL = true;


/*  ===========================================================================
 *  Set all code and data sections to use DDR2
 *  ===========================================================================
 */
bios.setMemCodeSections (prog, platformSeg);
bios.setMemDataNoHeapSections (prog, platformSeg);
bios.setMemDataHeapSections (prog, platformSeg);


/*  ===========================================================================
 *  MEM : Global
 *  ===========================================================================
 */
bios.MEM.BIOSOBJSEG = platformSeg;
bios.MEM.MALLOCSEG  = platformSeg;


/*  ===========================================================================
 *  Take a chunk of L1DSRAM for the buffer resource memory
 *  ===========================================================================
 */
var buflen = 0x500;
bios.L1DSRAM.heapSize -= buflen;
bios.L1DSRAM.len -= buflen;

var bufbase = bios.L1DSRAM.base + bios.L1DSRAM.len;

var mem = bios.MEM.create("BUFMEM");
mem.base = bufbase;
mem.len = buflen;
mem.createHeap = false;


/*  ===========================================================================
 *  TSK : Global
 *  ===========================================================================
 */
bios.TSK.STACKSEG = platformSeg;


/*  ===========================================================================
 *  Generate configuration files...
 *  ===========================================================================
 */
if (config.hasReportedError == false) {
    prog.gen();
}
/*
 *  @(#) ti.sdo.ce.examples.servers.audio1_ires; 1, 0, 0,160; 12-2-2010 21:23:46; /db/atree/library/trees/ce/ce-r11x/src/ xlibrary

 */

