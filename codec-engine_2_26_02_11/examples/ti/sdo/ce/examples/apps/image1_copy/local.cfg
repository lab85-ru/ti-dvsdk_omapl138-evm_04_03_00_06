/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== local.cfg ========
 */

/* use an osal.  osalGlobal is configured below, based on target. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

/* set to true to enable checked libraries */
xdc.useModule('ti.sdo.ce.Settings').checked = false;

/* get various codec modules; i.e., implementation of codecs */
var decoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.imgdec1_copy.IMGDEC1_COPY');
var encoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.imgenc1_copy.IMGENC1_COPY');

if (Program.build.target.os == undefined) {
    /* Presume this is a BIOS OS */

    // DSKT2 configuration
    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "L1DHEAP";
    DSKT2.DARAM1     = "L1DHEAP";
    DSKT2.DARAM2     = "L1DHEAP";
    DSKT2.SARAM0     = "L1DHEAP";
    DSKT2.SARAM1     = "L1DHEAP";
    DSKT2.SARAM2     = "L1DHEAP";
    DSKT2.ESDATA     = "DDR2";
    DSKT2.IPROG      = "L1DHEAP";
    DSKT2.EPROG      = "DDR2";
    DSKT2.DSKT2_HEAP = "DDR2";    /* to allocate internal DSKT2 object */

//    DSKT2.debug = true;

    /* No algorithms use DMA, so DMAN3 config is unnecessary */


    // New CE 2.10 OS configuration: osal.Global has a new configuration
    // parameter, osal.Global.os, which is of type ti.sdo.ce.osal.IOsal.Module.
    // This allows third parties to plug in their own osal implementation.
    //
    // In CE 2.10, the Comm, Processor, and Power modules are no longer built
    // into the osal library. These modules are now part of an "ipc" package.
    // So if the osal.Global.os is configured, the ipc must also.
    //
    // In CE 2.10, osal.Global.runtimeEnv no longer needs to be configured,
    // and can be replaced by configuration of the ipc and the os modules.
    //
    // In this configuration file, osalGlobal.runtimeEnv = osalGlobal.DSPBIOS
    // is replaced with the following code below.
    //

    // Set the os to BIOS
    var os = xdc.useModule('ti.sdo.ce.osal.bios.Settings');
    osalGlobal.os = os;

    /* configure default memory seg id to the BIOS configured "DDR2" */
    os.defaultMemSegId = "DDR2";

    // Set the ipc to BIOS: First get the module ipc.Settings. Then set
    // the ipc.Settings.ipc to the ce.ipc.bios.Ipc module.
    var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
    ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
}
else if (Program.build.target.os == "Linux") {
    // In this configuration file, osalGlobal.runtimeEnv = osalGlobal.LINUX
    // is replaced with the following code below.
    //

    // Set the os to Linux
    osalGlobal.os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');;

    // Use the Linux ipc
    var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
    ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.linux.Ipc');
}
else if (Program.build.target.os == "WindowsCE") {
    osalGlobal.runtimeEnv = osalGlobal.WINCE;
}
else {
    /* Unsupported OS.  Throw an exception to alert the user. */
    throw ("Unsupported target OS");
}

/*
 *  ======== Engine Configuration ========
 */
var Engine = xdc.useModule('ti.sdo.ce.Engine');
var myEngine = Engine.create("image1_copy", [
    {
        name : "imgdec1_copy",
        mod  : decoder,
        local: true
    },
    {
        name: "imgenc1_copy",
        mod  : encoder,
        local: true
    }
]);
/*
 *  @(#) ti.sdo.ce.examples.apps.image1_copy; 1, 0, 0,263; 12-2-2010 21:19:54; /db/atree/library/trees/ce/ce-r11x/src/ xlibrary

 */

