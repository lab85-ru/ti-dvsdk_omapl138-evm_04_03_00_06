/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*  utils.importFile("../../../rman/examples/common.cfg");*/

var chipType = Program.build.cfgArgs.chipType;

/* Set up gt trace defaults */

var GTINFRA = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
GTINFRA.runtimeEnv = GTINFRA.NONE;

var GT = xdc.useModule("ti.sdo.utils.trace.GT");
GT.MALLOCFXN = "myMalloc";
GT.PRINTFXN = "printfCaller";

/*
/*
 * Configure the RMAN to be used
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = false;
RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
RMAN.persistentFreeFxn = "__ALG_freeMemory" ;

RMAN.tableSize = 10;
RMAN.semCreateFxn = "mySemCreate";
RMAN.semDeleteFxn = "mySemDelete";
RMAN.semPendFxn = "mySemPend";
RMAN.semPostFxn = "mySemPost";

if ((chipType == "DM355") || (chipType == "PC") || (chipType == "DM365")) {

    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');

/*      var EX = xdc.useModule("ti.sdo.fc.rman.examples.EXAMPLE");*/

    if (chipType == "DM365") {
        Program.sectMap[".text"] = {runSegment: "DDR"};
        Program.sectMap[".text"] = {loadSegment: "DDR"};
        Program.sysStack = 0x4000;
        Program.stack = 0x4000;
        Program.heap = 0x4000;
    }
    //var DEBUGM = xdc.useModule('ti.sdo.fc.utils.SMGRMP'); /* For debug only */
    //DEBUGM = xdc.useModule('ti.sdo.fc.utils.SHM'); /* For debug only */

    if (Program.build.target.os == "Linux") {
        xdc.loadPackage("ti.sdo.linuxutils.cmem");
        /* For new GROUPUTILS API */
        GROUPUTILS = xdc.useModule("ti.sdo.fc.ires.grouputils.GROUPUTILS");

        /* Declare dependency on package implementing the lock fxns */
        GROUPUTILS.scratchFxnPackage  = "ti.sdo.ce";
        GROUPUTILS.lockScratchGroupFxn = "Algorithm_acquireLock";
        GROUPUTILS.unlockScratchGroupFxn = "Algorithm_releaseLock";

        var ALG = xdc.useModule("ti.sdo.ce.alg.Settings");
        ALG.groupUsed = [1,1,1,1];
    /*
     * All other supported targets are Linux (and not heterogeneous, so don't
     * worry about Link-based OSALs.
     */
    var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

    var os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');
    osalGlobal.os = os;

    // Use the linux ipc.
    var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
    ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.linux.Ipc');

    xdc.loadPackage("ti.sdo.ce.alg").profile = "debug";
    }
}
else {
    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP');
}

/* For the alg APIs */
xdc.loadPackage("ti.sdo.fc.utils.api");

/* FOR VICPSYNC usage */
xdc.useModule("ti.sdo.fc.vicpsync.VICPSYNC");
xdc.useModule("ti.sdo.fc.hdvicpsync.HDVICPSYNC");
xdc.useModule("ti.sdo.fc.ires.hdvicp.HDVICP");


xdc.useModule("ti.sdo.fc.global.Settings").profile = "debug_trace";
/*
 *  @(#) ti.sdo.fc.rman.examples.lateacquire; 1, 0, 0,32; 12-1-2010 17:25:45; /db/atree/library/trees/fc/fc-p01x/src/ xlibrary

 */

