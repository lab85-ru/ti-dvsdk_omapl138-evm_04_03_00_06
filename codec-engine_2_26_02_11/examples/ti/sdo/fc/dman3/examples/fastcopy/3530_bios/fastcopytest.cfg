/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== fastcopytest.cfg ========
 */
/*
 * Load common XDC config settings
 */
utils.importFile("../common.cfg");

var chipType   = Program.build.cfgArgs.chipType;
var acpy3Instr = Program.build.cfgArgs.ACPY3_INSTR;
var libDebug   = Program.build.cfgArgs.debugFlag;

print("fastcopytest.cfg: chipType= " + chipType + " ACPY3_INSTR=" +acpy3Instr);

var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');

var LLD = Program.build.cfgArgs.lldsetting; 
if (LLD == true) {
    DMAN3.useExternalRM = true; 
}
else {
    print("LLD IS NOT SET " + LLD);
}

if (acpy3Instr == true) {
    ACPY3.instrumented = true;
}

DMAN3.heapInternal = "L1DHEAP";
DMAN3.heapExternal = "EXTERNALHEAP";

if (DMAN3.useExternalRM == true) {
    var DSKT2 = xdc.useModule("ti.sdo.fc.dskt2.DSKT2");
    var EDMA3 = xdc.useModule("ti.sdo.fc.edma3.Settings");
    EDMA3.semCreateFxn = "mySemCreate";
    EDMA3.semDeleteFxn = "mySemDelete";
    EDMA3.semPendFxn = "mySemPend";
    EDMA3.semPostFxn = "mySemPost";
    EDMA3.persistentAllocFxn = "DSKT2_allocPersistent";
    EDMA3.persistentFreeFxn = "DSKT2_freePersistent";
    var EDMA3LLD = xdc.loadPackage('ti.sdo.edma3.rm');
    EDMA3LLD.profile = "debug";
    EDMA3.maxPaRams = [4,3,2,0,0,5];
    EDMA3.maxTccs = [4,3,2,0,0,5];
    DMAN3.numQdmaChannels = 1;
}
else {
    DMAN3.numQdmaChannels = 8;
    DMAN3.paRamBaseIndex = 78;
    DMAN3.numPaRamEntries = 48;
    DMAN3.nullPaRamIndex = 127;
    DMAN3.tccAllocationMaskH = 0xffffffff;
    DMAN3.tccAllocationMaskL = 0x0;
    DMAN3.numTccGroup   = [4, 3, 2, 0, 0, 5];
    DMAN3.numPaRamGroup = [4, 4, 2, 0, 0, 5];

    DMAN3.qdmaChannels = [0, 1, 2, 3, 4, 5, 6, 7];
    DMAN3.maxQdmaChannels = 8;

    DMAN3.maxTCs = 2;
    DMAN3.queueTCMap = [0,1];
    DMAN3.queuePri = [3,7];
    DMAN3.qdmaQueueMap = [1,1,1,1,1,1,1,1];
}
/*
 *  @(#) ti.sdo.fc.dman3.examples.fastcopy; 1, 0, 0,235; 12-1-2010 17:24:28; /db/atree/library/trees/fc/fc-p01x/src/ xlibrary

 */

