/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

// Use local buildDspLink.xs, so Power_dsplink.c can be removed from build
// if device does not support power management.
var buildDspLink = xdc.loadCapsule('./buildDspLink.xs');

Pkg.makePrologue += "\n" + buildDspLink.makePrologue;

Pkg.otherFiles = [
    "_adapted_link_gpptypes.h",
    /* needed by ti.sdo.ce.ipc.dsplink package */
    "buildDspLink.xs",
    "Comm_dsplink.c",
    "Power_dsplink.c",
    "Processor_dsplink.c",
    "Processor_dsplink_linkcfg_OS.c",
    "makefile",
    "package.bld",
    "README.txt"
];

Pkg.attrs.exportAll = true;

try {
    var linkGppGlobal = xdc.useModule("dsplink.gpp.Global");
}
catch (e) {
    print("Remark: module \'dsplink.gpp.Global\' not found, this " +
          "package will not be built.");
}

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];
    var lib;

    /* build only for ARM targets with dsplink */
    if (!linkGppGlobal) {
        continue;
    }

    if ((":"+targ.getISAChain().join(":")+":").match(/:v5T:|:v6:/i)) {
        /* DM6446 */
        linkGppGlobal.runtimeOS = linkGppGlobal.LINUX;
        linkGppGlobal.deviceName = linkGppGlobal.DAVINCI;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_6446", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM6446.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_6446", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM6446.c"
        ]);

        /* DM6467 */
        linkGppGlobal.deviceName = linkGppGlobal.DAVINCIHD;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_6467", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM6467.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_6467", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM6467.c"
        ]);

        /* OMAP2530 */
        linkGppGlobal.deviceName = linkGppGlobal.OMAP2530;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_2530", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAP2530.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_2530", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAP2530.c"
        ]);

        /* OMAP3530 */
        linkGppGlobal.deviceName = linkGppGlobal.OMAP3530;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_3530", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAP3530.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_3530", targ, {
            defs: linkGppGlobal.getDefines(),
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAP3530.c"
        ]);

        /* DM357 */
        linkGppGlobal.deviceName = linkGppGlobal.DM357;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_357", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM357.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_357", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_DM357.c"
        ]);

        /* OMAPL137 */
        linkGppGlobal.deviceName = linkGppGlobal.OMAPL1XX;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_137", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAPL137.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_137", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAPL137.c"
        ]);

        /* OMAPL138 */
        linkGppGlobal.deviceName = linkGppGlobal.OMAPL138;

        lib = Pkg.addLibrary("lib/release/ipc_dsplink_138", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAPL138.c"
        ]);

        lib = Pkg.addLibrary("lib/debug/ipc_dsplink_138", targ, {
            defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
            incs: linkGppGlobal.getIncludes(),
            profile: "debug"
        });
        lib.addObjects(buildDspLink.objs);
        lib.addObjects([
            "Processor_dsplink_linkcfg_OMAPL138.c"
        ]);
    }
    else {
        if ((":"+targ.getISAChain().join(":")+":").match(/:v4T:/i)) {
            /* OMAP3530 */
            linkGppGlobal.runtimeOS = linkGppGlobal.WINCE;
            linkGppGlobal.deviceName = linkGppGlobal.OMAP3530;

            lib = Pkg.addLibrary("lib/release/ipc_dsplink_3530", targ, {
                defs: linkGppGlobal.getDefines(),
                incs: linkGppGlobal.getIncludes(),
            });
            lib.addObjects(buildDspLink.objs);
            lib.addObjects([
                "Processor_dsplink_linkcfg_OMAP3530.c"
            ]);

            lib = Pkg.addLibrary("lib/debug/ipc_dsplink_3530", targ, {
                defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
                incs: linkGppGlobal.getIncludes(),
                profile: "debug"
            });
            lib.addObjects(buildDspLink.objs);
            lib.addObjects([
                "Processor_dsplink_linkcfg_OMAP3530.c"
            ]);

            /* DM6446 */
            linkGppGlobal.deviceName = linkGppGlobal.DAVINCI;
            linkGppGlobal.runtimeOS = linkGppGlobal.WINCE;

            lib = Pkg.addLibrary("lib/release/ipc_dsplink_6446", targ, {
                defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
                incs: linkGppGlobal.getIncludes(),
            });
            lib.addObjects(buildDspLink.objs);
            lib.addObjects([
                "Processor_dsplink_linkcfg_DM6446.c"
            ]);

            lib = Pkg.addLibrary("lib/debug/ipc_dsplink_6446", targ, {
                defs: linkGppGlobal.getDefines() + "-DPOWER_NOT_SUPPORTED ",
                incs: linkGppGlobal.getIncludes(),
                profile: "debug"
            });
            lib.addObjects(buildDspLink.objs);
            lib.addObjects([
                "Processor_dsplink_linkcfg_DM6446.c"
            ]);
        }
    }
}
/*
 *  @(#) ti.sdo.ce.ipc.dsplink; 2, 0, 1,182; 12-2-2010 21:24:23; /db/atree/library/trees/ce/ce-r11x/src/ xlibrary

 */

