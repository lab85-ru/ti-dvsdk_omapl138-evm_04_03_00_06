%%{
/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
 %%}

/*
 *  ======== server.tcf ========
 */

var platform = environment["config.platform"];
print("platform   = " + platform);

utils.importFile('./memmap.tci');

var device_regs = {
    l1Mode: "32k",
    l2Mode: "32k"
};

var params = {
    clockRate: 594,
    catalogName: "ti.catalog.c6000",
    deviceName: "DM6467",
    regs: device_regs,
    mem: mem_ext
};

/* Now customize the generic platform with parameters specified above. */
utils.loadPlatform("ti.platforms.generic", params);

/* Enable heaps and tasks */
bios.enableMemoryHeaps(prog);
bios.enableTskManager(prog);

/* Create heaps in memory segments that are to have heap */
bios.DDR2.createHeap = true;
bios.DDR2.heapSize   = 0x00040000; // 256K

bios.DDRALGHEAP.createHeap = true;
bios.DDRALGHEAP.heapSize   = bios.DDRALGHEAP.len;

/* IRAM */
bios.MEM.instance("IRAM").createHeap = 1;
bios.MEM.instance("IRAM").heapSize = 0x00018000;
bios.MEM.instance("IRAM").enableHeapLabel = 1;
bios.MEM.instance("IRAM").heapLabel = prog.extern("IRAM_HEAP", "asm");

/* GBL */
bios.GBL.ENABLEALLTRC    = false;
bios.GBL.PROCID          = 0;

bios.MEM.instance("IRAM").base = 0x11818000;
bios.MEM.instance("IRAM").len = 0x20000;
bios.MEM.instance("CACHE_L2").base = 0x11818000 + 0x1E000;
bios.MEM.instance("CACHE_L2").len = 0x0;

bios.GBL.C64PLUSCONFIGURE   = true ;
bios.GBL.C64PLUSL2CFG       = "0k" ;
bios.GBL.C64PLUSL1DCFG      = "32k" ;
//PP bios.GBL.C64PLUSL1PCFG      = "32k" ;
bios.GBL.C64PLUSMAR128to159 = 0x0000ffff;

/* MEM */
bios.MEM.STACKSIZE = 0x1000;

/* Global Settings */
bios.MEM.ARGSSIZE = 256;

/* Enable MSGQ and POOL Managers */
bios.MSGQ.ENABLEMSGQ = true;
bios.POOL.ENABLEPOOL = true;

/* Set all code and data sections to use DDR2 */
bios.setMemCodeSections(prog, bios.DDR2);
bios.setMemDataNoHeapSections(prog, bios.DDR2);
bios.setMemDataHeapSections(prog, bios.DDR2);

/* MEM : Global */
bios.MEM.BIOSOBJSEG = bios.DDR2;
bios.MEM.MALLOCSEG  = bios.DDR2;

/* TSK : Global */
bios.TSK.STACKSEG = bios.DDR2;
bios.TSK.STACKSIZE = 0x1000;

/* Fix for clock */
bios.CLK.SPECIFYRATE = true;
bios.CLK.INPUTCLK = 148.5;

/* Generate configuration files... */
if (config.hasReportedError == false) {
    prog.gen();
}
/*
 *  @(#) ti.sdo.ce.wizards.genserver; 1, 0, 0,84; 12-2-2010 21:28:48; /db/atree/library/trees/ce/ce-r11x/src/ xlibrary

 */

